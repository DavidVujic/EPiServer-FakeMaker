<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.WorkflowFoundation</name>
    </assembly>
    <members>
        <member name="T:EPiServer.WorkflowFoundation.Activities.AddUserDataValidator">
            <summary>
            Validates AddUserData activity that passed object are serializable
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AddUserDataValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
            <summary>
            Verifies that the given activity is valid.
            </summary>
            <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager"></see> associated with validation.</param>
            <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity"></see> to be validated.</param>
            <returns>
            A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection"></see> object containing any errors or warnings that occurred during validation.
            </returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositeActivityTheme">
            <summary>
            We make our custom composite event activity has same appearance as a "simple"
            external event activity in designer.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileAdded">
            <summary>
            <para>
            Event activity that is invoked when a file is added to File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>
            The file has to be added through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1">
            <summary>
            Base class for all file related compostite event activities.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1">
            <summary>
            Compostite base class for all event related activities. The composite base class is responsible 
            for event registration/unregistration to hosts EventTrackingService.
            </summary>
            <typeparam name="T">the "raw" event activity</typeparam>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.RegisterEvent(System.Object,System.EventArgs)">
            <summary>
            Register event with EventTrackingService so host knows that this instance waits for event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.UnregisterEvent(System.Object,System.EventArgs)">
            <summary>
            Unregister event with EventTrackingService
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
            <summary>
            Creates the subscription of an <see cref="T:Microsoft.Workflow.ComponentModel.Activity"></see> to an event.
            </summary>
            <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext"></see> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity"></see>.</param>
            <param name="parentEventHandler">The <see cref="T:System.EventHandler"></see> for the parent event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
            <summary>
            Cancels the subscription of an <see cref="T:Microsoft.Workflow.ComponentModel.Activity"></see> to an event.
            </summary>
            <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext"></see> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity"></see>.</param>
            <param name="parentEventHandler">The <see cref="T:System.EventHandler"></see> for the parent event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.OnEventRegistered(System.Guid,System.String)">
            <summary>
            Raises the <see cref="E:EventRegistered"/> event.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.EventActivity">
            <summary>
            Gets wrapped "raw" event activity.
            </summary>
            <value>The event activity.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.QueueName">
            <summary>
            Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue"></see> on which the activity is waiting for data to arrive.
            </summary>
            <value></value>
            <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue"></see> on which the activity is waiting for data to arrive.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.Description">
            <summary>
            Gets or sets the user defined description of the <see cref="T:System.Workflow.ComponentModel.Activity"></see>.
            </summary>
            <value></value>
            <returns>The text description of the <see cref="T:System.Workflow.ComponentModel.Activity"></see>.</returns>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.CompositeEventBase`1.EventRegistered">
            <summary>
            Occurs when an event is registered.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.EventActivity_Invoked(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Handles the Invoked event of the EventActivity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.InvokedEvent">
            <summary>
            Invoked event
            </summary>
            <exclude/>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.Invoked">
            <summary>
            Event delegate that is called when event occurs
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.VirtualPath">
            <summary>
            The virtual path for the to the FileSystem item
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.NewVirtualPath">
            <summary>
            The new virtual path for the FileSystem item
            </summary>
            <remarks>This is only set for some events, i.e. FileCopied</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.EventType">
            <summary>
            The event type that caused this event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeFileSystemBase`1.IsFile">
            <summary>
            Indicates if this event is file or directory related
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileDeleted">
            <summary>
            <para>
            Event activity that is invoked when a file is deleted from File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The file has to be deleted through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileMoved">
            <summary>
            <para>
            Event activity that is invoked when a file is moved in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The file has to be moved through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileCopied">
            <summary>
            <para>
            Event activity that is invoked when a file is copied in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The file has to be copied through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileCheckedIn">
            <summary>
            <para>
            Event activity that is invoked when a file is checked in in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileCheckedOut">
            <summary>
            <para>
            Event activity that is invoked when a file is checked out in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryAdded">
            <summary>
            <para>
            Event activity that is invoked when a directory is added to File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The directory has to be added through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryDeleted">
            <summary>
            <para>
            Event activity that is invoked when a directory is deleted from File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The directory has to be deleted through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryMoved">
            <summary>
            <para>
            Event activity that is invoked when a directory is moved in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The directory has to be moved through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryCopied">
            <summary>
            <para>
            Event activity that is invoked when a directory is copied in File system
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>The directory has to be copied through EPiServer API for the event to get triggered</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnFileSystemEvent">
            <summary>
            <para>
            Event activity that is invoked when a file system event occurs in File System
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/>
            </para>
            </summary>
            <remarks>For the event to get triggered the action has to be done through EPiServer API</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageEvent">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.CreatedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>Will only be called for events that is related to the page the workflow instance is associated with. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1">
            <summary>
            Base class for all page related compostite event activities.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.EventActivity_Invoked(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Handles the Invoked event of the EventActivity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.InvokedEvent">
            <summary>
            Invoked event
            </summary>
            <exclude/>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.Invoked">
            <summary>
            Event delegate that is called when event occurs
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.CacheKey">
             <summary>
             Gets the cache key which can be used to get the triggering <see cref="T:EPiServer.PageEventArgs"></see>
             </summary>
             <value>The cache key.</value>
             <remarks>The cached item can be recieved from <see cref="T:EPiServer.WorkflowFoundation.Services.EventTrackingService"></see> using IServiceProvider which can
             be recieved when i.e. overriding Initialize on workflow class
            </remarks>
            <example>
            Shows how Cache service can be used
             <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/> 
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.PageLink">
            <summary>
            The PageLink for the page that is associated with the <see cref="T:EPiServer.DataFactory"></see> event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.TargetLink">
            <summary>
            The TargetLink for the page that is associated with the <see cref="T:EPiServer.DataFactory"></see> event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1.EventType">
            <summary>
            The <see cref="T:EPiServer.WorkflowFoundation.WorkflowPageEvent"></see> type of this event
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageSaved">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.SavedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageDeleted">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.DeletedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageLanguageDeleted">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.DeletedPageLanguage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPagePublished">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.PublishedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageCheckedIn">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.CheckedInPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageCreated">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.CreatedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnPageMoved">
            <summary>
            <para>
            Activity that is invoked when <see cref="E:EPiServer.Core.PageStoreBase.MovedPage"></see> is called from <see cref="T:EPiServer.DataFactory"></see>
            </para>
            <para>
            Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/>
            </para>
            </summary>
            <remarks>If workflow instance is associated with a page, only events regarding that page will be sent to activity.
            Workflow instances that are automatically started will automatically be associated with page that started instance. 
            Instances can be associated with pages by using <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnTaskDeleted">
            <summary>
            Activity that listens for <see cref="E:EPiServer.Personalization.Task.TaskDeleting"/> from EPiServer
            </summary>
            <remarks>Event argument is of type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs"/></remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1">
            <summary>
            Base class for all task related compostite event activities.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.EventActivity_Invoked(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Handles the Invoked event of the EventActivity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.InvokedEvent">
            <summary>
            invoked event
            </summary>
            <exclude/>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.Invoked">
            <summary>
            Event delegate that is called when event occurs
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.CacheKey">
            <summary>
            Gets the cache key which can be used to get the triggering Task instance.
            </summary>
            <value>The cache key.</value>
            <remarks>The cached item can be recieved from CacheService using IServiceProvider which can
            be recieved when i.e. overriding Initialize on workflow class
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.AssignedTo">
            <summary>
            The person or group/role the task is assigned to
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.TaskSubject">
            <summary>
            The subject of the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.TaskDescription">
            <summary>
            The description of the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.Status">
            <summary>
            The status of the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CompositeTaskBase`1.PreviousStatus">
            <summary>
            The previous status of the task
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.OnTaskStatusChanged">
            <summary>
            Event based activity that listens for <see cref="E:EPiServer.Personalization.Task.StatusChanged"/> from EPiServer.
            </summary>
            <remarks>
            The event argument is of the type <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs"/>.
            </remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.EventActivityValidator">
            <summary>
            Validates that "raw" event activitys is only used inside an composite activity. 
            </summary>
            <remarks>For event registration/unregistration with host to work associated composite acitivity should be used.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.EventActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
            <summary>
            Verifies that the given activity is valid.
            </summary>
            <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager"></see> associated with validation.</param>
            <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity"></see> to be validated.</param>
            <returns>
            A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection"></see> object containing any errors or warnings that occurred during validation.
            </returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DirectoryAdded">
            <summary>
            Activity that listens for DirectoryAdded event from UnifiedFileSystem. 
            Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryAdded"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileEventBase`1">
            <summary>
            The base class which all FileSystem related event activities derives from
            </summary>
            <typeparam name="T">The UnifiedFile event related activity</typeparam>
            <exclude/>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.EventBase">
            <summary>
            Base class that all EPiServer event based activities derives from. Its primary use is to make
            it possible to create a tracking profile that captures exactly all EPiServer related event activities
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.EventBase.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.EventBase"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="eventName">Name of the event.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.EventBase.InterfaceType">
            <summary>
            Gets or sets the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"></see> attributed interface type of the local service whose event will be handled. 
            This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The interface type of the local service whose event will be handled.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.EventBase.EventName">
            <summary>
            Gets the name of the raised event. This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The name of the raised event.</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileEventBase`1"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="eventName">Name of the event.</param>
            <param name="description">The description.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.VirtualPathProperty">
            <summary>
            Registers Path as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.NewVirtualPathProperty">
            <summary>
            Registers OldPath as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.IsFileProperty">
            <summary>
            Registers IsFile as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.EventTypeProperty">
            <summary>
            EventType as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.OnInvoked(System.EventArgs)">
            <summary>
            Called just after the external event is received to allow subclasses to process the inbound <see cref="T:System.EventArgs"></see> before the activity closes.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"></see> that are received from the external event that was just received.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.VirtualPath">
            <summary>
            The virtual path for the file system item
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.NewVirtualPath">
            <summary>
            The new virtual path for the file system item
            </summary>
            <remarks>This is only set for some events, i.e. FileCopied</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.EventType">
            <summary>
            The event type that caused this event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.FileEventBase`1.IsFile">
            <summary>
            Indicates if this event is file or directory related
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DirectoryAdded.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DirectoryAdded"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DirectoryDeleted">
            <summary>
            Activity that listens for DirectoryDeleted event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryDeleted"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DirectoryDeleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DirectoryDeleted"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DirectoryMoved">
            <summary>
            Activity that listens for DirectoryMoved event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryMoved"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DirectoryMoved.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DirectoryMoved"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DirectoryCopied">
            <summary>
            Activity that listens for DirectoryCopied event from file system
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnDirectoryCopied"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DirectoryCopied.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DirectoryCopied"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileSystemEvent">
            <summary>
            Activity that listens for all events from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileSystemEvent"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileSystemEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileSystemEvent"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.AddUserData">
            <summary>
            Activity that adds custom data to a
            <see cref="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.UserData"/> dictionary. 
            </summary>
            <remarks>
            Each workflow instance (WorkflowDefinitionInstance) has a dictionary&lt;string, object&gt; that can be used to 
            hold custom data for the instance. A workflow instance can pass data to its associated workflowDefinitionInstance 
            object by using the AddUserData activity. The requirement for the passed objects is that they are serializable and 
            registered with Object store (see the topic <b>Developing Workflows</b> in the <b>Developer's Guide</b> for further 
            information regarding Object store).
            </remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.InvokesBase`1">
            <summary>
            Base class for all invoke activities within EPiServer
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.InvokesBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.InvokesBase`1"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.InvokesBase`1.InterfaceType">
            <summary>
            Gets or sets external method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"></see>.
            </summary>
            <value></value>
            <returns>External method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"></see>.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.InvokesBase`1.MethodName">
            <summary>
            Gets or sets the name of the method to be called on the local service registered with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService"></see>.
            </summary>
            <value></value>
            <returns>The method name of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService"></see> interface.</returns>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddUserData.KeyProperty">
            <summary>
             Register Key property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddUserData.ValueProperty">
            <summary>
             Register Value property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddUserData.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AddUserData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.AddUserData"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AddUserData.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddUserData.Key">
            <summary>
            Gets or sets the key for the userdata
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddUserData.Value">
            <summary>
            Gets or sets the value for the userdata
            </summary>
            <remarks><para>Must be serializable</para>
            <para>If custom tyep is used scema for type must be registered with Object store</para></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddUserData.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
            <remarks>Must be serializable</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.AddHistoryItem">
            <summary>
            Activity that adds a <see cref="T:EPiServer.WorkflowFoundation.HistoryItem"/> to a 
            <see cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance"/> history log. 
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.ItemSubjectProperty">
            <summary>
             Register Subject property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.ItemDescriptionProperty">
            <summary>
             Register Description property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.UserProperty">
            <summary>
             Register User property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DeleteTask"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.ItemSubject">
            <summary>
            Gets or sets the subject for the history item
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.ItemDescription">
            <summary>
            Gets or sets the description for the history item
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AddHistoryItem.User">
            <summary>
            Gets or sets the user for the history item
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CreateTaskValidator">
            <summary>
            Validates CreateTask activity that if AssociatedActivity is given is points to an activity that has <see cref="T:EPiServer.WorkflowFoundation.UI.ActivityPlugInAttribute"/>
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CreateTaskValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
            <summary>
            Verifies that the given activity is valid.
            </summary>
            <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager"></see> associated with validation.</param>
            <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity"></see> to be validated.</param>
            <returns>
            A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection"></see> object containing any errors or warnings that occurred during validation.
            </returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage">
            <summary>
            Activity that associates a workflow instance with an EPiServer page.
            </summary>
            <remarks>
            If a workflow instance is associated with a page, only page events concerning that page will be 
            delivered to the instance. For example, if a workflow instance is interested in a specific page 
            version being published, if that instance is associated with the page, only publish events for 
            that page will be delivered. If a workflow instance is started from a page related event, the 
            instance and the page will be automatically associated. If a workflow instance is interested in 
            an event regardless of which page caused the event (e.g. the instance is interested in when a 
            page is deleted) then the instance can call AssociateWithPage with the PageLink value set to 
            <see cref="F:EPiServer.Core.PageReference.EmptyReference"/>. 
            </remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.PageLinkProperty">
            <summary>
             Register PageId property so it can be databound.
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound.
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.PageLink">
            <summary>
            Gets or sets which page version this instance should be associated with
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.AssociateWithPage.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
            <remarks>Must be serializable</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CreateTask">
             <summary>
             Activity that creates an <see cref="T:EPiServer.Personalization.Task"/> for a user/role in EPiServer.
             </summary>
             <remarks>
             <para>AssignTo and TaskSubject are mandatory and if not seet in runtime an <see cref="T:EPiServer.WorkflowFoundation.WorkflowException"/> will be thrown</para>
             <para>
             It is possible to specify which UI should be loaded when the user who has been assigned the task clicks on the task link.
             To associate a task with a specific user control the property <see cref="P:EPiServer.WorkflowFoundation.Activities.CreateTask.AssociatedActivity"/> can be used. The 
             related activity must have <see cref="T:EPiServer.WorkflowFoundation.UI.ActivityPlugInAttribute"/> 
             attribute with a valid URL to a usercontrol. If AssociatedActivity is not set for a task, the corresponding workflow 
             instance will be searched for waiting activities (event based activities) when the task link is clicked. 
             The usercontrol specified by the attribute will be loaded if any of the waiting activities has a valid ActivityPlugIn 
             attribute set. If no valid attribute is found the default edit task control will be loaded.
            </para> 
            </remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.AssignToProperty">
            <summary>
             Register AssignTo property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.TaskSubjectProperty">
            <summary>
            Register TaskSubject property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.TaskDescriptionProperty">
            <summary>
            Register TaskDescription property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.DueDateProperty">
            <summary>
            Register DueDate property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.PageLinkProperty">
            <summary>
            Register PageLink property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.AssociatedActivityProperty">
            <summary>
             Register AssociatedActivity property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.NotifyByEmailProperty">
            <summary>
             Register NotifyByEmail property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.ActivityRelatedProperty">
            <summary>
             Register ActivityRelated property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CreateTask.StateBagProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CreateTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CreateTask"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CreateTask.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.AssignTo">
            <summary>
            Gets or sets who this task is assigned to
            </summary>
            <value>The assign to.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.TaskSubject">
            <summary>
            Gets or sets the task subject.
            </summary>
            <value>The task subject.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.TaskDescription">
            <summary>
            Gets or sets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.DueDate">
            <summary>
            Gets or sets the due date for the task.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.PageLink">
            <summary>
            Gets or sets the PageLink that should be associated with this task. If a page is associated with a task that page will be 
            loaded when assigned user clicks on task.
            </summary>
            <value>The task description.</value>
            <remarks>If no page is given the taks is not related to a page.</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.AssociatedActivity">
            <summary>
            States which external activity this task should use to fetch UI user control from.
            </summary>
            <remarks>The activity should have ActivityPlugIn attribute</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.ActivityRelated">
            <summary>
            if set to false, general task UI is shown instead of looking for event activity related UI
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.NotifyByEmail">
            <summary>
            Gets or sets if a mail should be sent to assigned user
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.CreateTask.StateBag">
            <summary>
            Gets or sets the state bag for the task
            </summary>
            <value>The state bag.</value>
            <remarks>The saved objects must be serializable</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.UpdateTask">
            <summary>
            Activity that updates a <see cref="T:EPiServer.Personalization.Task"/> in EPiServer
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskIdProperty">
            <summary>
             Register TaskId property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.StatusProperty">
            <summary>
             Register Status property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.AssignToProperty">
            <summary>
             Register AssignTo property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskSubjectProperty">
            <summary>
             Register TaskSubject property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskDescriptionProperty">
            <summary>
             Register TaskDescription property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.UpdateTask.NotifyByEmailProperty">
            <summary>
             Register NotifyByEmail property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.UpdateTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.UpdateTask"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.UpdateTask.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskId">
            <summary>
            Gets or sets the id of the task
            </summary>
            <value>The task id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.Status">
            <summary>
            Gets or sets the status for the task
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.AssignTo">
            <summary>
            Gets or sets who the task is assigned to
            </summary>
            <value>The assign to.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskSubject">
            <summary>
            Gets or sets the task subject.
            </summary>
            <value>The task subject.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.TaskDescription">
            <summary>
            Gets or sets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.UpdateTask.NotifyByEmail">
            <summary>
            Gets or sets if the assigned to user should be notified by email
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DeleteTask">
            <summary>
            Activity that deletes a <see cref="T:EPiServer.Personalization.Task"/> in EPiServer.
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.DeleteTask.TaskIdProperty">
            <summary>
             Register TaskId property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.DeleteTask.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DeleteTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DeleteTask"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DeleteTask.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.DeleteTask.TaskId">
            <summary>
            Gets or sets the id of the task to be deleted
            </summary>
            <value>The task id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.DeleteTask.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance">
            <summary>
            Activity that deletes all <see cref="T:EPiServer.Personalization.Task"/> related to a workflow instance in EPiServer
            </summary>
            <remarks>Typically used as last activity before a workflow completes to perform cleanup of tasks related to the workflow instance.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance.LogActionProperty">
            <summary>
             Register LogAction property so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance.OnMethodInvoking(System.EventArgs)">
            <summary>
            Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings"></see>. This method is called just before the external method is run.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking"></see> event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.DeleteTasksForInstance.LogAction">
            <summary>
            Gets or sets if this action should be logged to history items for workflow instance
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1">
            <summary>
            The base class which all Task related event activities derives from
            </summary>
            <typeparam name="T">The Task event related activity</typeparam>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileEventBase`1"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="eventName">Name of the event.</param>
            <param name="description">The description.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.AssignedToProperty">
            <summary>
            Registers Path as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.TaskSubjectProperty">
            <summary>
            Registers TaskSubject as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.TaskDescriptionProperty">
            <summary>
            Registers TaskDescription as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.StatusProperty">
            <summary>
            Registers Status as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.PreviousStatusProperty">
            <summary>
            Registers PreviousStatus as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.CacheKeyProperty">
            <summary>
            Registers CacheKey as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.OnInvoked(System.EventArgs)">
            <summary>
            When the event is invoked the databoundable properties are set
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.CacheKey">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
            <remarks>The cached item can be recieved from CacheService using IServiceProvider which can
            be recieved when i.e. overriding Initialize
            </remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.AssignedTo">
            <summary>
            Who the task is assigned to
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.TaskSubject">
            <summary>
            The subject of the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.TaskDescription">
            <summary>
            The description for the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.Status">
            <summary>
            The status of the task
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.TaskEventBase`1.PreviousStatus">
            <summary>
            The previous status for the task
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.TaskStatusChanged">
            <summary>
            Activity that listens for TaskStatusChanged from EPiServer. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnTaskStatusChanged"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowTaskEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.TaskStatusChanged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.TaskStatusChanged"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.TaskDeleted">
            <summary>
            Activity that listens for TaskDeleted from EPiServer. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnTaskDeleted"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowTaskEventArgs
            CacheKey is not set since task is deleted</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.TaskDeleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.TaskDeleted"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1">
            <summary>
            Base class for custom activities that wants to use EventTrackingService to track which
            instances that currently is waiting for a specific event
            </summary>
            <typeparam name="T">activity inherited from HandleExternalActivity</typeparam>
            <example>Shows a sample over how a custom event activity uses this class to register itself with EventTrackingService
            <code source="../CodeSamples/WorkflowFoundation/Activities/CustomComposite.cs" region="CustomCompositeActivity" lang="cs" />
            And this shows how EventTrackingService can be used to query which instances that currently is registered for the event
            <code source="../CodeSamples/WorkflowFoundation/Activities/CustomComposite.cs" region="EventTrackingService" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.CompositePageBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.RegisterEvent(System.Object,System.EventArgs)">
            <summary>
            Register event with EventTrackingService so host knows that this instance waits for event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>It will register name of type InterfaceName.EventName</remarks>
            <example>
            Shows how EventTrackingService can be used to query which instances that currently is registered for the event
            <code source="../CodeSamples/WorkflowFoundation/Activities/CustomComposite.cs" region="EventTrackingService" lang="cs"/>
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.UnregisterEvent(System.Object,System.EventArgs)">
            <summary>
            Unregister event with EventTrackingService
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>Registered name is of type InterfaceName.EventName</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.EventActivity_Invoked(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Handles the Invoked event of the EventActivity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.InvokedEvent">
            <summary>
            invoked event
            </summary>
            <exclude/>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.CompositeCustomBase`1.Invoked">
            <summary>
            Event delegate that is called when event occurs
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.SendEmailActivity">
            <summary>
            Activity that sends an email from a workflow instance.
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.FromProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.ToProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.BodyProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SubjectProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.HtmlBodyProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.CCProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.BccProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.PortProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SmtpHostProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.ReplyToProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SendingEmailEvent">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SentEmailEvent">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.FailedSentEmailEvent">
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.SendEmailActivity"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
            	During execution the SendEmail activity should create and send the email using SMTP.  
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.To">
            <summary>
            The To property is used to specify the receipient's email address.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.Subject">
            <summary>
            The Subject property is used to specify the subject of the Email message."
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.From">
            <summary>
            The From property is used to specify the From (Sender's) address for the email mesage.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.Body">
            <summary>
            The Body property is used to specify the Body of the email message.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.HtmlBody">
            <summary>
            The HTMLBody property is used to specify whether the Body is formatted as HTML (True) or not (False)
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.CC">
            <summary>
            The CC property is used to set the CC recipients for the email message.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.Bcc">
            <summary>
            The Bcc property is used to set the Bcc recipients for the email message.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.ReplyTo">
            <summary>
            The email address that should be used for reply messages.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SmtpHost">
            <summary>
            The SMTP host is the machine running SMTP that will send the email.  The default is 'localhost'
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.Port">
            <summary>
            Specify the Port used for SMTP.  The default is 25.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SendingEmail">
            <summary>
            The SendingEmail event is raised before an email is sent through SMTP.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.SentEmail">
            <summary>
            The SentEmail event is raised after an email is sent through SMTP.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Activities.SendEmailActivity.FailedSentEmail">
            <summary>
            The FailedSentEmail event is raised after an email is not sent.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs">
            <summary>
            Used in communication between host and Workflow activities. Represents an event from <see cref="T:EPiServer.DataFactory"></see>.
            </summary>
            <remarks>The cached item of type <see cref="T:EPiServer.PageEventArgs"/> can be recieved from 
            <see cref="T:EPiServer.WorkflowFoundation.Services.CacheService"></see> using <see cref="T:System.IServiceProvider"></see> 
            (can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs.#ctor(EPiServer.WorkflowFoundation.WorkflowPageEvent,EPiServer.Core.PageReference,EPiServer.Core.PageReference,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="pageLink">The page link that relates to this event</param>
            <param name="targetLink">The target that relates to this event</param>
            <param name="cacheKey">The cache key to the cached <see cref="T:EPiServer.PageEventArgs"/> class</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <remarks>The cached item of type <see cref="T:EPiServer.PageEventArgs"/> can be recieved from
            <see cref="T:EPiServer.WorkflowFoundation.Services.CacheService"></see> using <see cref="T:System.IServiceProvider"></see>
            (can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs.EventType">
            <summary>
            Gets the type of the triggering event.
            </summary>
            <value>The type of the event.</value>
            <remarks>corresponds to page event in <see cref="T:EPiServer.DataFactory"/></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs.CacheKey">
            <summary>
            Gets the cache key, can be used to store a none serializable object.
            </summary>
            <remarks>The cached item of type <see cref="T:EPiServer.PageEventArgs"/> can be recieved from 
            <see cref="T:EPiServer.WorkflowFoundation.Services.CacheService"></see> using <see cref="T:System.IServiceProvider"></see> 
            (can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <value>The cache key.</value>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs.PageLink">
            <summary>
            The id from the PageLink property on the associated <see cref="T:EPiServer.PageEventArgs"/>
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs.TargetLink">
            <summary>
            The id from the TargetLink property on the associated <see cref="T:EPiServer.PageEventArgs"/>
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs">
            <summary>
            Used in communication between host and Workflow activitys. Represents an Task related event. 
            </summary>
            <remarks>The cached item of type <see cref="T:EPiServer.Personalization.Task"/> can be recieved from 
            <see cref="T:EPiServer.WorkflowFoundation.Services.CacheService"></see> using <see cref="T:System.IServiceProvider"></see> 
            (can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.#ctor(EPiServer.Personalization.Task,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <remarks>The cached item of type <see cref="T:EPiServer.Personalization.Task"/> can be recieved from EPiServerService using IServiceProvider(can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.CacheKey">
            <summary>
            Gets the cache key which can be used to get the <see cref="T:EPiServer.Personalization.Task"/> object
            </summary>
            <remarks>The cached item of type <see cref="T:EPiServer.Personalization.Task"/> can be recieved from 
            <see cref="T:EPiServer.WorkflowFoundation.Services.CacheService"></see> using <see cref="T:System.IServiceProvider"></see> 
            (can be recieved e.g. by overriding Initialize on Workflow class).
            </remarks>
            <example>
            Shows how Cache service can be used
            <code source="../CodeSamples/WorkflowFoundation/IServiceProvider/ServiceProvider.cs" region="IServiceProvider" lang="cs"/>
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.TaskId">
            <summary>
            Gets the task id.
            </summary>
            <value>The task id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.AssignedTo">
            <summary>
            Gets user the task is tassigned to
            </summary>
            <value>The assigned to.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.TaskSubject">
            <summary>
            Gets the subject for the task
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.TaskDescription">
            <summary>
            Gets the description for the task
            </summary>
            <value>The description</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.Status">
            <summary>
            Gets the current status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowTaskEventArgs.PreviousStatus">
            <summary>
            Gets the previous status.
            </summary>
            <value>The previous status.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileAdded">
            <summary>
            Activity that listens for FileAdded event from FileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileAdded"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileAdded.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileAdded"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileDeleted">
            <summary>
            Activity that listens for FileDeleted event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileDeleted"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileDeleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileDeleted"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileMoved">
            <summary>
            Activity that listens for FileMoved event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileMoved"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileMoved.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileMoved"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileCopied">
            <summary>
            Activity that listens for FileCopied event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileCopied"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileCopied.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileCopied"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileCheckedIn">
            <summary>
            Activity that listens for FileCheckedIn event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileCheckedIn"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileCheckedIn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.FileCheckedIn"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.FileCheckedOut">
            <summary>
            Activity that listens for FileCheckedOut event from UnifiedFileSystem
             Should not be used diectly, use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileCheckedOut"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowFileEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.FileCheckedOut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.OnFileCheckedOut"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageEventBase`1">
            <summary>
            The base class which all <see cref="T:EPiServer.DataFactory"></see> related event activities derives from
            </summary>
            <typeparam name="T">The DataFactory event related activity</typeparam>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageEventBase`1"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="eventName">Name of the event.</param>
            <param name="description">The description.</param>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.PageLinkProperty">
            <summary>
            Registers PageLink as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.TargetLinkProperty">
            <summary>
            RegistersTargetLink as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.EventTypeProperty">
            <summary>
            EventType as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.CacheKeyProperty">
            <summary>
            Registers CacheKey as a dependency property to make it avilable for databinding
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.OnInvoked(System.EventArgs)">
            <summary>
            When the event is invoked the databoundable properties are set
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.CacheKey">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
            <remarks>The cached item can be recieved from CacheService using IServiceProvider which can
            be recieved when i.e. overriding Initialize
            </remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.PageLink">
            <summary>
            The PageLink for the page that is associated with the <see cref="T:EPiServer.DataFactory"></see> event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.TargetLink">
            <summary>
            The TargetId for the page that is associated with the <see cref="T:EPiServer.DataFactory"></see> event
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.PageEventBase`1.EventType">
            <summary>
            The event type that caused this event
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageCreated">
            <summary>
            Activity that listens for CreatedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageCreated"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageCreated.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageCreated"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageCheckedIn">
            <summary>
            Activity that listens for CheckedInPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageCheckedIn"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageCheckedIn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageCheckedIn"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageDeleted">
            <summary>
            Activity that listens for DeletedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageDeleted"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageDeleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageDeleted"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageLanguageDeleted">
            <summary>
            Activity that listens for DeletedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageLanguageDeleted"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageLanguageDeleted.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageLanguageDeleted"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageMoved">
            <summary>
            Activity that listens for MovedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageMoved"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageMoved.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageMoved"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PagePublished">
            <summary>
            Activity that listens for PublishedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPagePublished"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PagePublished.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PagePublished"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageSaved">
            <summary>
            Activity that listens for SavedPage from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageSaved"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageSaved.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageSaved"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.PageEvent">
            <summary>
            Activity that listens for page events from <see cref="T:EPiServer.DataFactory"></see>. Should not be used directly, 
            use <see cref="T:EPiServer.WorkflowFoundation.Activities.OnPageEvent"/> instead.
            </summary>
            <remarks>When overriding OnInvoke the argument can be casted to WorkflowPageEventArgs</remarks>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.PageEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.PageEvent"/> activity.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs">
            <summary>
            Used in communication between host and Workflow activitys. Represents an File or Directory related event. 
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs.#ctor(EPiServer.WorkflowFoundation.WorkflowFileSystemEvent,System.Boolean,System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="isFile">if set to <c>true</c> [is file].</param>
            <param name="path">The previous path for the File/Directory</param>
            <param name="newPath">The new path for the File/Directory.</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs.EventType">
            <summary>
            Gets the type of the file system related event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs.IsFile">
            <summary>
            Gets a value indicating whether this event is File or Directory related.
            </summary>
            <value><c>true</c> if this instance is file related; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs.VirtualPath">
            <summary>
            Gets the path for the file or directory
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs.NewVirtualPath">
            <summary>
            Gets the new path for the file or directory
            </summary>
            <value>The new path.</value>
            <remarks>This is only meaningful for some events e.g. OnFileMoved</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations">
            <summary>
            Broadcasts updated information to registered listeners through UDP
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler">
            <summary>
            Interface that the component that will act as a Broadcast sender/reciever should implement
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler.Initialize(EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate)">
            <summary>
            Initializes the sender
            </summary>
            <param name="host">The host that should be notified with updates</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler.ReleaseResources">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler.BroadcastMessage(System.Guid,EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation)">
            <summary>
            Is called when a message is to be broadcasted.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="operation">The operation that occured</param>
            <remarks>The id can be either a definition id or a instance id</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations.EPiServer#WorkflowFoundation#Interfaces#IBroadcastHandler#Initialize(EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate)">
            <summary>
            Initializes the sender
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations.EPiServer#WorkflowFoundation#Interfaces#IBroadcastHandler#ReleaseResources">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations.EPiServer#WorkflowFoundation#Interfaces#IBroadcastHandler#BroadcastMessage(System.Guid,EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation)">
            <summary>
            Broadcasts a UDP message
            </summary>
            <param name="id"></param>
            <param name="operation"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations.WorkflowEvent_Raised(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Handles broadcated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:EPiServer.Events.EventNotificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations.IsPackageValid(System.String,System.UInt64)">
            <summary>
            Checks so no package has been lost
            </summary>
            <param name="sender">sender</param>
            <param name="packageNumber">number</param>
            <returns>valid package</returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs">
            <summary>
            This event argument is used with InstanceStartingCancelled event when starting of an instance is cancelled.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs.#ctor(EPiServer.WorkflowFoundation.WorkflowDefinition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs"/> class.
            </summary>
            <param name="definition">The definition that an instance was  to be started of</param>
            <param name="cancelReason">The reason for the cancellation</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs.WorkflowDefinition">
            <summary>
            Gets the workflow definition that an instance was to be created of.
            </summary>
            <value>The workflow definition.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs.CancelReason">
            <summary>
            Gets or sets a message for why the action was cancelled
            </summary>
            <value>The reason why the action was cancelled</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Definitions.WorkflowDeletedEventArgs">
            <summary>
            Event rasied when a <see cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance"/> is removed from storage.
            This happen for example when an instance is comleted or terminated.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Definitions.WorkflowDeletedEventArgs.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Definitions.WorkflowDeletedEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="definitionId">The definition id.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Definitions.WorkflowDeletedEventArgs.WorkflowInstanceId">
            <summary>
            Gets the workflow instance id.
            </summary>
            <value>The workflow instance id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Definitions.WorkflowDeletedEventArgs.WorkflowDefinitionId">
            <summary>
            Gets the workflow definition id.
            </summary>
            <value>The workflow definition id.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent">
            <summary>
            Events corresponding to events from EPiServer, used to be able to let workflows be started automatically when
            event occur. Bitwise so several can be set.
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.None">
            <summary>
            Represents no event
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileAdding">
            <summary>
            Represents the preevent that occurs when a file is added to file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileAdded">
            <summary>
            Represents the event that occurs when a file is added to file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileDeleting">
            <summary>
            Represents the preevent that occurs when a file is deleted from file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileDeleted">
            <summary>
            Represents the event that occurs when a file is deleted from file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileMoving">
            <summary>
            Represents the preevent that occurs when a file is moved in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileMoved">
            <summary>
            Represents the event that occurs when a file is moved in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCopying">
            <summary>
            Represents the preevent that occurs when a file is copied in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCopied">
            <summary>
            Represents the event that occurs when a file is copied in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCheckingOut">
            <summary>
            Represents the preevent that occurs when a file is checked out in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCheckedOut">
            <summary>
            Represents the event that occurs when a file is checked out in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCheckingIn">
            <summary>
            Represents the preevent that occurs when a file is checked in in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.FileCheckedIn">
            <summary>
            Represents the event that occurs when a file is checked in in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryAdding">
            <summary>
            Represents thepre event that occurs when a directory is added to file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryAdded">
            <summary>
            Represents the event that occurs when a directory is added to file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryDeleting">
            <summary>
            Represents the preevent that occurs when a directory is deleted from file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryDeleted">
            <summary>
            Represents the event that occurs when a directory is deleted from file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryMoving">
            <summary>
            Represents the preevent that occurs when a directory is moved in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryMoved">
            <summary>
            Represents the event that occurs when a directory is moved in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryCopying">
            <summary>
            Represents the preevent that occurs when a directory is copied in file system through EPiServer API
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowFileSystemEvent.DirectoryCopied">
            <summary>
            Represents the event that occurs when a directory is copied in file system through EPiServer API
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback">
            <summary>
            Interface used by <see cref="T:EPiServer.WorkflowFoundation.Services.CommunicationService"/> to notify
            about calls from workflow instances through invoke based activities
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.AssociateWithPage(EPiServer.Core.PageReference,System.Boolean,System.Guid)">
            <summary>
            Associates the workflow instance with a EPiServer page. Is triggered by AssociateWithPage activity
            </summary>
            <param name="pageLink">The page link.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
            <remarks>A instance associated with a page will only recieve page related events </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.AddHistoryItem(System.String,System.String,System.String,System.Guid)">
            <summary>
            Adds a history item to an workflow instance. Useful when an workflow instance wants to log something.
            <para>Is triggered by AddHistoryItem activity</para>
            </summary>
            <param name="itemSubject">The item subject.</param>
            <param name="itemDescription">The item description.</param>
            <param name="user">The user.</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.AddUserData(System.String,System.Object,System.Boolean,System.Guid)">
            <summary>
            Adds a serializable custom object to the UserData collection of the workflow instance. Can be used to pass
            data from an workflow instance so it's accessible through host.
            <para>Is triggered by AddUserData activity</para>
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
            <remarks>passed object must be serializable</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.CreateTaskForInstance(System.Guid,System.String,System.String,System.String,System.DateTime,EPiServer.Core.PageReference,System.Boolean,System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Represents the CreateTask activity. Used when Workflow instances will create a task inside EPiServer
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="assignedTo">The assigned to.</param>
            <param name="subject">The subject.</param>
            <param name="description">The description.</param>
            <param name="dueDate">The due date.</param>
            <param name="pageLink">The page link.</param>
            <param name="notifyByEmail">if set to <c>true</c> [notify by email].</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="activityRelated">if set to <c>true</c> [activity related].</param>
            <param name="eventActivityName">Name of the event activity.</param>
            <param name="stateBag">The state bag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.UpdateTask(System.Int32,EPiServer.Personalization.TaskStatus,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Represents the UpdateTask activity. Used when Workflow instances will update a task inside EPiServer
            </summary>
            <param name="taskId">The task id.</param>
            <param name="status">The status.</param>
            <param name="assignTo">The assign to.</param>
            <param name="taskSubject">The task subject.</param>
            <param name="taskDescription">The task description.</param>
            <param name="notifyByEmail">if set to <c>true</c> [notify by email].</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.DeleteTask(System.Int32,System.Boolean,System.Guid)">
            <summary>
            Deletes the task.
            <para>Is triggered by DeleteTask activity</para>
            </summary>
            <param name="taskId">The task id.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback.DeleteTasksForInstance(System.Boolean,System.Guid)">
            <summary>
            Deletes all tasks related to the instance.
            <para>Is triggered by DeleteTasksForInstance activity</para>
            </summary>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.AspNetWorkflowManager">
             <summary>
             Workflow engine to be used within same AppDomain as EPiServer. Main component for workflow host implementation 
             (implements <see cref="T:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager"/>)
             </summary>
             <remarks>
            <para>
            Is used as a singleton object. Singelton instance can be accessed through <see cref="P:EPiServer.WorkflowFoundation.WorkflowSystem.WorkflowManager"></see>
            </para>
            <para>
             To use other host (must implement IWorkflowManager) as engine for workflow system add it as type attribute on workflowHost configuration element in web.config
             </para>
            </remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager">
            <summary>
            Interface a class acting as a Host for Workflow must implement. 
            </summary>
            <remarks>Class implementing this interface and will act as workflow engine must have
            a public parameterless constructor.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.Initialize(System.Boolean)">
            <summary>
            Initializes component, should be called before usage. Here is where services are added to runtime
            </summary>
            <param name="lazyLoading">if set to <c>true</c> lazyLoading should be used. Meaning resources should be loaded when needed</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.StartRuntime">
            <summary>
            Starts the Workflow runtime
            </summary>
            <remarks>This is where event listening from DataFactory and file system is setup</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.StopRuntime">
            <summary>
            Stops the Workflow runtime
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RegisterExternalExchangeDataService(System.Object)">
            <summary>
            Registers custom type with ExternalDataExchangeService
            </summary>
            <param name="externalExchangeDataService">custom service to register</param>
            <remarks>To communicate with custom activities deriving from <see cref="T:System.Workflow.Activities.HandleExternalEventActivity"/> a
            class implementing an interface marked with ExternalDataExchange attribute should be supplied</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RegisterType(System.Type)">
            <summary>
            Registers an external type with the TypeProvider
            </summary>
            <param name="type">the type to register</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.UnregisterType(System.Type)">
            <summary>
            unregisters an external type with the TypeProvider
            </summary>
            <param name="type">the type to unregister</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RegisterService(System.Object)">
            <summary>
            Register the service to the Rutime service collection
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.GetService(System.Type)">
            <summary>
            Gets an registered service, i.e. an custom service registered with ExchangeDataService which custom communication
            with Workflow instance can be performed
            </summary>
            <param name="serviceType">The type of the service</param>
            <returns>The instance of the service loaded in Workflow runtime</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.GetService``1">
            <summary>
            Gets an registered service of specified generic type, i.e. an custom service registered with ExchangeDataService which custom communication
            with Workflow instance can be performed
            </summary>
            <returns>The instance of the service loaded in Workflow runtime</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RemoveService(System.Object)">
            <summary>
            Removes a registered service
            </summary>
            <param name="service">The service to remove</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.GetAllServices(System.Type)">
            <summary>
            Gets all registered service of a certain type (can be registered in web.config) 
            </summary>
            <param name="serviceType">The type of the service</param>
            <returns>The instance of the service loaded in Workflow runtime</returns>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowCompleted">
            <summary>
            Occurrs when a Workflow instance is completed
            </summary>
            <remarks>It is possible to get the corresponding WorkflowDefinitionInstance in this event. 
            It will though not be possible to edit it since it will be removed</remarks>
            <example>Example on how completed event can be used
             <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="Completed" lang="cs" />
             </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowTerminated">
            <summary>
            Occurrs when a Workflow instance is terminated
            </summary>
            <remarks>It is possible to get the corresponding WorkflowDefinitionInstance in this event. 
            It will though not be possible to edit it since it will be deleted</remarks>
            <example>Example on how terminated event can be used to clean up
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="Terminated" lang="cs" />
            </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowStarted">
            <summary>
            Occurrs when a Workflow instance is started
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowAborted">
            <summary>
            Occurrs when a Workflow instance is aborted
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowCreated">
            <summary>
            Occurrs when a Workflow instance is created
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowIdled">
            <summary>
            Occurrs when a Workflow instance is idled
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowLoaded">
            <summary>
            Occurrs when a Workflow instance is loaded
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowUnloaded">
            <summary>
            Occurrs when a Workflow instance is Unloaded
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowPersisted">
            <summary>
            Occurrs when a Workflow instance is peristed
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowResumed">
            <summary>
            Occurrs when a Workflow instance is resumed
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.WorkflowSuspended">
            <summary>
            Occurrs when a Workflow instance is suspended
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RuntimeStarted">
            <summary>
            Occurrs when the Workflow runtime is started
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.RuntimeStopped">
            <summary>
            Occurrs when the Workflow runtime is stopped
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.ServicesExceptionNotHandled">
            <summary>
            Occurrs when a registered service throws an unhandled exception
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.PageRelatedEvent">
            <summary>
            Occurrs when a page related event occurs from DataFactory. Gives chance to 
            cancel event by setting CancelAction to true.
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            </summary>
            <example>Shows how event can be used to start new workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="PageCreated" lang="cs" />
            </example>
            <remarks>CancelAction has not meaning for all events</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.FileSystemRelatedEvent">
            <summary>
            Occurrs when a FileSystem related event occurs from EPiServer file system. 
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            </summary>
            <example>Shows how event can be used to start new workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="FileAdded" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.IsStarted">
            <summary>
            States wether runtime is started
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.DefinitionHandler">
            <summary>
            Gets a handle to the definition handler
            </summary>
            <remarks>That is the component that handles workflow definitions</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager.InstanceHandler">
            <summary>
            Gets a handle to the instance handler
            </summary>
            <remarks>That is the component that handles workflow instances</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate">
            <summary>
            Interface that broadcast listner uses to update data 
            when it recieves update from some other server in loadbalancing scenario.
            The intention is that they share storage
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate.UpdateDefinition(System.Guid)">
            <summary>
            Should update defintion from common storage
            </summary>
            <param name="definitionId">The definition id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate.DeleteDefinition(System.Guid)">
            <summary>
            Definition has been deleted in other host
            </summary>
            <param name="definitionId">The definition id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate.UpdateInstance(System.Guid)">
            <summary>
            Should update the instance from common storage
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate.DeleteInstance(System.Guid)">
            <summary>
            Instance has been deleted (terminated or completed) in other host
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IBroadcastedUpdate.Reload">
            <summary>
            Should reload all definitions and instances from storage
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.AspNetWorkflowManager"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.#ctor(System.Boolean)">
            <summary>
            Do not create an instance of this object, use <see cref="P:EPiServer.WorkflowFoundation.WorkflowSystem.WorkflowManager"/> to get
            the singelton instance instead.
            </summary>
            <remarks>main initialization should be made by call to Initialize method</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReleaseResources">
            <summary>
            Releases the resources such as threads and sockets
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.Dispose(System.Boolean)">
            <summary>
            Disposes the specified only native.
            </summary>
            <param name="onlyNative">if set to <c>true</c> [only native].</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.CurrentDomain_ProcessExit(System.Object,System.EventArgs)">
            <summary>
            To make sure appdomain can unload we release our resources such as threads and sockets
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.CurrentDomain_DomainUnload(System.Object,System.EventArgs)">
            <summary>
            To make sure appdomain can unload we release our resources such as threads and sockets
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.Initialize(System.Boolean)">
            <summary>
            Initializes component, should be called before usage. Here is where internal services are added to runtime
            </summary>
            <param name="lazyLoading">if set to <c>true</c> lazyLoading should be used. Meaning resources should be loaded when needed</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.StartRuntime">
            <summary>
            Starts the Workflow runtime
            <remarks>This is where event listening from DataFactory and EPiServer filesystem is setup</remarks>
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.StopRuntime">
            <summary>
            Stops the Workflow runtime
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RegisterExternalExchangeDataService(System.Object)">
            <summary>
            Registers a custom type with ExternalDataExchangeService
            </summary>
            <param name="externalExchangeDataService">custom service to register</param>
            <remarks>To communicate with custom activities deriving from <see cref="T:System.Workflow.Activities.HandleExternalEventActivity"/> a
            class implementing an interface marked with <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"/> attribute should be supplied</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RegisterType(System.Type)">
            <summary>
            Registers an external type with TypeProvider
            </summary>
            <param name="type">type to register</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.UnregisterType(System.Type)">
            <summary>
            Unregisters an external type from TypeProvider
            </summary>
            <param name="type">the type to unregister</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RegisterService(System.Object)">
            <summary>
            Register a service to the Rutime service collection
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.GetService(System.Type)">
            <summary>
            Gets an registered service, e.g. a custom service registered with ExchangeDataService which custom communication
            with Workflow instance can be performed
            </summary>
            <param name="serviceType">The type of the service</param>
            <returns>The instance of the service loaded in Workflow runtime</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.GetService``1">
            <summary>
            Gets an registered service of specified generic type, i.e. an custom service registered with ExchangeDataService which custom communication
            with Workflow instance can be performed
            </summary>
            <returns>The instance of the service loaded in Workflow runtime</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveService(System.Object)">
            <summary>
            Removes a registered service
            </summary>
            <param name="service">The service to remove</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.GetAllServices(System.Type)">
            <summary>
            Retrieves all the services that have been added to the Workflow runtime engine that implement or derive from a specified Type. 
            </summary>
            <param name="serviceType">service type</param>
            <returns>services</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.GetEventInformation">
            <summary>
            Gets information about which instances that are waiting for which event
            </summary>
            <returns>Dictionary containing eventnames and list of instance ids for each eventname</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.AddCommunicationServiceToRuntime(System.Workflow.Activities.ExternalDataExchangeService)">
            <summary>
            Adds communication service to runtime. 
            </summary>
            <param name="dataService">The ExternalDataExchangeService to add CommunicationService to</param>
            <remarks>
            <para>To get custom class registered with runtime as <see cref="T:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication"/> 
            this method should be overriden</para>
            <para>If other IInstanceHandler implementer than <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> 
            is to be used this method should be overriden</para></remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.CreateInstanceHandler">
             <summary>
             Creates an instance of the component implementing <see cref="T:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler"/>
             </summary>
             <returns><see cref="T:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler"/></returns>
             <remarks>If other IInstanceHandler implementer than 
             <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> is to be used this
             method should be overriden. The default implementaion will look for configuration setting
             <see cref="P:EPiServer.Configuration.WorkflowSettingsElement.WorkflowDelayedLoading"/> to
             see if it should load data from storage at initialization time.
             <para>
             If you override this method and use other IInstanceHandler than default then methods 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadInstances"/>, 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadInstance(System.Guid)"/>,
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveInstance(System.Guid)"/> and 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveInstanceLocally(System.Guid)"/> should also be
             overriden since they use <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/>.
             </para> 
            </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.CreateDefinitionHandler">
             <summary>
             Creates an instance of the component implementing IDefinitionHandler
             </summary>
             <returns>IDefinitionHandler</returns>
             <remarks>If other IDefinitionHandler implementer than 
             <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> is to be used this
             method should be overriden. The default implementaion will look for configuration setting
             <see cref="P:EPiServer.Configuration.WorkflowSettingsElement.WorkflowDelayedLoading"/> to
             see if it should load data from storage at initialization time.
             <para>
             If you override this method and use other IInstanceHandler than default then methods 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadDefinitions"/>, 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadDefinition(System.Guid)"/> and 
             <see cref="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveDefinitionLocally(System.Guid)"/> should also be
             overriden since they use <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/>.
             </para> 
            </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.CreateBroadcastHandler">
             <summary>
             Creates an instance of the component implementing IBroadcastHandler
             </summary>
             <returns>IBroadcastHandler</returns>
             <remarks>If other IBroadcastHandler implementer than 
             <see cref="T:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperations"/> is to be used this
             method should be overriden. That is e.g. if other broadcasting than UDP is to be used
            </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadDefinitions">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> to reload definitions
            from storage
            </summary>
            <remarks>If other IDefinitionHandler implementer than 
            <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadDefinition(System.Guid)">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> to reload a definition
            from storage
            </summary>
            <param name="definitionId">The definition id.</param>
            <remarks>If other IDefinitionHandler implementer than
            <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveDefinitionLocally(System.Guid)">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> to remove a definition
            locally (that is no message is broadcasted)
            </summary>
            <param name="definitionId">The definition id.</param>
            <remarks>If other IDefinitionHandler implementer than
            <see cref="T:EPiServer.WorkflowFoundation.DefinitionHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadInstances">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> to reload instances from storage
            </summary>
            <remarks>If other IInstanceHandler implementer than 
            <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ReloadInstance(System.Guid)">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> to reload an instance from storage
            </summary>
            <param name="instanceId">The instance id.</param>
            <remarks>If other IInstanceHandler implementer than
            <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveInstance(System.Guid)">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> to remove instance both
            in memory and storage (if broadcast is used this should be broadcasted)
            </summary>
            <param name="instanceId">The instance id.</param>
            <remarks>If other IInstanceHandler implementer than
            <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveInstanceLocally(System.Guid)">
            <summary>
            Calls <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> to remove instance
            locally (that is no broadcast message is sent)
            </summary>
            <remarks>If other IInstanceHandler implementer than 
            <see cref="T:EPiServer.WorkflowFoundation.InstanceHandler"/> is to be used this
            method should be overriden</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RemoveInstanceFromQueues(System.Guid)">
            <summary>
            It would have been nice if each activity could cleanup its own event registration (since it knows
            which event it is registered for). This is unfortuantely not possible since an activity gets no chance 
            to react upon termination. Therefore cleanup is done in Terminated event but at this case we have now
            idea which event the instance had registered for. Therefore we call unregister on each event...
            In future versions if it is possible for a activity to react upon termination, clean up should
            be moved to activity
            </summary>
            <param name="instanceId"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.communicationService_FileSystemRelatedEvent(System.Object,EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs)">
            <summary>
            event raised from Communication service
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.communicationService_PageRelatedEvent(System.Object,EPiServer.WorkflowFoundation.PageRelatedEventArgs)">
            <summary>
            event raised from Communication service
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager._runtime_WorkflowCompleted(System.Object,System.Workflow.Runtime.WorkflowCompletedEventArgs)">
            <summary>
            workflow completed event handling
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager._runtime_WorkflowTerminated(System.Object,System.Workflow.Runtime.WorkflowTerminatedEventArgs)">
            <summary>
            Handles the WorkflowTerminated event from the runtime
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Workflow.Runtime.WorkflowTerminatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.EPiServer#WorkflowFoundation#Interfaces#IBroadcastedUpdate#UpdateDefinition(System.Guid)">
            <summary>
            Updates the definition.
            </summary>
            <param name="definitionId">The definition id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.EPiServer#WorkflowFoundation#Interfaces#IBroadcastedUpdate#DeleteDefinition(System.Guid)">
            <summary>
            Deletes the definition.
            </summary>
            <param name="definitionId">The definition id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.EPiServer#WorkflowFoundation#Interfaces#IBroadcastedUpdate#UpdateInstance(System.Guid)">
            <summary>
            Updates the instance.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.EPiServer#WorkflowFoundation#Interfaces#IBroadcastedUpdate#DeleteInstance(System.Guid)">
            <summary>
            Deletes the instance.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.AspNetWorkflowManager.EPiServer#WorkflowFoundation#Interfaces#IBroadcastedUpdate#Reload">
            <summary>
            Reload data.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowCompleted">
            <summary>
            Occurrs when a Workflow instance is completed
            </summary>
             <remarks>It is possible to get the corresponding WorkflowDefinitionInstance in this event. 
            It will though not be possible to edit it since it will be removed</remarks>
            <example>Example on how completed event can be used
             <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="Completed" lang="cs" />
             </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowTerminated">
            <summary>
            Occurrs when a Workflow instance is terminated
            </summary>
            <remarks>It is possible to get the corresponding WorkflowDefinitionInstance in this event. 
            It will though not be possible to edit it since it will be deleted</remarks>
            <example>Example on how terminated event can be used to clean up
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="Terminated" lang="cs" />
            </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowStarted">
            <summary>
            Occurrs when a Workflow instance is started
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RuntimeStarted">
            <summary>
            Occurrs when the Workflow runtime is started
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.RuntimeStopped">
            <summary>
            Occurrs when the Workflow runtime is stopped
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.ServicesExceptionNotHandled">
            <summary>
            Occurrs when a registered service throws an unhandled exception
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowAborted">
            <summary>
            Occurrs when a Workflow instance is aborted
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowCreated">
            <summary>
            Occurrs when a Workflow instance is created
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowIdled">
            <summary>
            Occurrs when a Workflow instance is idled
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowLoaded">
            <summary>
            Occurrs when a Workflow instance is loaded
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowUnloaded">
            <summary>
            Occurrs when a Workflow instance is Unloaded
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowPersisted">
            <summary>
            Occurrs when a Workflow instance is peristed
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowResumed">
            <summary>
            Occurrs when a Workflow instance is resumed
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.WorkflowSuspended">
            <summary>
            Occurrs when a Workflow instance is suspended
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.PageRelatedEvent">
            <summary>
            Occurrs when a page related event occurs from DataFactory. Gives chance to 
            cancel event by setting CancelAction to true.
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            <remarks>CancelAction has not meaning for all events</remarks>
            </summary>
            <example>Shows how event can be used to start new workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="PageCreated" lang="cs" />
            </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.AspNetWorkflowManager.FileSystemRelatedEvent">
            <summary>
            Occurrs when a FileSystem related event occurs from EPiServer file system.
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            </summary>
            <example>Shows how event can be used to start new workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="FileAdded" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.HasPersistenceService">
            <summary>
            Indicates if persistance service is registered
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.InternalDefinitionHandler">
            <summary>
            Gets Definition handler
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.InternalInstanceHandler">
            <summary>
            Gets Instance handler
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.StorageProvider">
            <summary>
            Gets storage provider
            </summary>
            <remarks>Override if custom storage is to be used</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.BroadcastHandler">
            <summary>
            Gets the component that is used to broadcast messages
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.IsStarted">
            <summary>
            States wether runtime is started
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.DefinitionHandler">
            <summary>
            Gets a handle to the definition handler
            </summary>
            <remarks>That is the component that handles workflow definitions</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.InstanceHandler">
            <summary>
            Gets a handle to the instance handler
            </summary>
            <remarks>That is the component that handles workflow instances</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.UI.ActivityPlugInAttribute">
            <summary>
            External event activities that needs input from an user through an UI when clicking on 
            a task should be marked with this attribute and have Url to usercontrol specified.
            It is possible to specify a usercontrol for a task by setting property 
            <see cref="P:EPiServer.WorkflowFoundation.Activities.CreateTask.AssociatedActivity"/>
            to a activity with this attribute.
            The given usercontrol should implement <see cref="T:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl"/>
            </summary>
            <remarks>The usercontrol should be deployed to given Url before workflow is used.</remarks>
            <example>Shows how attribute can be set on custom activity
            <code source="../CodeSamples/WorkflowFoundation/Attributes/ActivityPlugin.cs" region="ActivityPlugIn" lang="cs"/>
            </example>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.UI.WorkflowPlugInAttribute">
             <summary>
             A workflow that want users to be able to set start parameters before it is used should be marked with this attribute
             and have Url set to a usercontrol. The given usercontrol should implement 
             <see cref="T:EPiServer.WorkflowFoundation.UI.IWorkflowStartParameterHandler"/>
             </summary>
             <remarks>The usercontrol should be deployed to given Url before workflow is used</remarks>
            <example>Shows how attribute can be applied to workflow class to state usercontrol to set start parameters
            <code source="../CodeSamples/WorkflowFoundation/Attributes/WorkflowPlugin.cs" region="WorkflowPlugIn" lang="cs"/>
            </example> 
        </member>
        <member name="T:EPiServer.WorkflowFoundation.UI.WorkflowTaskAttribute">
             <summary>
             Internally used attribute to register container control that will host all other
             workflow task related usercontrols.
             </summary>
            <exclude/>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation">
            <summary>
            The different possible types of broadcasted messages
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation.UpdateDefinition">
            <summary>
            Occurs when a definition is updated
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation.DeleteDefinition">
            <summary>
            Occurs when a definition is deleted
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation.UpdateInstance">
            <summary>
            Occurs when a instance is updated
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Broadcast.BroadcastOperation.DeleteInstance">
            <summary>
            Occurs when a instance is deleted
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.EPiServerRelatedEventArgs">
            <summary>
            Base class for Episerver related event within workflow environment.
            It is possible to start workflow instances and pass in start arguments to
            those instances by setting properties on this class
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.EPiServerRelatedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.EPiServerRelatedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.EPiServerRelatedEventArgs.NamedArgsValue">
            <summary>
            If Definition is set this makes it possible to set start parameters 
            that will be passed to the created instance
            </summary>
            <value>The named args value.</value>
            <remarks>Passed object should be serializable</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.EPiServerRelatedEventArgs.DefinitionId">
            <summary>
            States which definition to create an instance of
            </summary>
            <value>The id of the definition to start an instance of</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs">
            <summary>
            Contains information about an FileSystem related event. It is possible to start workflow instances and pass in start arguments to
            those instances by setting properties on this class
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs.#ctor(EPiServer.WorkflowFoundation.WorkflowFileSystemEvent,EPiServer.Web.Hosting.UnifiedVirtualPathEventArgs,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs"/> class.
            </summary>
            <param name="fileSystemEvent">The file system event.</param>
            <param name="fileArgs">The <see cref="T:EPiServer.Web.Hosting.UnifiedVirtualPathEventArgs"/> instance containing the event data.</param>
            <param name="isFile">if set to <c>true</c> the event is related to a file.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs.UnifiedVirtualPathEventArgs">
            <summary>
            Gets the file system related event arguments.
            </summary>
            <value>The event value.</value>
            <remarks>Action can be cancelled by setting Cancel=true (not all event is possible to cancel)</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs.FileSystemEventType">
            <summary>
            Gets the file system related event type.
            </summary>
            <value>The event value.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs.IsFile">
            <summary>
            States if this event is file related
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Resources.ExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.definitionMustBeSet">
            <summary>
              Looks up a localized string similar to Workflow definition must be valid.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.definitionNotFound">
            <summary>
              Looks up a localized string similar to Definition {0} not found.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.definitionNotFoundInObjectStore">
            <summary>
              Looks up a localized string similar to Definition with id {0} not found in object store.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.emptyXoml">
            <summary>
              Looks up a localized string similar to xoml cannot be empty.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.extenalActivityEventName">
            <summary>
              Looks up a localized string similar to Cannot set EventName on a derived HandleExternalEventActivity..
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.externalActivityInterface">
            <summary>
              Looks up a localized string similar to Cannot set InterfaceType on a derived HandleExternalEventActivity..
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.failedCreateInstance">
            <summary>
              Looks up a localized string similar to Failed to create Workflow of type {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.instanceMustBeSet">
            <summary>
              Looks up a localized string similar to Instance must be set.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.instanceNotFound">
            <summary>
              Looks up a localized string similar to Workflow instance with id {0} not found.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.instanceNotFoundInObjectStore">
            <summary>
              Looks up a localized string similar to Instance with id {0} not found in object store.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.instanceStartingCancelled">
            <summary>
              Looks up a localized string similar to Starting of instance was cancelled by event handler to InstanceStarting, reason: {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.itemNotFoundInObjectStore">
            <summary>
              Looks up a localized string similar to item with id {0} not found in object store.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.methodNotSupported">
            <summary>
              Looks up a localized string similar to Method not supported.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.missingAssignedTo">
            <summary>
              Looks up a localized string similar to AssignedTo must be set.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.missingTaskSubject">
            <summary>
              Looks up a localized string similar to Subject must be set.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.multipleName">
            <summary>
              Looks up a localized string similar to There is already a definition with name {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.nameInvalidLength">
            <summary>
              Looks up a localized string similar to Name cannot be more than {0} characters.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.nameMustBeSet">
            <summary>
              Looks up a localized string similar to Name must be set.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.notValidUser">
            <summary>
              Looks up a localized string similar to User/Group {0} not found in EpiServer.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.referenceNotFound">
            <summary>
              Looks up a localized string similar to File {0} not exist .
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.runningInstancesDelete">
            <summary>
              Looks up a localized string similar to Cant delete definition since there are running instances of definition.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.runningInstancesModify">
            <summary>
              Looks up a localized string similar to Cant modify definition since there are running instances of definition.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.runtimeNotStarted">
            <summary>
              Looks up a localized string similar to Workflow runtime is not started, add entry to httpModule section.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.typeMustBeSet">
            <summary>
              Looks up a localized string similar to type must be set.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.workerThreadException">
            <summary>
              Looks up a localized string similar to 21.5.6 Unexpected exception in worker thread.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.xomlCompilationFailed">
            <summary>
              Looks up a localized string similar to Compilation failed, use overloaded method with Errors collection to get more detailed information.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.ExceptionStrings.xomTypeSet">
            <summary>
              Looks up a localized string similar to Type for xoml based definitions cant be set since type is compiled by runtime.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Resources.LogDebugStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.broadcastMessageRecevied">
            <summary>
              Looks up a localized string similar to 21.7.8 Message received: {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.broadcastMessageSent">
            <summary>
              Looks up a localized string similar to 21.7.7 Sent message: {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.broadcastThreadStarted">
            <summary>
              Looks up a localized string similar to 21.7.2 Broadcast thread started.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.customServiceRegistered">
            <summary>
              Looks up a localized string similar to 21.2.16 Custom service {0} registered.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventDispatcherThread">
            <summary>
              Looks up a localized string similar to 21.5.5 Event dispatcher thread started.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventListeningRegistered">
            <summary>
              Looks up a localized string similar to 21.6.1 instance {0} registered for event {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventListeningStarted">
            <summary>
              Looks up a localized string similar to 21.5.4 Event listening started.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventListeningStopped">
            <summary>
              Looks up a localized string similar to 21.5.8 Event listening stopped.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventListeningUnregistered">
            <summary>
              Looks up a localized string similar to 21.6.2 instance {0} unregistered for event {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.eventSentToInstance">
            <summary>
              Looks up a localized string similar to 21.5.1 Sent event {0} to instance {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.instanceLoaded">
            <summary>
              Looks up a localized string similar to 21.2.7 Workflow {0} loaded.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.instancePersisted">
            <summary>
              Looks up a localized string similar to 21.2.8 Workflow {0} persisted.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.instanceStartFromEvent">
            <summary>
              Looks up a localized string similar to 21.5.7 Instance of definition {0} started from event {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.instanceUnloaded">
            <summary>
              Looks up a localized string similar to 21.2.9 Workflow {0} unloaded.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.managerCleanup">
            <summary>
              Looks up a localized string similar to 21.2.1 Workflow manager is cleaning up.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.managerInitialized">
            <summary>
              Looks up a localized string similar to 21.2.15 Workflow manager is initialized.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogDebugStrings.saveInstance">
            <summary>
              Looks up a localized string similar to 21.4.5 SaveInstance called for instance {0}.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Resources.LogInfoStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.binaryRemovedFromDisk">
            <summary>
              Looks up a localized string similar to 21.3.5 Unused binary {0} was removed from disk.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.compiledRegistered">
            <summary>
              Looks up a localized string similar to 21.3.2 Compiled Workflow {0} registered.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.definitionDeleted">
            <summary>
              Looks up a localized string similar to 21.3.4 Definition {0} of type {1} deleted.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.definitionsLoaded">
            <summary>
              Looks up a localized string similar to 21.3.1 Definitions loaded from storage, count: {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.failedToDeleteFile">
            <summary>
              Looks up a localized string similar to 21.3.6 Failed to delete file {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceAborted">
            <summary>
              Looks up a localized string similar to 21.2.11 Workflow {0} aborted.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceCompleted">
            <summary>
              Looks up a localized string similar to 21.2.14 Workflow {0} completed.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instancesLoaded">
            <summary>
              Looks up a localized string similar to 21.4.1 Instances loaded from storage, count: {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceStarted">
            <summary>
              Looks up a localized string similar to 21.2.10 Workflow {0} started.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceStarting">
            <summary>
              Looks up a localized string similar to 21.4.3 Instance {0} of definition {1} is starting.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceStartingCancelled">
            <summary>
              Looks up a localized string similar to 21.4.10 Start of an instance of {0} cancelled, reason: {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.instanceTerminated">
            <summary>
              Looks up a localized string similar to Workflow {0} terminated.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.runtimeInitiated">
            <summary>
              Looks up a localized string similar to 21.1.1 Workflow runtime initiated.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.runtimeStarted">
            <summary>
              Looks up a localized string similar to 21.2.4 WorkflowRuntime Started.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.runtimeStopped">
            <summary>
              Looks up a localized string similar to 21.2.5 WorkflowRuntime Stopped.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.taskCreated">
            <summary>
              Looks up a localized string similar to 21.4.6 Task {0} created for instance {1}, assigned to {2}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.taskDeleted">
            <summary>
              Looks up a localized string similar to 21.4.8 Task {0} deleted for instance {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.tasksDeleted">
            <summary>
              Looks up a localized string similar to 21.4.9 All tasks (count: {0}) deleted for instance {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.taskUpdated">
            <summary>
              Looks up a localized string similar to 21.4.7 Task {0} updated for instance {1}, assigned to {2}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogInfoStrings.xomlRegistered">
            <summary>
              Looks up a localized string similar to 21.3.3 Xoml Workflow {0} registered.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.BroadcastListenerArgumentException">
            <summary>
              Looks up a localized string similar to 21.7.5 Argument Exception in Broadcast listener, message {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.BroadcastListenerObjectDisposedException">
            <summary>
              Looks up a localized string similar to 21.7.4 ObjectDisposedException in Broadcast listener.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.BroadcastListenerSocketException">
            <summary>
              Looks up a localized string similar to 21.7.3 SocketException in Broadcast listener.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.definitionNotFoundInStorage">
            <summary>
              Looks up a localized string similar to 21.3.7 Definition with id {0} not found in Storage.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.eventDeliveredFailure">
            <summary>
              Looks up a localized string similar to 21.5.2 Delivery of event {0} failed to instance {1}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.initializationFailed">
            <summary>
              Looks up a localized string similar to 21.2.3 Initialization failed.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.instanceNotFoundInPersitence">
            <summary>
              Looks up a localized string similar to 21.4.4 Workflow {0} not found in persistence service, removed from storage.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.instanceNotFoundInStorage">
            <summary>
              Looks up a localized string similar to 21.4.11 Workflow {0} not found in storage.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.receivedWrongPackageNumber">
            <summary>
              Looks up a localized string similar to 21.7.1 Received none matching package number from {0}, expected {1} received {2}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.releaseResourcesFailed">
            <summary>
              Looks up a localized string similar to 21.2.2 Exception when releasing resources.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.servicesException">
            <summary>
              Looks up a localized string similar to 21.2.6 ServicesException Not handled.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.smtpSendFailed">
            <summary>
              Looks up a localized string similar to 21.4.12 Failed to send a mail with a task message..
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.unknownBroadcastMessage">
            <summary>
              Looks up a localized string similar to 21.7.6 Unknown message received {0}.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Resources.LogErrorsStrings.unsyncronizedEventStore">
            <summary>
              Looks up a localized string similar to 21.5.3 Instance {0} not found in runtime.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.IInitializableService">
            <summary>
            If implemented by service, then called during initialization.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.IInitializableService.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem">
            <summary>
            Object used to store information about waiting events in object store
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem"/> class.
            </summary>
            <param name="eventActivityName">Name of the event activity.</param>
            <param name="eventActivityId">The event activity id.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem.Name">
            <summary>
            The event activity name
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StorageProviders.EventQueueItem.Instances">
            <summary>
            The instances waiting for given event name
            </summary>
            <value>The instances.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StorageProviders.FixedEventIdentities">
            <summary>
            holds information about all episerver related events and identities event queues will have in Object store
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.UI.IWorkflowStartParameterHandler">
             <summary>
             Interface that usercontrols that are registered through use of  attribute WorkflowPlugIn should implement. 
             These controls are used to set StartParameters for a workflow definition that will be passed
             to instance when it is created.
             </summary>
             <example>Shows a sample implementation of interface 
            <code source="../CodeSamples/WorkflowFoundation/usercontrols/StartControl.ascx.cs" region="IWorkflowStartParameterHandler" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.UI.IWorkflowStartParameterHandler.LoadStartParameters(System.Guid,EPiServer.Core.PageReference,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Will be called at startup to set previous saved values. 
            </summary>
            <param name="definitionId">The definition id of the selected definition</param>
            <param name="pageLink">The current page displayed, will be PageReferece.Empty in admin mode, that is when definitionMode is true</param>
            <param name="definitionMode">set to true if control is loaded to predefine params, that is in admin mode. 
            else if control is loaded when a user is about to create a workflow instance value is false</param>
            <param name="parameters">StartParameters</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.UI.IWorkflowStartParameterHandler.SaveStartParameters">
            <summary>
            Will be called after user clicked Save/Start to get the values from the loaded control.
            </summary>
            <returns>StartParameters</returns>
            <remarks>Before SaveStartParameters are called Page.IsValid() is called so any custom validators will have chance to validate input
            <para>If PageArgs (of type WorkflowPageEventArgs) are not set but exposed by workflow runtime will set it automatically</para>
            </remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl">
            <summary>
            Interface that usercontrols associated with a task should implement. The control can e.g. communicate with a custom
            event activity. 
            </summary>
            <remarks>To communicate with a custom event activtiy a custom service
            should have been registered with ExternalDataExchangeService in workflow runtime.
            This can be done in web.config (under section externalServices) or through API</remarks>
            <example>Shows a sample implementation of interface
            <code source="../CodeSamples/WorkflowFoundation/usercontrols/TaskControl.ascx.cs" region="IWorkflowTaskControl" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl.ContextData(System.Guid,System.Int32,System.String,EPiServer.Core.PageReference)">
            <summary>
            Will be called at startup of the control to sets the context for the task.
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="taskId">The task id.</param>
            <param name="eventQualifiedName">The Qualified name of the event activity that specified usercontrol</param>
            <param name="pageLink">The page that is currently loaded in beside action window</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl.InvokeEvent(System.Guid,System.Int32,System.String)">
            <summary>
            Method that is called when user clicks "Send" button. Can e.g. be used to invoke event on custom service
            </summary>
            <param name="workflowInstanceId">workflow instance</param>
            <param name="taskId">id of related task</param>
            <param name="eventQualifiedName">The Qualified name of the event activity that specified usercontrol</param>
            <returns>
            true if task should be deleted, else false
            </returns>
            <remarks>Before InvokeEvent are called Page.IsValid() is called so any custom validators will have chance to validate input.
            Since other actions might cause validation as well, validators might get called several times.
            </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl.PageHasChanged(EPiServer.Core.PageReference,EPiServer.Core.PageReference)">
            <summary>
            If the page loaded beside Task (that is in edit panel/mode) has changed since the control was loaded then 
            this method is called before InvokeEvent is called (it is called before Page.Validate as well). This means 
            the user has done some browsing in edit panel, e.g. may have shifted a page version.
            </summary>
            <param name="previousPageLink">The previous page link.</param>
            <param name="newPageLink">The currently loaded page version loaded</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.UI.IWorkflowTaskControl.InvokeButtonText">
            <summary>
            Gets the text the invoke button should have. 
            If null or string.Empty is returned, default text "Send" (language dependent) is used
            </summary>
            <value>The invoke button text.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WebControls.InstanceDeletedArgs">
            <summary>
            Class used by WorkflowDefinitionInstanceDataSource to signal when an instance is deleted
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.InstanceDeletedArgs.InstanceId">
            <summary>
            Gets the instance id.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource">
            <summary>
            DataSource control for WorkflowDefinition
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.Delete(System.Collections.IDictionary)">
            <summary>
            Deletes the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.DeleteItem(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Deletes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.IsValid(EPiServer.WorkflowFoundation.WorkflowDefinition,System.String@)">
            <summary>
            Determines whether the specified item is valid.
            </summary>
            <param name="item">The item.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if the specified item is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.LoadItem(System.Guid)">
            <summary>
            Loads the workflow defintion
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.ListItems">
            <summary>
            Lists the workflow definitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.CreateItem(System.Collections.Generic.List{EPiServer.WorkflowFoundation.WorkflowDefinition})">
            <summary>
            Creates the item. Not implemented
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.SaveItem(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Saves the item. Not implemented
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.KeyName">
            <summary>
            Gets the KeyName for this control
            </summary>
            <value>DefinitionId</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.CanInsert">
            <summary>
            Gets a value indicating whether this instance can insert.
            </summary>
            <value>
            	false
            </value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.CanUpdate">
            <summary>
            Gets a value indicating whether this instance can update.
            </summary>
            <value>
            	false
            </value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.DefinitionId">
            <summary>
            Gets or sets if the data source control should load a specific instance
            </summary>
            <value>The definition id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionDataSource.DefinitionName">
            <summary>
            Gets or sets if the data source control should load a specific instance
            </summary>
            <value>The name of the definition.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource">
            <summary>
            DataSource control for WorkflowDefinitionInstance
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.InstanceDeleted">
            <summary>
            Fired when an instance is deleted
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.CountChanged">
            <summary>
            Fired when count of fetched data changes
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.IsValid(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance,System.String@)">
            <summary>
            Determines whether the specified item is valid.
            </summary>
            <param name="item">The item.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if the specified item is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.LoadItem(System.Guid)">
            <summary>
            Loads the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.Delete(System.Collections.IDictionary)">
            <summary>
            Deletes the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.DeleteItem(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Deletes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.ListItems">
            <summary>
            Lists the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.CreateItem(System.Collections.Generic.List{EPiServer.WorkflowFoundation.WorkflowDefinitionInstance})">
            <summary>
            Creates the item. Not implemented
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.SaveItem(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Saves the item. Not implemented
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.ListLoadedItems">
            <summary>
            Lists the loaded items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
            <value>InstanceId</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.CanInsert">
            <summary>
            Gets a value indicating whether this instance can insert.
            </summary>
            <value>
            	false
            </value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.CanUpdate">
            <summary>
            Gets a value indicating whether this instance can update.
            </summary>
            <value>
            	false
            </value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.PageLink">
            <summary>
            Gets or sets the page link if instances for a specific page is wanted
            </summary>
            <value>The page link.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.InstanceId">
            <summary>
            Gets or sets the instance id if a specific instance is wanted
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.WorkflowDefinitionId">
            <summary>
            Gets or sets the workflow definition id if instances for a specific definition is wanted
            </summary>
            <value>The workflow definition id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.WorkflowTypeFullName">
            <summary>
            Gets or sets the full name of the workflow type if instances for a specific compiled type is wanted
            </summary>
            <value>The full name of the workflow type.</value>
            <remarks>Should be the fully qualified name including assembly</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.RequiredAccess">
            <summary>
            Gets or sets the required access to use when listing instances
            </summary>
            <value>The required access.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WebControls.WorkflowDefinitionInstanceDataSource.Count">
            <summary>
            Gets the number of items fetched
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowCompiler">
            <summary>
            Compiles xoml based Workflows
            </summary>
            <remarks>Before xoml based workflows can be registered the account aspnet is running as
            must have read/write accessto the BinDirectory specified</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowCompiler.DllPrefix">
            <summary>
            Prefix for all generated xoml assemblies. Value is "Workflow"
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.CompileWorkflow(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Compiles a Workflow to assembly from xoml, rules and cs
            </summary>
            <param name="assemblyName">name of the compiled assembly</param>
            <param name="xoml">xoml</param>
            <param name="rules">rules</param>
            <param name="cs">cs</param>
            <param name="errors">The errors from compilation</param>
            <returns>Compiled type</returns>
            <remarks>The compiled assembly will be created in directory specified by BinDirectory so it can be loaded by runtime</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.TestCompileWorkflow(System.String,System.String,System.String,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Test compiles a Workflow
            </summary>
            <param name="xoml">xoml</param>
            <param name="rules">rules</param>
            <param name="cs">cs</param>
            <param name="errors">compilation errors</param>
            <returns>compilation success</returns>
            <remarks>Makes an in-memory compilation of the workflow</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.Compile(System.String,System.String,System.String,System.String,System.Boolean,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Compiles xoml based Workflow
            </summary>
            <param name="assemblyName">name of the compiled assembly</param>
            <param name="xoml">xoml</param>
            <param name="rules">rules</param>
            <param name="cs">cs</param>
            <param name="inMemory">indicates if compilation should occur in memory</param>
            <param name="errors">errors from compilation</param>
            <returns>Compiled assembly location</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.DeleteFiles(System.Collections.Generic.IList{System.String})">
            <summary>
            Deletes files in passed list, typically tempfiles
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.GetNameSpaceAndClass(System.String)">
            <summary>
            Parse Namespace and class (if exist) from xoml. Xoml looks like 
            &lt;SequentialWorkflowActivity x:Class="Namespace.class"...
            </summary>
            <param name="xoml">xoml input</param>
            <returns>In example "Namespace.class"</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowCompiler.WriteFile(System.String,System.String,System.String)">
            <summary>
            Writes the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileExtension">The file extension.</param>
            <param name="fileContent">Content of the file.</param>
            <returns>written filepath</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowCompiler.BinDirectory">
            <summary>
            Directory where compiled assemblies for xoml based workflows is placed.
            Default is siteroot/workflowfoundation/bin
            </summary>
            <value>The bin directory for xoml based workflows</value>
            <remarks>The reason to not put them in bin directory for site is to avoid to get AppDomain reloaded</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.DefinitionHandler">
            <summary>
            Implementation of <see cref="T:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler"/>. Handles workflow definitions
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler">
            <summary>
            Specifies methods etc. regarding definition handling
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisterDefinition(System.String,System.String,System.Type)">
            <summary>
            Registers a compiled Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">A descrition of the definition</param>
            <param name="compiledType">The Workflow type to register</param>
            <returns>definition</returns>
            <remarks>The compiled type must be a workflow</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisterDefinition(System.String,System.String,System.Type,EPiServer.Security.AccessControlList)">
            <summary>
            Registers a compiled Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">A descrition of the definition</param>
            <param name="compiledType">The Workflow type to register</param>
            <param name="acl">The acl.</param>
            <returns>definition</returns>
            <remarks>The compiled type must be a workflow</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisterXomlDefinition(System.String,System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Registers a xoml based Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">The description of the definition</param>
            <param name="xoml">The xoml to register</param>
            <param name="cs">C# based code beside associated with xoml (if any)</param>
            <param name="rules">Rules associated with xoml (if any)</param>
            <param name="errors">errors/warnings from compilation</param>
            <returns>registered definition</returns>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisterXomlDefinition(System.String,System.String,System.String,System.String,System.String,EPiServer.Security.AccessControlList,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Registers a xoml based Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">The description of the definition</param>
            <param name="xoml">The xoml to register</param>
            <param name="cs">C# based code beside associated with xoml (if any)</param>
            <param name="rules">Rules associated with xoml (if any)</param>
            <param name="acl">The acl for the definition</param>
            <param name="errors">errors/warnings from compilation</param>
            <returns>registered definition</returns>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
             <summary>
             Saves the workflow definition.
             </summary>
             <param name="definition">The definition to save.</param>
             <remarks>If xoml based is used the overloaded method with error collection is recommended,
             since it gives more detail if compilation fails.</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.CompiledWorkflowDefinition)">
             <summary>
             Saves the compiled workflow definition.
             </summary>
             <param name="definition">The definition to save.</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.XomlWorkflowDefinition,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Saves the xoml based workflow definition.
            </summary>
            <param name="definition">The definition to save.</param>
            <param name="errors">compilation output</param>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.DeleteDefinition(System.Guid)">
            <summary>
            Removes a defintion from runtime
            </summary>
            <param name="definitionId">The id of the definition that is to be deleted</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found or running instances</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.DeleteDefinition(System.String)">
            <summary>
            Removes a defintion from runtime
            </summary>
            <param name="definitionName">Name of the definition that is to be deleted</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found or running instances</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.ContainsDefinition(System.Guid)">
            <summary>
            Indicates wetter there exists an definition with this id
            </summary>
            <param name="definitionId">definition id</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.ContainsDefinition(System.String)">
            <summary>
            Indicates wetter there exists an definition with this name
            </summary>
            <param name="definitionName">Name of the definition to check for</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.TryGetDefinition(System.Guid,EPiServer.WorkflowFoundation.WorkflowDefinition@)">
            <summary>
            Tries to get a defintion with given guid.
            </summary>
            <param name="definitionId">The id of the definition to get</param>
            <param name="definition">The definition with the given id</param>
            <returns>True if definition exists else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.TryGetDefinition(System.String,EPiServer.WorkflowFoundation.WorkflowDefinition@)">
            <summary>
            Tries to get a defintion with given name.
            </summary>
            <param name="definitionName">The name of the definition to get</param>
            <param name="definition">The definition with the given name</param>
            <returns>True if definition exists else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisterDependencyPath(System.String)">
            <summary>
            If custom activities has external dependencies they must be registered so activity can be
            compiled and loaded. Can also be registered in web.config under references configuration setting
            </summary>
            <param name="path">The path to referenced assembly</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.GetDefinition(System.String)">
            <summary>
            Returns the Workflow definition with specified name
            </summary>
            <param name="definitionName">unique name of definition</param>
            <returns>workflow definition</returns>
            <remarks>returns null if definition not exist</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.GetDefinition(System.Guid)">
            <summary>
            Returns the Workflow definition with specified id
            </summary>
            <param name="definitionId">unique id of definition</param>
            <returns>workflow definition</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.GetDefinitions">
            <summary>
            Gets all registered Workflow definitions
            </summary>
            <returns>A list of all registered workflow definitions</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RemoveUnusedAssemblies">
            <summary>
            It might not be possible to remove an assembly from disk when xoml based definition is removed/updated due to 
            the fact that it might have been loaded in AppDomain. A call to this method will try to delete unused assemblies
            from disk.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Interfaces.IDefinitionHandler.RegisteredDependencyPaths">
            <summary>
            Returns paths to all registered custom dependencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.#ctor(EPiServer.WorkflowFoundation.Interfaces.IStorageProvider,EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler)">
            <summary>
            Do not create an instance of this object, use <see cref="P:EPiServer.WorkflowFoundation.WorkflowSystem.DefinitionHandler"/> to get
            the singelton instance instead.
            </summary>
            <param name="provider">storage provider</param>
            <param name="broadcastHandler">The component that handles broadcast</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ReloadDefinitions">
            <summary>
            Internal method to flush inmemory instances and reload from storage.
            setting member to null and access property will reload it.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.LoadDefinitions">
            <summary>
            Loads definitions from storage 
            </summary>
            <returns>definitions</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RegisterDefinition(System.String,System.String,System.Type)">
            <summary>
            Registers a compiled Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">A descrition of the definition</param>
            <param name="compiledType">The Workflow type to register</param>
            <returns>definition</returns>
            <remarks>The compiled type must be a workflow</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RegisterDefinition(System.String,System.String,System.Type,EPiServer.Security.AccessControlList)">
            <summary>
            Registers a compiled Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">A descrition of the definition</param>
            <param name="compiledType">The Workflow type to register</param>
            <param name="acl">The acl.</param>
            <returns>definition</returns>
            <remarks>The compiled type must be a workflow</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RegisterXomlDefinition(System.String,System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Registers a xoml based Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">The description of the definition</param>
            <param name="xoml">The xoml to register</param>
            <param name="cs">C# based code beside associated with xoml (if any)</param>
            <param name="rules">Rules associated with xoml (if any)</param>
            <param name="errors">errors/warnings from compilation</param>
            <returns>registered definition</returns>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RegisterXomlDefinition(System.String,System.String,System.String,System.String,System.String,EPiServer.Security.AccessControlList,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Registers a xoml based Workflow type with runtime
            </summary>
            <param name="name">The name of the definiton, has to be unique</param>
            <param name="description">The description of the definition</param>
            <param name="xoml">The xoml to register</param>
            <param name="cs">C# based code beside associated with xoml (if any)</param>
            <param name="rules">Rules associated with xoml (if any)</param>
            <param name="acl">The acl for the definition</param>
            <param name="errors">errors/warnings from compilation</param>
            <returns>registered definition</returns>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Saves the workflow definition.
            </summary>
            <param name="definition">The definition to save.</param>
            <remarks>If xoml based is used the overloaded method with error collection is recommended,
            since it gives more detail if compilation fails.</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.XomlWorkflowDefinition,System.CodeDom.Compiler.CompilerErrorCollection@)">
            <summary>
            Saves the xoml based workflow definition.
            </summary>
            <param name="definition">The definition to save.</param>
            <param name="errors">compilation output</param>
            <remarks>passed xoml, cs and rules will be compiled to assembly at registration.
            If there are dependencies to external types this can be registered in web.config under references section</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If some input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.SaveDefinition(EPiServer.WorkflowFoundation.CompiledWorkflowDefinition)">
            <summary>
            Saves the compiled workflow definition.
            </summary>
            <param name="definition">The definition to save.</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If input is not valid</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.DeleteDefinition(System.String)">
            <summary>
            Unregisters a defintion from runtime
            </summary>
            <param name="definitionName">The name of the definition to delete</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found or running instances</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.DeleteDefinition(System.Guid)">
            <summary>
            Unregisters a defintion from runtime
            </summary>
            <param name="definitionId">The id of the definition to delete</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found or running instances</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.DeleteDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Deletes the definition.
            </summary>
            <param name="definition">The definition to delete</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ContainsDefinition(System.Guid)">
            <summary>
            Indicates wetter there exists an definition with this id
            </summary>
            <param name="definitionId">definition id</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ContainsDefinition(System.String)">
            <summary>
            Indicates wetter there exists an definition with this name
            </summary>
            <param name="definitionName">the name of the definition to check for</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.TryGetDefinition(System.Guid,EPiServer.WorkflowFoundation.WorkflowDefinition@)">
            <summary>
            Tries to get a defintion with given guid.
            </summary>
            <param name="definitionId">The id of the definition to get</param>
            <param name="definition">The definition with the given id. Null if defintion does not exist</param>
            <returns>True if definition exists else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.TryGetDefinition(System.String,EPiServer.WorkflowFoundation.WorkflowDefinition@)">
            <summary>
            Tries to get a defintion with given name.
            </summary>
            <param name="definitionName">The name of the definition to get</param>
            <param name="definition">The definition with the given name. Null if defintion does not exist</param>
            <returns>True if definition exists else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RegisterDependencyPath(System.String)">
            <summary>
            If custom activities has external dependencies they must be registered so activity can be
            compiled and loaded. Can be registered in web.config under references section
            </summary>
            <param name="path">The path to referenced assembly</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.GetDefinition(System.String)">
            <summary>
            Returns the Workflow definition
            </summary>
            <param name="definitionName">unique name of definition</param>
            <returns>definition</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.GetDefinition(System.Guid)">
            <summary>
            Returns the Workflow definition
            </summary>
            <param name="definitionId">unique id of definition</param>
            <returns>definition</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">Definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.GetDefinitions">
            <summary>
            Gets all registered Workflow definitions
            </summary>
            <returns>List of all registered definitions</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.RemoveUnusedAssemblies">
            <summary>
            It might not be possible to remove an assembly from disk when xoml based definition is removed/updated due to 
            the fact that it might have been loaded in AppDomain. A call to this method will try to delete unused assemblies
            from disk.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.CurrentDomain_TypeResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Since our own compiled Workflows resides in own directory, not bin for web.
            We need to hook into AppDomain so they can get loaded
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Since our own compiled Workflows resides in own directory, not bin for web.
            We need to hook into AppDomain so they can get loaded
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ValidateUpdate(System.Guid,System.String)">
            <summary>
            Checks that definition exists and that the name is valid and unique. 
            For compiled definition it also cheks that there are no running instances
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="definitionName">Name of the definition.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.GetDefinitionFromName(System.String)">
            <summary>
            Gets the definition with specified name
            </summary>
            <param name="definitionName">Name of the definition.</param>
            <returns>Definition (or null if definition not found)</returns>
            <remarks>The returned definition is not copied. So before returned "outside" it should be copied</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ExistTypeAndDefinition(System.String)">
            <summary>
            Checks if a assemblyname matches a definition, and if so compiles it if
            binary does not exist
            </summary>
            <param name="assemblyName">name of assembly</param>
            <returns>The type if exist else null</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.AddWorkflowDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Adds a definition internally and to storage
            </summary>
            <param name="definition">definition to add</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.UpdateWorkflowDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Updates an definition internally and to storage
            </summary>
            <param name="definition">definition to update</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.DeleteWorkflowDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            deletes a definiton internally and from storage
            </summary>
            <param name="definition">definition to remove</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.DeleteDefinitionLocal(System.Guid)">
            <summary>
            deletes the definition internally
            </summary>
            <param name="definitionId">The id of the definition to delete</param>
            <remarks>With local means that no information is sent to listeners in a loadbalanced scenario</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.DefinitionHandler.ReloadWorkflowDefinition(System.Guid)">
            <summary>
            Reloads a definition from storage
            </summary>
            <param name="definitionId">The id of the definition to reload</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.DefinitionHandler.StorageProvider">
            <summary>
            Handle to storage provider
            </summary>
            <remarks>To change type override <see cref="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.StorageProvider"/></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.DefinitionHandler.BroadcastHandler">
            <summary>
            Handle to broadcast sender
            </summary>
            <value>The broadcast handler.</value>
            <remarks>To change type override <see cref="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.BroadcastHandler"/></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.DefinitionHandler.WorkflowDefinitions">
            <summary>
            Accessor that loads definitions from storage if they are not loaded
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.DefinitionHandler.RegisteredDependencyPaths">
            <summary>
            Returns paths to all registered custom dependencies
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.PageRelatedEventArgs">
            <summary>
            Contains information about an <see cref="T:EPiServer.DataFactory"/> related page event
            It is possible to start workflow instances and pass in start arguments to
            those instances by setting properties on this class
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.PageRelatedEventArgs.#ctor(EPiServer.PageEventArgs,EPiServer.WorkflowFoundation.WorkflowPageEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.PageRelatedEventArgs"/> class.
            </summary>
            <param name="args">The <see cref="T:EPiServer.PageEventArgs"/> instance containing the event data.</param>
            <param name="pageEvent">The page event.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.PageRelatedEventArgs.PageEvent">
            <summary>
            Gets the EPiServer related event.
            </summary>
            <value>The page event.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.PageRelatedEventArgs.PageEventArgs">
            <summary>
            Gets the page event args.
            The value can be of a derived type to PageEventArgs depending on the event type, e.g. PageLanguageEventArgs if event
            is WorkflowPageEvent.PageLanguageDeleted.
            </summary>
            <value>The page event args.</value>
            <remarks>The action can be cancelled by setting CancelAction=true, (will not have meaning for all events)</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition">
            <summary>
            Represents a workflow definition that uses a precompiled workflow
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowDefinition">
            <summary>
            Base class for Workflow definitions
            </summary>
            <remarks>implements IItem so definition can be stored in Object Store</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.#ctor(EPiServer.WorkflowFoundation.DefinitionType,System.String,System.String,EPiServer.Security.AccessControlList)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.WorkflowDefinition"/> class.
            </summary>
            <param name="type">The type of the defintion (xoml or compiled)</param>
            <param name="name">The name of the definition (must be unique)</param>
            <param name="description">The description of the definition</param>
            <param name="acl">The access control list for the definition</param>
            <remarks>New instances should not be created directly, use RegisterDefinition on IDefinitionHandler to get definition</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.#ctor(EPiServer.WorkflowFoundation.DefinitionType,System.String,System.String)">
            <summary>
            Creates a new instance of a workflow definition.
            </summary>
            <param name="definitionType">The type of the defintion (xoml or compiled)</param>
            <param name="name">The name of the definition (must be unique)</param>
            <param name="description">The description of the definition</param>
            <remarks>New instances should not be created directly, use RegisterDefinition on IDefinitionHandler to get definition</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.#ctor(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.WorkflowDefinition"/> class.
            used for copy
            </summary>
            <param name="definition">The definition.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.ContainsPageType(System.String)">
            <summary>
            Checks if definition is set for a specific pagetype
            </summary>
            <param name="pageType">A page type to match against</param>
            <returns>
            	<c>true</c> if definition applies to page type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.IsBelowRootPage(EPiServer.Core.PageReference)">
            <summary>
            checks wetter a given pagelink is below the pageroot
            </summary>
            <param name="pageLink">The page link to match</param>
            <returns>
            	<c>true</c> if given page is below specified pageroot; otherwise, <c>false</c>.
            </returns>
            <remarks>PageReference.Empty interprets as everywhere</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.UpdateStartParameters(System.Type)">
            <summary>
            When a definition is saved, the previous parameters are matched against 
            those properties the Type exposes.
            </summary>
            <param name="compiledType">Type of the compiled.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinition.Copy">
            <summary>
            Makes a copy of definition
            </summary>
            <returns>a copy of definition</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.Type">
            <summary>
            Gets the compiled type for the workflow definition
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.TypeFullName">
            <summary>
            Gets the full name of the type, including assembly
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.Layout">
            <summary>
            The layout for the definition, if any. Can be set for State machine workflows.
            </summary>
            <remarks>It's only usage is to be able to display the state machine with correct layout.</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.DefinitionId">
            <summary>
            Gets the definition id.
            </summary>
            <value>The definition id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.DefinitionType">
            <summary>
            The type of the Workflow, Compiled or Xoml
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.PageStartEvents">
            <summary>
            Which episerver event(s) that will start an instance of the Workflow. Can be ored
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.FileSystemStartEvents">
            <summary>
            Which file system that will start an instance of the Workflow. Can be ored
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.TriggeringDefinitions">
            <summary>
            If WorkflowCompleted is set as triggering event, this states which definition
            that should complete to create a new instance of this definition
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.ACL">
            <summary>
            The access control list for the definition
            <para></para>
            <para>The settings that will be checked for is:</para>
            <para>Read - States who will see instances in e.g. instance lists</para>
            <para>Create - States who have rights to manually create instances of definition</para>
            <para>Delete - States who can terminate a running instance</para>
            <para>Edit - States who can edit a running instance</para>
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.DefinitionName">
            <summary>
            The name of this Workflow definiton
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.Description">
            <summary>
            The description of this Workflow definiton
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.PageRoot">
            <summary>
            Below PageRoot startevents are applied. PageReference.Empty interprets as everywhere
            </summary>
            <remarks>PageReference.EmptyReference is default value</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.StartParameters">
            <summary>
            Gets or sets the parameters that will be passed to created instances.
            </summary>
            <value>The start params.</value>
            <remarks>Stored objects should be serializable. If custom types is used their schema should be registered with Object Store</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.PageTypes">
            <summary>
            States for which pagetypes (given a page related startEvent) the Workflow should be started.
            If not given Workflow will start for all pagetypes
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.PageTypesString">
            <summary>
            ',' separted list of page types
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.Id">
            <summary>
            Id for object store storage
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinition.Name">
            <summary>
            Name for object store, must be unique
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IDeepCopy`1">
            <summary>
            Specifies a typed deepcopy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IDeepCopy`1.DeepCopy">
            <summary>
            Makes a Deep copy of the generic type
            </summary>
            <returns>copy</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.#ctor(System.String,System.String,System.Type,EPiServer.Security.AccessControlList)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of definition</param>
            <param name="description">The description of the definition</param>
            <param name="compiledType">the compiled type</param>
            <param name="acl">The access contorl list for the definition</param>
            <remarks>New instances should not be created directly, use RegisterDefinition on IDefinitionHandler to get definition</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.#ctor(EPiServer.WorkflowFoundation.CompiledWorkflowDefinition)">
            <summary>
            Private constuctor used for copies
            </summary>
            <param name="definition">to be copied</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.Copy">
            <summary>
            makes a deep copy of definition
            </summary>
            <returns>copy</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.DeepCopy">
            <summary>
            makes a deep copy of definition
            </summary>
            <returns>copy</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.Type">
            <summary>
            Gets/sets the compiled type for the workflow definition
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.CompiledWorkflowDefinition.Layout">
            <summary>
            Gets or sets the layout. Can be used by state machine workflows.
            </summary>
            <value>The layout.</value>
            <remarks>This will only affect how the workflow is displayed in rendered image.</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.DefinitionType">
            <summary>
            Specifies the different Definition types
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.DefinitionType.Xoml">
            <summary>
            An xoml based definition that is compiled at registration time
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.DefinitionType.Compiled">
            <summary>
            A precompiled definition
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowPageEvent">
            <summary>
            Events corresponding to  page events from EPiServer, used to be able to let workflows be started automatically when
            event occur. Bitwise so several can be set.
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.None">
            <summary>
            Represents no event
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageCheckedIn">
            <summary>
            Represents event <see cref="E:EPiServer.Core.PageStoreBase.CheckedInPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageCheckingIn">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.CheckingInPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageCreated">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.CreatedPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageCreating">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.CreatingPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageDeleted">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.DeletedPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageDeleting">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.DeletingPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageMoved">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.MovedPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageMoving">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.MovingPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PagePublished">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.PublishedPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PagePublishing">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.PublishingPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageSaved">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.SavedPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageSaving">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.SavingPage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageLanguageDeleting">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.DeletingPageLanguage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.WorkflowPageEvent.PageLanguageDeleted">
            <summary>
            Represents  event <see cref="E:EPiServer.Core.PageStoreBase.DeletedPageLanguage"/> that is raised from <see cref="T:EPiServer.DataFactory"></see>
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.HistoryItem">
            <summary>
            Represents some occurence for a workflow instance
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.HistoryItem.#ctor">
            <summary>
            Not to be used
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.HistoryItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new History item
            </summary>
            <param name="subject">subject</param>
            <param name="description">description</param>
            <param name="user">user</param>
            <remarks>If subject and/or description is passed a reference to a language path such as /demo/subject then
            the it will be translated at request time</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.HistoryItem.#ctor(System.String,System.String,System.String,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates a new History item
            </summary>
            <param name="subject">subject</param>
            <param name="description">description</param>
            <param name="user">user</param>
            <param name="localizationService">The ResouceLocator used for translation.</param>
            <remarks>
                <para>
                    If subject and/or description is passed a reference to a language path such as /demo/subject then
                    the it will be translated at request time.
                </para>
                <para>
                    If <paramref name="localizationService"/> is <c>null</c> the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.
                </para>
            </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.HistoryItem.#ctor(EPiServer.WorkflowFoundation.HistoryItem)">
            <summary>
            constructor used for copy
            </summary>
            <param name="item">item to be copied</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.HistoryItem.DeepCopy">
            <summary>
            Makes deep copy of this item
            </summary>
            <returns>copy</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.HistoryItem.Date">
            <summary>
            Date/Time for the occurance
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.HistoryItem.Description">
            <summary>
            Desctiption of the occurance 
            </summary>
            <remarks>If description is passed a reference to a language path such as /demo/description then
            the it will be translated at request time</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.HistoryItem.Subject">
            <summary>
            Subject for the occurance
            </summary>
            <remarks>If subject is passed a reference to a language path such as /demo/subject then
            the it will be translated at request time</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.HistoryItem.User">
            <summary>
            The user linked to this occurance (if any)
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StartInstanceEventArgs">
            <summary>
            This class is used with <see cref="E:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.InstanceStarting"/> 
            when a new workflow instance is about to be started
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StartInstanceEventArgs.#ctor(EPiServer.WorkflowFoundation.WorkflowDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.StartInstanceEventArgs"/> class.
            </summary>
            <param name="definition">The definition that an instance is to be started of</param>
            <param name="namedValueArgs">The start parameters that will be passed to instance</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceEventArgs.NamedValueArgs">
            <summary>
            Use this to pass start arguments to the workflow instance that is about to be created
            </summary>
            <value>The named value args.</value>
            <remarks>passed objects should be serializable</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceEventArgs.WorkflowDefinition">
            <summary>
            Gets the workflow definition that an instance will be created of.
            </summary>
            <value>The workflow definition.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the instance from being started
            </summary>
            <value><c>true</c> if action should be cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.StartInstanceEventArgs.CancelReason">
            <summary>
            Gets or sets a message for why the action was cancelled
            </summary>
            <value>The reason why the action was cancelled</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowException">
            <summary>
            General workflow exception
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">
            <summary>
            Exceptions for errors concerning definitions
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionNotFoundException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionNotFoundException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">
            <summary>
            Exceptions for errors concerning instances
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceNotFoundException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceNotFoundException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowInstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowRuntimeException">
            <summary>
            Exceptions for errors concerning Workflow runtime
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowRuntimeException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowRuntimeException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.WorkflowRuntimeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance">
            <summary>
            Represents an running instance of a workflow definition
            </summary>
            <remarks>implements IItem to make it possible to persist in Object Store</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.#ctor(System.Guid,EPiServer.WorkflowFoundation.WorkflowDefinition,System.String,EPiServer.Core.PageReference)">
            <summary>
            Initializes a new instance. 
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="definition">the name of the definition this instance is of</param>
            <param name="initiator">The initiator.</param>
            <param name="pRef">page that triggered Workflow</param>
            <remarks>Should not be created directly. It is created implicitly by calls to IInstanceHandler.StartInstance</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.#ctor(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            used internally for deep copy
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.DeepCopy">
            <summary>
            makes a deep copy of the instance
            </summary>
            <returns>A copy of instance</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.AddHistoryItem(EPiServer.WorkflowFoundation.HistoryItem)">
            <summary>
            Adds an occurance to the list of history occurances for this instance
            </summary>
            <param name="item">occurance to add</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.Initiator">
            <summary>
            Gets the initiator
            <remarks>May not be set if instance is started automatically</remarks>
            </summary>
            <value>The initiator.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.InstanceId">
            <summary>
            The id of this instance
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.DefinitionId">
            <summary>
            Gets the definition id.
            </summary>
            <value>The definition id.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.DefinitionName">
            <summary>
            Name of the definition
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.PageLink">
            <summary>
            The page this instance is considered related to.
            If instance was automatically started according to DataFactory event this is set
            to that page. Can also be set from <see cref="T:EPiServer.WorkflowFoundation.Activities.AssociateWithPage"></see> activity.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.PageLanguageID">
            <summary>
            Specifies if workflow instance is tied to 
            a secific language for a page
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.Type">
            <summary>
            The compiled type of the Workflow
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.TypeFullName">
            <summary>
            Gets the full name of the type, including assembly.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.UserData">
            <summary>
            Gets an IDictionary that makes it possible to associate custom data with this instance
            </summary>
            <remarks>objects stored must be serializable. If custom types is used their schema should be registered with Object store</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.History">
            <summary>
            Retrieve all history items
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.SystemInstance">
            <summary>
            Gets the wrapped system instance
            </summary>
            <value>The system instance.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.Id">
            <summary>
            Object store identity
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowDefinitionInstance.Name">
            <summary>
            Object store name
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Version">
            <summary>
            Internal struct that holds a version of a xoml based Workflow
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Version.#ctor(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="xoml">xoml</param>
            <param name="cs">cs</param>
            <param name="rules">rules</param>
            <param name="layout">layout</param>
            <param name="compiledType">compiled type</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Version.DeepCopy">
            <summary>
            Makes a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.XomlWorkflowDefinition">
            <summary>
            Represents a xoml based Workflow definition
            </summary>
            <remarks>A xoml based definition consists of a xoml and optionally a code beside file and a rules file.
            The files will be compiled to an assembly at registration time</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.#ctor(System.String,System.String,System.Type,System.String,System.String,System.String,EPiServer.Security.AccessControlList)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.XomlWorkflowDefinition"/> class.
            </summary>
            <param name="name">The name of this definition</param>
            <param name="description">The description for the definition</param>
            <param name="compiledType">Type of the compiled assembly</param>
            <param name="xoml">The xoml representation of the workflow</param>
            <param name="rules">The rules to be used with xoml (string.Empty if rules not used)</param>
            <param name="cs">The code beside file (.cs) to be used with xoml (string.Empty if code beside not used)</param>
            <param name="acl">The access contorl list for the definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.#ctor(EPiServer.WorkflowFoundation.XomlWorkflowDefinition)">
            <summary>
            Constructor used for copies
            </summary>
            <param name="def">to be copied</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.AddVersion(System.Type)">
            <summary>
            Adds a new version to the definition
            </summary>
            <param name="compiledType">Type of the compiled.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.TryDeleteFiles(System.String)">
            <summary>
            Tries to delete compiled files from disk for this definition in given directory.
            Might succeed depending on if assembly has been loaded in AppDomain
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.IsAssemblyOfDefinition(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Checks if given assembly is of this definition, and if so returns definition data
            </summary>
            <param name="assemblyName">name of assembly</param>
            <param name="xoml">The xoml representation of the workflow</param>
            <param name="cs">The code beside file (.cs) to be used with xoml.</param>
            <param name="rules">The rules to be used with xoml.</param>
            <returns>
            	<c>true</c> if assembly is of this definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.RemoveUnusedVersions(System.Collections.Generic.IList{System.String})">
            <summary>
            Checks the internal version lists against used types and removes old unused versions
            </summary>
            <param name="usedFullTypeNames"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.Copy">
            <summary>
            Makes a deep copy of defintion
            </summary>
            <returns>copy</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.DeepCopy">
            <summary>
            makes a deep copy of definition
            </summary>
            <returns>copy</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.Xoml">
            <summary>
            Gets or sets the Xoml for this definition
            </summary>
            <value>The xoml.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.CS">
            <summary>
            Gets or sets the c# code beside for this definition
            </summary>
            <value>The CS.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.Rules">
            <summary>
            Gets or sets the rules for this definition
            </summary>
            <value>The rules.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.Layout">
            <summary>
            Gets or sets the layout of the xoml file. 
            </summary>
            <value>The layout.</value>
            <remarks>The layout is not part of the compilation, it is used when displaying definition on images</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.NeedsCompilation">
            <summary>
            Gets a value indicating whether the definition needs to be recompiled.
            </summary>
            <value><c>true</c> if [needs compilation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.Type">
            <summary>
            Gets the latest compiled type for the workflow definition
            </summary>
            <value>The type.</value>
            <remarks>The set method will throw exception since type is compiled by runtime at registration</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.XomlWorkflowDefinition.AllTypes">
            <summary>
            Returns a list of all compiled versions of this assembly, where each type is given with 
            a fullname including assemblyname
            </summary>
            <value>All types.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.InstanceHandler">
            <summary>
            Implementation of <see cref="T:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler"/>. This is the main component for handling of workflow instances
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler">
            <summary>
            Specifies methods etc. regarding instance handling
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.Core.PageReference)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="pageLink">If given, associates Workflow with the given page</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.Core.PageReference,EPiServer.Security.AccessLevel)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="pageLink">If given, associates Workflow with the given page</param>
            <param name="access">The required access level for start instance</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Starts a Workflow of specified definition with a specified instance id
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="instanceId">The id of the instance to be created</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Starts a Workflow of specified definition with a specified instance id
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="instanceId">The id of the instance to be created</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="access">The access.</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.StartInstance(System.Guid)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <returns>The created instance</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.TerminateInstance(System.Guid,System.String)">
            <summary>
            Terminates a given Workflow instance
            </summary>
            <param name="workflowInstanceId">The id of the instance to terminate</param>
            <param name="reason">A description why the instances was terminated</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to terminate instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:System.InvalidOperationException">If instance not found in persistance store</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.TerminateInstance(System.Guid,System.String,EPiServer.Security.AccessLevel)">
            <summary>
            Terminates a given Workflow instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="reason">A description why the instances was terminated</param>
            <param name="access">The required access level for terminate instance</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to terminate instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:System.InvalidOperationException">If instance not found in persistance store</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.SaveInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Saves the instance
            </summary>
            <param name="instance">The updated instance</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to save instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.SaveInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance,EPiServer.Security.AccessLevel)">
            <summary>
            Saves the instance
            </summary>
            <param name="instance">The updated instance</param>
            <param name="access">The access.</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to save instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.ContainsInstance(System.Guid)">
            <summary>
            Indicates wetter there exists an instance with this id
            </summary>
            <param name="workflowInstanceId">instance id</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.TryGetInstance(System.Guid,EPiServer.WorkflowFoundation.WorkflowDefinitionInstance@)">
            <summary>
            Tries to get the instance with specified id
            </summary>
            <param name="workflowInstanceId">The id of the instance to get</param>
            <param name="workflowInstance">The workflow instance with the given id</param>
            <returns>true if instance exist else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.TryGetInstance(System.Guid,EPiServer.Security.AccessLevel,EPiServer.WorkflowFoundation.WorkflowDefinitionInstance@)">
            <summary>
            Tries to get the instance with specified id
            </summary>
            <param name="workflowInstanceId">The id of the instance to get</param>
            <param name="access">The access to match against</param>
            <param name="workflowInstance">The workflow instance with the given id</param>
            <returns>true if instance exist else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstance(System.Guid)">
            <summary>
            Gets instance with specified id
            </summary>
            <param name="workflowInstanceId">instance id</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstance(System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Gets instance with specified id.
            </summary>
            <param name="workflowInstanceId">instance id</param>
            <param name="accessLevel">The acess level.</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances">
            <summary>
            Gets all running Workflow instances
            </summary>
            <returns>A list of all workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(EPiServer.Security.AccessLevel)">
            <summary>
            Gets all running Workflow instances for a given access level
            </summary>
            <param name="accessLevel">The acess level.</param>
            <returns>All instances that matches the access level</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(EPiServer.Core.PageReference)">
            <summary>
            Returns information about all running Workflows attached to a specific page
            </summary>
            <param name="pageLink">pageLink</param>
            <returns>information about all Workflow instances</returns>
            <remarks>It will return instances that are associated with any version of the page</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(EPiServer.Core.PageReference,EPiServer.Security.AccessLevel)">
            <summary>
            Returns information about all running Workflows attached to a specific page for a given acess level
            </summary>
            <param name="pageLink">pageLink</param>
            <param name="accessLevel">The access level.</param>
            <remarks>It will return instances that are associated with any version of the page</remarks>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(System.Type)">
            <summary>
            Returns all instantiated Workflows of a certain type that are not completed
            </summary>
            <param name="workflowType">Type of the workflow to match against</param>
            <returns>workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(System.Type,EPiServer.Security.AccessLevel)">
            <summary>
            Returns all instantiated Workflows of a certain type that are not completed
            </summary>
            <param name="workflowType">Type of the workflow.</param>
            <param name="accessLevel">The acess level.</param>
            <returns>workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(System.Guid)">
            <summary>
            Returns all instantiated Workflows of a certain definition that are not completed
            </summary>
            <param name="workflowDefinitionId">The definitionId</param>
            <returns>workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetInstances(System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Returns all instantiated Workflows of a certain definition that are not completed
            </summary>
            <param name="workflowDefinitionId">The definitionId</param>
            <param name="accessLevel">The acess level.</param>
            <returns>workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetQueueInfo(System.Guid)">
            <summary>
            Gets the Workflow queue for a specific Workflow instance, could be used i.e. to
            determine which event a specific Workflow waits for
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>Gets all items in queue</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetWaitingEvents(System.Guid)">
            <summary>
            Gets the Acivitys for the Workflow that are registered to listen for events
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>waiting activities</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.CreateTaskForInstance(System.Guid,System.String,System.String,System.String,EPiServer.Core.PageReference,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a task and associates it with the instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="assignedTo">The person/group this task is assigned to</param>
            <param name="subject">The subject of the task</param>
            <param name="description">The description of the task</param>
            <param name="pageLink">The page if the task should be associated with a page</param>
            <param name="notifyByEmail">if set to <c>true</c> a notification is sent to assignedTo</param>
            <param name="logAction">if set to <c>true</c> an entry is added to history items for the workflow instance</param>
            <param name="activityRelated">if set to <c>true</c> event related activities are looked for ActivityPlugIn and if found
            control specified is loaded for task. if set to false standard task view is shown</param>
            <returns>the created task</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetTasks(System.Guid)">
            <summary>
            Gets all tasks related to a workflow instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>A list of all tasks related to the specified instance</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.GetSystemInstance(System.Guid)">
            <summary>
            Gets the wrapped system instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>system instance</returns>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.InstanceStarting">
            <summary>
            Occurs when a workflow instance is about to be created. 
            It gives possibilities to set start arguments
            </summary>
            <example>Shows how event can be used to pass start parameters to workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="InstanceStarting" lang="cs" />
            </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.InstanceStartingCancelled">
            <summary>
            Occurs when starting of an instance was cancelled.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IInstanceHandler.InstanceDeleted">
            <summary>
            Occurs when an instances was deleted, for example when it is completed or terminated.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.#ctor(EPiServer.WorkflowFoundation.Interfaces.IStorageProvider,EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler,System.Workflow.Runtime.WorkflowRuntime)">
            <summary>
            Do not create an instance of this object, use <see cref="P:EPiServer.WorkflowFoundation.WorkflowSystem.InstanceHandler"/> to get
            the singelton instance instead.
            </summary>
            <param name="storageProvider">A handle to the storage provider</param>
            <param name="broadcastHandler">The broadcast handler.</param>
            <param name="runtime">A handle to runtime</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.#ctor(EPiServer.WorkflowFoundation.Interfaces.IStorageProvider,EPiServer.WorkflowFoundation.Interfaces.IBroadcastHandler,System.Workflow.Runtime.WorkflowRuntime,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Do not create an instance of this object, use <see cref="P:EPiServer.WorkflowFoundation.WorkflowSystem.InstanceHandler"/> to get
            the singelton instance instead.
            </summary>
            <param name="storageProvider">A handle to the storage provider</param>
            <param name="broadcastHandler">The broadcast handler.</param>
            <param name="runtime">A handle to runtime</param>
            <param name="localizationService">The resource locator used for translation.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.#ctor">
            <summary>
            Default constructor is not to be used
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.Core.PageReference)">
            <summary>
            Starts an instance of a Workflow definition
            </summary>
            <param name="definitionId">The definition id to start an instance of</param>
            <param name="args">passed to Workflow instance as start arguments</param>
            <param name="pageLink">page that this instance relates to. PageReference.EmptyReference if not page related</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to start instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional params passed to Workflow</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to start instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.Core.PageReference,EPiServer.Security.AccessLevel)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="pageLink">If given, associates Workflow with the given page</param>
            <param name="access">The required access level for start instance</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Starts a Workflow of specified definition with a specified instance id
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="instanceId">The id of the instance to be created</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Starts a Workflow of specified definition with a specified instance id
            </summary>
            <param name="definitionId">The definition id.</param>
            <param name="args">optional start params passed to Workflow</param>
            <param name="instanceId">The id of the instance to be created</param>
            <param name="access">The access.</param>
            <returns>The created instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.StartInstance(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid,EPiServer.Core.PageReference,EPiServer.Security.AccessLevel)">
            <summary>
            Starts a Workflow of specified definition
            </summary>
            <param name="definitionId">definition id</param>
            <param name="args">start parameters</param>
            <param name="instanceId">instance id</param>
            <param name="pageLink">related page</param>
            <param name="access">access level</param>
            <returns>instance</returns>
            <remarks>null is returned if some event handler to InstanceStarting cancels the action</remarks>
            <exception cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">The workflow engine fails to validate the
            workflow definition</exception>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Access denied</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">Action was cancelled</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowException">Unexpected failure</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.TerminateInstance(System.Guid,System.String)">
            <summary>
            Terminates a given Workflow instance
            </summary>
            <param name="workflowInstanceId">the instance to abort</param>
            <param name="reason">A description why the instances was terminated</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to terminate instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:System.InvalidOperationException">If instance not found in persistance store</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.TerminateInstance(System.Guid,System.String,EPiServer.Security.AccessLevel)">
            <summary>
            Terminates a given Workflow instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="reason">A description why the instances was terminated</param>
            <param name="access">The required access level for terminate instance</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to terminate instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found in runtime</exception>
            <exception cref="T:System.InvalidOperationException">If instance not found in persistance store</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.SaveInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Saves the instance
            </summary>
            <param name="instance">The updated instance</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to save instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.SaveInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance,EPiServer.Security.AccessLevel)">
            <summary>
            Saves the instance
            </summary>
            <param name="instance">The updated instance</param>
            <param name="access">The access.</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">If current user has not rights to save instance</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">If definition not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.ContainsInstance(System.Guid)">
            <summary>
            Indicates wetter there exists an instance with this id
            </summary>
            <param name="workflowInstanceId">instance id</param>
            <returns>wetter instance exist</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.TryGetInstance(System.Guid,EPiServer.WorkflowFoundation.WorkflowDefinitionInstance@)">
            <summary>
            Tries to get the instance with specified id
            </summary>
            <param name="workflowInstanceId">The id of the instance to get</param>
            <param name="workflowInstance">The workflow instance with the given id. Null if instance does not exist</param>
            <returns>true if instance exist else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.TryGetInstance(System.Guid,EPiServer.Security.AccessLevel,EPiServer.WorkflowFoundation.WorkflowDefinitionInstance@)">
            <summary>
            Tries to get the instance with specified id
            </summary>
            <param name="workflowInstanceId">The id of the instance to get</param>
            <param name="accessLevel">The access level to match</param>
            <param name="workflowInstance">The workflow instance with the given id. Null if instance does not exist</param>
            <returns>true if instance exist else false</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetQueueInfo(System.Guid)">
            <summary>
            Gets the Workflow queue for a specific Workflow instance, could be used i.e. to
            determine which event a specific Workflow waits for
            </summary>
            <param name="workflowInstanceId">the workflow instance</param>
            <returns>Gets all items in queue</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetWaitingEvents(System.Guid)">
            <summary>
            Gets the Acivitys for the Workflow that are registered to listen for events
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>waiting activities</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstance(System.Guid)">
            <summary>
            Gets instance
            </summary>
            <param name="workflowInstanceId">instance id</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstance(System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Gets the instance.
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="accessLevel">The access level.</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances">
            <summary>
            Gets all running Workflow instances
            </summary>
            <returns>Instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(EPiServer.Security.AccessLevel)">
            <summary>
            Gets all running Workflow instances that caller has given access to
            </summary>
            <param name="accessLevel">The acess level to match for</param>
            <returns>Instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(EPiServer.Core.PageReference)">
            <summary>
            Returns information about all instantiated Workflows attached to a specific page that are not completed
            </summary>
            <param name="pageLink">pageLink</param>
            <remarks>It will return instances that are associated with any version of the page</remarks>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(EPiServer.Core.PageReference,EPiServer.Security.AccessLevel)">
            <summary>
            Returns information about all instantiated Workflows attached to a specific page that are not completed
            </summary>
            <param name="pageLink">pageLink</param>
            <param name="accessLevel">The access level.</param>
            <remarks>It will return instances that are associated with any version of the page</remarks>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(System.Type)">
            <summary>
            Returns information about all instantiated Workflows of a certain type that are not completed
            </summary>
            <param name="workflowType">the type to match against</param>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(System.Type,EPiServer.Security.AccessLevel)">
            <summary>
            Returns information about all instantiated Workflows of a certain type that are not completed
            </summary>
            <param name="workflowType">Type of the workflow.</param>
            <param name="accessLevel">The access level.</param>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(System.Guid)">
            <summary>
            Returns information about all instantiated Workflows from a specified definition that are not completed
            </summary>
            <param name="workflowDefinitionId">The definitionId</param>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(System.Guid,EPiServer.Security.AccessLevel)">
            <summary>
            Returns information about all instantiated Workflows from a specified definition that are not completed
            </summary>
            <param name="workflowDefinitionId">The workflow definition id.</param>
            <param name="accessLevel">The access level.</param>
            <returns>information about all Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.CreateTaskForInstance(System.Guid,System.String,System.String,System.String,EPiServer.Core.PageReference,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a task and associates it with the instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="assignedTo">The person/group this task is assigned to</param>
            <param name="subject">The subject of the task</param>
            <param name="description">The description of the task</param>
            <param name="pageLink">The page if the task should be associated with a page</param>
            <param name="notifyByEmail">if set to <c>true</c> a notification is sent to assignedTo</param>
            <param name="logAction">if set to <c>true</c> an entry is added to history items for the workflow instance</param>
            <param name="activityRelated">if set to <c>true</c> event related activities are looked for ActivityPlugIn and if found
            control specified is loaded for task. if set to false standard task view is shown</param>
            <returns>the created task</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">If instance not found</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetTasks(System.Guid)">
            <summary>
            Gets all tasks related to the workflow instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>A list of all task associated with this instance</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetSystemInstance(System.Guid)">
            <summary>
            Gets the wrapped system instance
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <returns>system instance</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetSafeCopyOfInstances">
            <summary>
            Returns a "safe" copy of instances, meaning a deep copy is performed
            </summary>
            <returns>A thread safe copy of workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.LoadInstances">
            <summary>
            Loads persisted info about Workflow instances
            </summary>
            <returns>instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.ReloadInstances">
            <summary>
            Internal method to flush inmemory instances and reload from storage.
            setting memner to null and access property will reload it.
            </summary>
            <returns>Number of loaded instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.RemoveInstance(System.Guid)">
            <summary>
            Removes a Workflowinstance
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.RemoveInstanceLocal(System.Guid)">
            <summary>
            Removes the instance locally (that is no broadcasted message is sent)
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.AddInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            adds a Workflowinstance
            </summary>
            <param name="instance">The instance to add</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.UpdateInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            updates info about an Workflowinstance
            </summary>
            <param name="instance">The instance to update</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.UpdateInstanceLocal(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            updates info about an Workflowinstance locally (that is no broadcast message is sent)
            </summary>
            <param name="instance">The instance to update</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.ReloadInstance(System.Guid)">
            <summary>
            Reloads the instance from storage
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.ValidateStartParams(EPiServer.WorkflowFoundation.WorkflowDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Before an instance of definition is started, assure predefined arguments on definition is added and then
            the args collection is iterated to see that
            each passed args is present in definition and that type is correct.
            If not param is removed from args to avoid exceptions when starting workflow.
            </summary>
            <param name="definition">The definition that an instance is about to start from</param>
            <param name="args">The parameters to validate</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.GetInstances(EPiServer.WorkflowFoundation.InstanceHandler.MatchesCriteria,EPiServer.Security.AccessLevel)">
            <summary>
            Gets the instances that matches criteria
            </summary>
            <param name="matchCriteria">The match criteria.</param>
            <param name="accessLevel">The access level.</param>
            <returns>instances that match given criteria</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.OnInstanceStarting(System.Object,EPiServer.WorkflowFoundation.StartInstanceEventArgs)">
            <summary>
            Raises the InstanceStarting event
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:EPiServer.WorkflowFoundation.StartInstanceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.OnInstanceStartingCancelled(System.Object,EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs)">
            <summary>
            Raises the InstanceStartingCancelled event
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:EPiServer.WorkflowFoundation.StartInstanceCancelledEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.CreateTaskForInstance(System.Guid,System.String,System.String,System.String,System.DateTime,EPiServer.Core.PageReference,System.Boolean,System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a task related to instance.
            </summary>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="assignedTo">The assigned to.</param>
            <param name="subject">The subject.</param>
            <param name="description">The description.</param>
            <param name="dueDate">The due date.</param>
            <param name="pageLink">The page link.</param>
            <param name="notifyByEmail">if set to <c>true</c> [notify by email].</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="activityRelated">if set to <c>true</c> [activity related].</param>
            <param name="eventActivityName">Name of the event activity.</param>
            <param name="stateBag">The state bag.</param>
            <returns>The created task</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.UpdateTask(System.Int32,EPiServer.Personalization.TaskStatus,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Updates a task
            </summary>
            <param name="taskId">The task id.</param>
            <param name="status">The status.</param>
            <param name="assignTo">The assign to.</param>
            <param name="taskSubject">The task subject.</param>
            <param name="taskDescription">The task description.</param>
            <param name="notifyByEmail">if set to <c>true</c> [notify by email].</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.IsRole(System.String)">
            <summary>
            Determines whether the specified username is a role.
            </summary>
            <param name="username">The username.</param>
            <returns>
            	<c>true</c> if the specified username is role; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.DeleteTask(System.Int32,System.Boolean,System.Guid)">
            <summary>
            Deletes a task.
            </summary>
            <param name="taskId">The task id.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.DeleteTasksForInstance(System.Boolean,System.Guid)">
            <summary>
            Deletes all tasks associated with an instance
            </summary>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.AssociateWithPage(EPiServer.Core.PageReference,System.Boolean,System.Guid)">
            <summary>
            Associates an instance with a page.
            </summary>
            <param name="pageLink">The page link.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.AddHistoryItem(System.String,System.String,System.String,System.Guid)">
            <summary>
            Adds a history item to a workflow instance
            </summary>
            <param name="subject">The subject of the item to log</param>
            <param name="description">The description of the item to log</param>
            <param name="user">The user related to this item (if any)</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.InstanceHandler.AddUserData(System.String,System.Object,System.Boolean,System.Guid)">
            <summary>
            Adds an serialized object to the UserData member of an instance
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="logAction">if set to <c>true</c> [log action].</param>
            <param name="instanceId">The instance id.</param>
            <remarks>The passed object must be serializable and if a custom type is used then schema of type must be registered with object store</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.InstanceHandler.StorageProvider">
            <summary>
            Handle to storage provider
            </summary>
            <remarks>To change type override <see cref="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.StorageProvider"/></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.InstanceHandler.BroadcastHandler">
            <summary>
            Handle to broadcast sender
            </summary>
            <remarks>To change type override <see cref="P:EPiServer.WorkflowFoundation.AspNetWorkflowManager.BroadcastHandler"/></remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.InstanceHandler.Runtime">
            <summary>
            The workflow runtime
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.InstanceHandler.WorkflowInstances">
            <summary>
            Local (within this class) access to the _workflowInstances variable should always goes through this
            accessor. (This is to assure it is loaded when using LazyLoading)
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.InstanceHandler.LocalizationService">
            <summary>
            The localizationService used for translations.
            </summary>
            <remarks>Will use the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> if not set.</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.InstanceHandler.InstanceStarting">
            <summary>
            Occurs when a workflow instance is about to be created, It gives 
            possibilities to pass in start arguments to instance
            </summary>
            <example>Shows how event can be used to pass start parameters to workflow instance
            <code source="../CodeSamples/WorkflowFoundation/events/Events.cs" region="InstanceStarting" lang="cs" />
            </example>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.InstanceHandler.InstanceStartingCancelled">
            <summary>
            Occurs when starting of an instance was cancelled.
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.InstanceHandler.InstanceDeleted">
            <summary>
            Occurs when an instances was deleted, for example when it is completed or terminated.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.InstanceHandler.MatchesCriteria">
            <summary>
            delgate that specifies fileter criteria
            </summary>
            <param name="instance">instance to match</param>
            <returns>true if matches criteris</returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider">
            <summary>
            Interface a component that acts as a persistance storage should implement
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.LoadInstances">
            <summary>
            Loads all instances from persistance storage
            </summary>
            <returns>instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.AddInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Adds an instances to persistance storage
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.RemoveInstance(System.Guid)">
            <summary>
            Removes an instances from persistance storage
            </summary>
            <param name="instanceId">The id of the instance to remove</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">instance not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.UpdateInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Updates an instance in persistance storage
            </summary>
            <param name="instance">instance</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">instance not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.LoadInstance(System.Guid)">
            <summary>
            Loads an instance from persistance storage
            </summary>
            <param name="instanceId">instance id</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">instance not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.LoadDefinitions">
            <summary>
            Loads definitions from persistance storage
            </summary>
            <returns>definitions</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.AddDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Adds a definition to persistance storage
            </summary>
            <param name="definition">definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.RemoveDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Removes an definition from persistance storage
            </summary>
            <param name="definition">The definition to remove</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">definition not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.UpdateDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Updates a defintion in persistance storage
            </summary>
            <param name="definition">definition</param>
             <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">definition not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.LoadDefinition(System.Guid)">
            <summary>
            loads a definition from persistance storage
            </summary>
            <param name="definitionId">definition id</param>
            <returns>defintion</returns>
             <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">definition not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.GetWaitingInstances(System.String)">
            <summary>
            Gets the instances currently waiting for a specific event
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>A list of all instances that waits for the specified event</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.RegisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Registers that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.UnregisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Unregister that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IStorageProvider.UnregisterInstance(System.Guid)">
            <summary>
            Unregisters the instance for all events.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication">
            <summary>
            Specifies the events/invokes in host-Workflow communication. This interface is not meant to program directly against
            rather it is used as base for the communication activities used to communicate between host and workflow instances.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.Initialize">
            <summary>
            Event listening towards DataFactory, file system and task should be setup
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.ReleaseResources">
            <summary>
            Clean up resources
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.CreateTask(System.String,System.String,System.String,System.DateTime,EPiServer.Core.PageReference,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
            <summary>
            Represents the CreateTask activity. Used when Workflow instances will create a task inside EPiServer
            </summary>
            <param name="AssignTo">Who the task should be assigend to</param>
            <param name="TaskSubject">Subject for the task</param>
            <param name="TaskDescription">Description for the task</param>
            <param name="DueDate">The due date.</param>
            <param name="PageLink">If the task is associated with a page</param>
            <param name="EventActivityName">Name of the event activity.</param>
            <param name="NotifyByEmail">if set to <c>true</c> a notification is sent to assignedTo by email</param>
            <param name="LogAction">if set to <c>false</c> this action is added to History items for workflow instance</param>
            <param name="ActivityRelated">if set to <c>true</c> [activity related].</param>
            <param name="StateBag">The state bag on the task</param>
            <param name="InstanceId">The id of the Workflow instance, which task will be related to</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.UpdateTask(System.Int32,EPiServer.Personalization.TaskStatus,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Represents the UpdateTask activity. Used when Workflow instances will update a task inside EPiServer
            </summary>
            <param name="TaskId">The task id</param>
            <param name="Status">The status of the task</param>
            <param name="AssignTo">Who the task should be assigend to</param>
            <param name="TaskSubject">Subject for the task</param>
            <param name="TaskDescription">Description for the task</param>
            <param name="NotifyByEmail">if set to <c>true</c> [notify by email].</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The id of the Workflow instance, which task will be related to</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DeleteTask(System.Int32,System.Boolean,System.Guid)">
            <summary>
            Deletes the task.
            </summary>
            <param name="TaskId">The task id.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DeleteTasksForInstance(System.Boolean,System.Guid)">
            <summary>
            Deletes all tasks related to the instance.
            </summary>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.AssociateWithPage(EPiServer.Core.PageReference,System.Boolean,System.Guid)">
            <summary>
            Associates the workflow instance with a EPiServer page.
            </summary>
            <param name="PageLink">The page link.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance of the workflow</param>
            <remarks>A instance associated with a page will only recieve page related events </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.AddHistoryItem(System.String,System.String,System.String,System.Guid)">
            <summary>
            Adds a history item to an workflow instance. Useful when an workflow instance wants to log something
            </summary>
            <param name="ItemSubject">The subject of the item to be logged</param>
            <param name="ItemDescription">The description of the item to be logged</param>
            <param name="User">The user associated with this item (if any)</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.AddUserData(System.String,System.Object,System.Boolean,System.Guid)">
            <summary>
            Adds a serializable custom object to the UserData collection of the workflow instance. Can be used to pass
            data from an workflow instance so it's accessible through host.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
            <remarks>passed object must be serializable. If custom object is stored, schema for type should be registered with object store</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageCreated">
            <summary>
            Event to signal to OnPageCreated activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageCheckedIn">
            <summary>
            Event to signal to OnPageCheckedIn activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageDeleted">
            <summary>
            Event to signal to OnPageDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageMoved">
            <summary>
            Event to signal to OnPageMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PagePublished">
            <summary>
            Event to signal to OnPagePublished activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageSaved">
            <summary>
            Event to signal to OnPageSaved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageLanguageDeleted">
            <summary>
            Event to signal to OnPageLanguageDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.PageEvent">
            <summary>
            Event that will be signaled for all page events
            </summary>
            <remarks>Will only be fired to instances that has page associated</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileAdded">
            <summary>
            Event to signal to OnFileAdded activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileDeleted">
            <summary>
            Event to signal to OnFileDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileMoved">
            <summary>
            Event to signal to OnFileMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileCopied">
            <summary>
            Event to signal to OnFileCopied activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileCheckedOut">
            <summary>
            Event to signal to OnFileCheckedOut activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileCheckedIn">
            <summary>
            Event to signal to OnFileCheckedIn activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DirectoryAdded">
            <summary>
            Event to signal to OnFileAdded activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DirectoryDeleted">
            <summary>
            Event to signal to OnDirectoryDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DirectoryMoved">
            <summary>
            Event to signal to OnDirectoryMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.DirectoryCopied">
            <summary>
            Event to signal to OnDirectoryCopied activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.FileSystemEvent">
            <summary>
            Event that will be signaled for all FileSystem events (both files and Directories)
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.TaskStatusChanged">
            <summary>
            Event to signal to OnTaskStatusChanged activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Interfaces.IWorkflowCommunication.TaskDeleted">
            <summary>
            Event to signal to OnTaskDeleted activity
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.CommunicationService">
            <summary>
            Listens to events from EPiServer and send events to listening workflow instances.
            It also captuers events from workflow instances and Broadcast them
            </summary>
            <remarks>This class should intended to be programmed directly against. It is used to handle communication
            between workflow host and workflow instances</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.#ctor(EPiServer.WorkflowFoundation.Interfaces.ICommunicationServiceCallback)">
            <summary>
            Creates an instance of CommunicationService
            </summary>
            <param name="callback">The component to notify when a invoked based activity executes</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.Initialize">
            <summary>
            Sets up event listening towards DataFactory, UnifiedFile and UnifiedDirectory
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.ReleaseResources">
            <summary>
            Clean up resources
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.CreateTask(System.String,System.String,System.String,System.DateTime,EPiServer.Core.PageReference,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
            <summary>
            Represents the CreateTask activity. Used when Workflow instances will create a task inside EPiServer
            </summary>
            <param name="AssignTo">Who the task should be assigend to</param>
            <param name="TaskSubject">Subject for the task</param>
            <param name="TaskDescription">Description for the task</param>
            <param name="DueDate">The due date.</param>
            <param name="PageLink">If the task is associated with a page</param>
            <param name="EventActivityName">Name of the event activity.</param>
            <param name="NotifyByEmail">if set to <c>true</c> a notification is sent to assignedTo by email</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="ActivityRelated">if set to <c>true</c> [activity related].</param>
            <param name="StateBag">The state bag on the task</param>
            <param name="InstanceId">The id of the Workflow instance, which task will be related to</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.UpdateTask(System.Int32,EPiServer.Personalization.TaskStatus,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Represents the UpdateTask activity. Used when Workflow instances will update a task inside EPiServer
            </summary>
            <param name="TaskId">The task id</param>
            <param name="Status">The status of the task</param>
            <param name="AssignTo">Who the task should be assigend to</param>
            <param name="TaskSubject">Subject for the task</param>
            <param name="TaskDescription">Description for the task</param>
            <param name="NotifyByEmail">if set to <c>true</c> notify assignedTo by email.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The id of the Workflow instance, which task will be related to</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.DeleteTask(System.Int32,System.Boolean,System.Guid)">
            <summary>
            Deletes the task.
            </summary>
            <param name="TaskId">The task id.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.DeleteTasksForInstance(System.Boolean,System.Guid)">
            <summary>
            Deletes all tasks related to the instance.
            </summary>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.AssociateWithPage(EPiServer.Core.PageReference,System.Boolean,System.Guid)">
            <summary>
            Associates the workflow instance with a EPiServer page.
            </summary>
            <param name="PageLink">The page link.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance of the workflow</param>
            <remarks>A instance associated with a page will only recieve page related events </remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.AddHistoryItem(System.String,System.String,System.String,System.Guid)">
            <summary>
            Adds a history item to an workflow instance. Useful when an workflow instance wants to log something
            </summary>
            <param name="ItemSubject">The subject of the item to be logged</param>
            <param name="ItemDescription">The description of the item to be logged</param>
            <param name="User">The user associated with this item (if any)</param>
            <param name="InstanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.AddUserData(System.String,System.Object,System.Boolean,System.Guid)">
            <summary>
            Adds a serializable custom object to the UserData collection of the workflow instance. Can be used to pass
            data from an workflow instance so it's accessible through host.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <param name="LogAction">if set to <c>true</c> this action is added to History items for workflow instance</param>
            <param name="InstanceId">The instance id.</param>
            <remarks>passed object must be serializable</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.HandleFileSystemEvent(EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs,EPiServer.Web.Hosting.UnifiedVirtualPathEventArgs)">
            <summary>
            Handles a file system event.
            </summary>
            <param name="args">The <see cref="T:EPiServer.WorkflowFoundation.FileSystemRelatedEventArgs"/> instance containing the event data.</param>
            <param name="e">The <see cref="T:EPiServer.Web.Hosting.UnifiedVirtualPathEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.HandleDataFactoryEvent(EPiServer.WorkflowFoundation.WorkflowPageEvent,EPiServer.PageEventArgs)">
            <summary>
            Handles a data factory event.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="args">The <see cref="T:EPiServer.PageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.SendEventsOnThread">
            <summary>
            Method to send events to workflows, done in background thread so datafactory and filesystem event delegate can return faster
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.InvokeEvent(EPiServer.WorkflowFoundation.Services.CommunicationService.QueueItem)">
            <summary>
            Gets all instances that waits for a specific event and sends event to them
            </summary>
            <param name="item">queued item</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.GetPageEventHandler(EPiServer.WorkflowFoundation.WorkflowPageEvent,System.String@,System.EventHandler{EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs}@)">
            <summary>
            Gets the page related event handler and the event name for a episerver event
            </summary>
            <param name="episerverEvent">The episerver event.</param>
            <param name="eventName">Name of the event.</param>
            <param name="pageEventHandler">The page event handler.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.GetFileSystemEventHandler(EPiServer.WorkflowFoundation.WorkflowFileSystemEvent,System.String@,System.EventHandler{EPiServer.WorkflowFoundation.Activities.WorkflowFileSystemEventArgs}@)">
            <summary>
            Gets the event handler and the event name for a episerver event
            </summary>
            <param name="fileSystemEvent">The filesystem event.</param>
            <param name="eventName">Name of the event.</param>
            <param name="fileEventHandler">The file event handler.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CommunicationService.AddItemToCacheAndDictionary(System.String,System.Object,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds the item to cache and dictionary.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="cacheItem">The cache item.</param>
            <param name="dictionaryKey">The dictionary key.</param>
            <param name="dictionaryValue">The dictionary value.</param>
            <param name="namedValueArgs">The named value args.</param>
            <returns>The cacheKey.</returns>
            <remarks>The item added to Dictionary must be marked as serializable.</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageCreated">
            <summary>
            Event to signal to OnPageCreated activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageCheckedIn">
            <summary>
            Event to signal to OnPageCheckedIn activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageDeleted">
            <summary>
            Event to signal to OnPageDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageMoved">
            <summary>
            Event to signal to OnPageMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PagePublished">
            <summary>
            Event to signal to OnPagePublished activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageLanguageDeleted">
            <summary>
            Event to signal to OnPageLanguageDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageSaved">
            <summary>
            Event to signal to OnPageSaved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageEvent">
            <summary>
            Event that will be signaled for all page events
            </summary>
            <remarks>Will only be fired to instances that has page associated</remarks>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileAdded">
            <summary>
            Event to signal to OnFileAdded activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileDeleted">
            <summary>
            Event to signal to OnFileDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileMoved">
            <summary>
            Event to signal to OnFileMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileCopied">
            <summary>
            Event to signal to OnFileCopied activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileCheckedOut">
            <summary>
            Event to signal to OnFileCheckedOut activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileCheckedIn">
            <summary>
            Event to signal to OnFileCheckedIn activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.DirectoryAdded">
            <summary>
            Event to signal to OnFileAdded activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.DirectoryDeleted">
            <summary>
            Event to signal to OnFileDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.DirectoryMoved">
            <summary>
            Event to signal to OnDirectoryMoved activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.DirectoryCopied">
            <summary>
            Event to signal to OnDirectoryCopied activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileSystemEvent">
            <summary>
            Event that will be signaled for all FileSystem events (both files and Directories)
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.TaskStatusChanged">
            <summary>
            Event to signal to OnTaskStatusChanged activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.TaskDeleted">
            <summary>
            Event to signal to OnTaskDeleted activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.PageRelatedEvent">
            <summary>
            Occurrs when a page related event occurs from DataFactory. Gives chance to 
            cancel event by setting CancelAction to true.
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            <remarks>CancelAction has not meaning for all events</remarks>
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.CommunicationService.FileSystemRelatedEvent">
            <summary>
            Occurrs when a FileSystem related event occurs from UnifiedFileSytem. 
            It is also possible to start new workflow instance and
            pass arguments to instance by setting properties on argument class.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.CommunicationService.CacheService">
            <summary>
            Service that is used as cache and for IPageSource implementation.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.CommunicationService.QueueItem">
            <summary>
            Item that is used as a container when passing data to worker thread
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.CacheService">
            <summary>
            Service that expose a short time cache to make it possible to pass none serializable objects 
            (such as PageEventArgs) from outside to workflow instances. It also expose
            methods to get EPiServerData from Workflow instances. Primarly used when using other host than AspNet. 
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheService.AddItem(System.Object)">
            <summary>
            Adds an object to short time cache
            </summary>
            <param name="item">object to cache</param>
            <returns>cache key</returns>
            <remarks>The object is inserted in cache with a sliding expiration set to 10 minutes</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheService.AddItem(System.String,System.Object)">
            <summary>
            Adds an object to short time cache
            </summary>
            <param name="cacheKey">The cache key to associate with the cached item</param>
            <param name="item">object to cache</param>
            <remarks>The object is inserted in cache with a sliding expiration set to 10 minutes</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheService.GetItem(System.String)">
            <summary>
            Gets a cached object
            </summary>
            <param name="key">cache key</param>
            <returns>cached object</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheService.GetChildren(EPiServer.Core.PageReference)">
            <summary>
            Gets the children.
            </summary>
            <param name="pageLink">The page link.</param>
            <returns>The children for a page</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheService.GetPage(EPiServer.Core.PageReference)">
            <summary>
            Gets the page.
            </summary>
            <param name="pageLink">The page link.</param>
            <returns>The request page</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.CacheService.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
            <value>The current page.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.CacheServiceImpl">
            <summary>
            implementation of EPiServerService
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.AddItem(System.Object)">
            <summary>
            Adds an item to cache
            </summary>
            <param name="item">item to cache</param>
            <returns>cache key</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.AddItem(System.String,System.Object)">
            <summary>
            Adds an object to short time cache
            </summary>
            <param name="cacheKey">The cache key to associate with the cached item</param>
            <param name="item">object to cache</param>
            <remarks>The object is inserted in cache with a sliding expiration set to 10 minutes</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.GetItem(System.String)">
            <summary>
            gets an item from cache
            </summary>
            <param name="key">cache key</param>
            <returns>cahed item</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.GetChildren(EPiServer.Core.PageReference)">
            <summary>
            datafactory implementation of getchildren
            </summary>
            <param name="pageLink">pagelink</param>
            <returns>children</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.GetPage(EPiServer.Core.PageReference)">
            <summary>
            datafactory implementation of getpage
            </summary>
            <param name="pageLink">pagelink</param>
            <returns>pagedata</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.CacheServiceImpl.CurrentPage">
            <summary>
            datafactory implementation of current page
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.EventTrackingService">
            <summary>
            Tracking service that tracks when workflowinstances enters/leaves an activity that is an EPiServer related event.
            Used to keep track on which instances that waits for which event.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.EventTrackingService.InsertEvent(System.String,System.Guid)">
            <summary>
            Inserts event to storage
            </summary>
            <param name="eventName">eventname</param>
            <param name="instanceId">instnaceid</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.EventTrackingService.RemoveEvent(System.String,System.Guid)">
            <summary>
            Removes event 
            </summary>
            <param name="eventName">event name</param>
            <param name="instanceId">instance id</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.EventTrackingService.GetInstancesForEvent(System.String)">
            <summary>
            Returns all instance that waits for a specific event
            </summary>
            <param name="eventName">Name of event</param>
            <returns>List of all instances that has registered for event</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.EventTrackingService.RemoveEvents(System.Guid)">
            <summary>
            Removes all events for a specific instance
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.EventTrackingService.OnNewEvent(EPiServer.WorkflowFoundation.Services.NewEventArgs)">
            <summary>
            Raises NewEvent
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Services.EventTrackingService.NewEvent">
            <summary>
            Event when new event enters
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Services.NewEventArgs">
            <summary>
            holds information about when a episerver activity changes state
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Services.NewEventArgs.#ctor(System.String,System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Services.NewEventArgs"/> class.
            </summary>
            <param name="eventName">event name</param>
            <param name="instanceId">instance id</param>
            <param name="removed">if set to <c>true</c> indicates that an event was removed; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.NewEventArgs.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.NewEventArgs.InstanceId">
            <summary>
            instance id
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Services.NewEventArgs.Removed">
            <summary>
            indicates if event was added or removed
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider">
            <summary>
            A in memory storage provider, used if no storage is used
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.LoadInstances">
            <summary>
            No operation
            </summary>
            <returns>Empty list</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.AddInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            No operation
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.RemoveInstance(System.Guid)">
            <summary>
            No operation
            </summary>
            <param name="instanceId">The id of the instance to remove</param>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">instance not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.UpdateInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            No operation
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.LoadInstance(System.Guid)">
            <summary>
            No operation
            </summary>
            <param name="instanceId">instance id</param>
            <returns>instance</returns>
            <remarks>Always throws exception</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException"></exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.LoadDefinitions">
            <summary>
            no operation
            </summary>
            <returns>empty list</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.AddDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            No operation
            </summary>
            <param name="definition">definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.RemoveDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            no operation
            </summary>
            <param name="definition">defintion</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.UpdateDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            no operation
            </summary>
            <param name="definition">definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.LoadDefinition(System.Guid)">
            <summary>
            no operation
            </summary>
            <param name="definitionId">id</param>
            <returns></returns>
            <remarks>Always throws exception</remarks>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException"></exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.GetWaitingInstances(System.String)">
            <summary>
            Gets the instances currently waiting for a specific event
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>List of instances that waits for event</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.RegisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Registers that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.UnregisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Unregister that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.NoPersistenceStorageProvider.UnregisterInstance(System.Guid)">
            <summary>
            Unregisters the instance for all events.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider">
            <summary>
            Component that stores Workflow instances, Workflows definitions and event queues in ObjectStore
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.#ctor">
            <summary>
            creates instance of provider
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.Initialize">
            <summary>
            Ensures that used types have schemas registered with object store
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.LoadInstances">
            <summary>
            Loads Workflow instances from object store
            </summary>
            <returns>Workflow instances</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.AddInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Adds a Workflow instance to object store
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.RemoveInstance(System.Guid)">
            <summary>
            Removes a Workflow instance from object store
            </summary>
            <param name="instanceId">The id of the instance to remove</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.UpdateInstance(EPiServer.WorkflowFoundation.WorkflowDefinitionInstance)">
            <summary>
            Updates a Workflow instance in object store
            </summary>
            <param name="instance">instance</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.LoadInstance(System.Guid)">
            <summary>
            Loads a Workflow instance from object store
            </summary>
            <param name="instanceId">instance id</param>
            <returns>instance</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowInstanceException">instance not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.LoadDefinitions">
            <summary>
            Loads Workflow definitions from object store
            </summary>
            <returns>definitions</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.AddDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Adds a Workflow definition to object store
            </summary>
            <param name="definition">definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.RemoveDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Removes a definition from Workflow
            </summary>
            <param name="definition">The definition to remove</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.UpdateDefinition(EPiServer.WorkflowFoundation.WorkflowDefinition)">
            <summary>
            Updates a defintion in object store
            </summary>
            <param name="definition">definition</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.LoadDefinition(System.Guid)">
            <summary>
            loads a Workflow definition from object store
            </summary>
            <param name="definitionId">definition id</param>
            <returns>defintion</returns>
            <exception cref="T:EPiServer.WorkflowFoundation.WorkflowDefinitionException">definition not found in storage</exception>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.GetWaitingInstances(System.String)">
            <summary>
            Gets the instances currently waiting for a specific event
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>
            A list of all instances that waits for the specified event
            </returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.RegisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Registers that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.UnregisterWaitingInstance(System.Guid,System.String)">
            <summary>
            Unregister that a instance is waiting for an event
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.UnregisterInstance(System.Guid)">
            <summary>
            Unregisters the instance for all events.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.ObjectStoreStorageProvider.VerifyCommonSchemas">
            <summary>
            Assures that schemas used are registered with object store
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.StorageProviders.StorageProviderFactory">
            <summary>
            Simple factory that returns Object store provider if persistance is used, else noop provider
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.StorageProviders.StorageProviderFactory.GetStorageProvider(System.Boolean,System.Boolean)">
            <summary>
            Gets storage provider
            </summary>
            <param name="usePeristence">if persistance is to be used</param>
            <param name="lazyLoading">if set to <c>true</c> lazyloading is used.</param>
            <returns>storage provider</returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Utility">
            <summary>
            Contains some common methods
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.ParsePageEvents(System.String)">
            <summary>
            Parses the passed string to an WorkflowPageEvent.
            </summary>
            <param name="events">The event string that should be parsed</param>
            <returns>The WorkflowPageEvent that the string represented</returns>
            <remarks>strings can be "ored" using '|', i.e PagePublished | PageSaved</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.ParseFilesystemEvents(System.String)">
            <summary>
            Parses the passed string to an WorkflowFileSystemEvent.
            </summary>
            <param name="events">The event string that should be parsed</param>
            <returns>The WorkflowPageEvent that the string represented</returns>
            <remarks>strings can be "ored" using '|', i.e FileAdded | FileMoved</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.DeleteTasksForInstance(System.Guid)">
            <summary>
            Deletes all tasks related to an instance
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.CopyParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deep copy of objects through serialization/deserialization
            </summary>
            <param name="dictionary">A dcitionary that should be copied</param>
            <returns>A copy of parameters</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.DeepCopy(System.Object)">
            <summary>
            Deep copy of object through serialization/deserialization
            </summary>
            <param name="obj">The obj.</param>
            <remarks>Function requires that each object is serializable</remarks>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Utility.DeleteFile(System.String)">
            <summary>
            Tries to delete a file on file system
            </summary>
            <param name="filePath">The file path.</param>
            <returns>if file was deleted</returns>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowManagerFactory">
            <summary>
            Factory that creates an instance of registered IWorkflowManager implementation
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowManagerFactory.GetWorkflowManager(EPiServer.Configuration.WorkflowSettingsElement)">
            <summary>
            Simple factory to create instance of component implementing IWorkflowManager.
            If not speicified in web.config AspNetWorkflowManager is the default implementation.
            </summary>
            <returns></returns>
            <remarks>Registered class has to have public default constructor</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.WorkflowSystem">
            <summary>
            Main entry point when programming against workflow system. Holds accessors to workflow singleton objects
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.System#Web#IHttpModule#Dispose">
            <summary>
            <see cref="T:EPiServer.WorkflowFoundation.WorkflowSystem"/> is no longer deployed as an <see cref="T:System.Web.IHttpModule"/>, implementation is left for compatibility reasons.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            <see cref="T:EPiServer.WorkflowFoundation.WorkflowSystem"/> is no longer deployed as an <see cref="T:System.Web.IHttpModule"/>, implementation is left for compatibility reasons.
            </summary>
            <param name="context">HttpApplication context</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            IInitializableModule.Initialize
            </summary>
            <param name="context">InitializationEngine context</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.Preload(System.String[])">
            <summary>
             IInitializableModule.Preload
            <param name="parameters">parameters</param>
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            IInitializableModule.UnInitialize
            </summary>
            <param name="context">InitializationEngine context</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.RegisterDefinitions(EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager,EPiServer.Configuration.WorkflowSettingsElement)">
            <summary>
            Registers definitions from config file with runtime
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.WorkflowSystem.RegisterServices(EPiServer.WorkflowFoundation.Interfaces.IWorkflowManager,EPiServer.Configuration.WorkflowSettingsElement)">
            <summary>
            Registers services from config file with runtime
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowSystem.WorkflowManager">
            <summary>
            Gets an instance of the running host that implements IWorkflowManager.
            The implementing object is a singleton object.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowSystem.DefinitionHandler">
            <summary>
            Gets the singleton object that handles definitions.
            </summary>
            <remarks>The data handled are thread safe</remarks>
            <value>The definition handler.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.WorkflowSystem.InstanceHandler">
            <summary>
            Gets the singleton instance handler.
            </summary>
            <remarks>The data handled are thread safe</remarks>
            <value>The instance handler.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ApprovalBase">
            <summary>
            Contains some common functionality for approval workflows
            </summary>
            <remarks>This base classe is not abstract since workflow designer will fail
            to load workflows with abstract base classes.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.Translate(System.String,System.String)">
            <summary>
            Helper method that tries to translate a string to a users language.
            If language can not be determined the first enabled language branch will be used as fallback.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="languagekey">The key to the item in a language xml that should be resolved.</param>
            <returns>The translation for the given languageKey.</returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.UpdateTaskLinks(EPiServer.Core.PageReference)">
            <summary>
            Iterates over all tasks related to this instance and updates pagelink
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.PublishPage(EPiServer.Core.PageData)">
            <summary>
            Publishes the page.
            </summary>
            <param name="page">The page.</param>
            <remarks>The page will be published on behalf of the user who saved/created the version that is published.
            If StartPublish is set to a future date and there is already a published version of this language we dont publish the page
            since that would lead to that a previously published page will have none version published right now. in that case
            we set version to DelayedPublished meaning it will get published later when StartPublish date is reached.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.SendApprovedEmail(EPiServer.WorkflowFoundation.Activities.SendEmailActivity,EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs)">
            <summary>
            Sends an email to page owner about approved page.
            </summary>
            <param name="activity">The activity.</param>
            <param name="approvalEvent">The <see cref="T:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.sendEmailActivity_FailedSentEmail(System.Object,System.EventArgs)">
            <summary>
            Handles the FailedSentEmail event of the sendEmailActivity control. It adds an entry to log.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalBase.SmtpFromConfigurationfile">
            <summary>
            Gets the SMTP settings from configurationfile.
            </summary>
            <value>The SMTP from configurationfile.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs">
            <summary>
            Argument to ApprovalEvent activity
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.#ctor(System.Boolean,System.String,System.String,System.String,System.Guid,EPiServer.Core.PageReference)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs"/> class.
            </summary>
            <param name="approved">if set to <c>true</c> the page is approved.</param>
            <param name="approver">The approver.</param>
            <param name="taskOwner">The task owner.</param>
            <param name="message">The message regarding the approval</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
            <param name="pageLink">The page version to approve</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.Message">
            <summary>
            Gets the message from the approver
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.Approver">
            <summary>
            Gets the name of the approver
            </summary>
            <value>The approver.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.Approved">
            <summary>
            Gets a value indicating whether this <see cref="T:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs"/> is approved.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.TaskOwner">
            <summary>
            Gets the name of the person/group the related task was assigned to.
            </summary>
            <value>The task owner.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs.PageLink">
            <summary>
            Gets the page link for the page version that this approval concerns
            </summary>
            <value>The page link.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ApprovalService">
            <summary>
            Service registered with ExternalDataExchangeService. Used for communication beteen host instances for approval activities.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.IApprovalCommunication">
            <summary>
            Interface that specified the approval related event activities
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Workflows.IApprovalCommunication.ApprovalEvent">
            <summary>
            Specifies the ApprovalEvent activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Workflows.IApprovalCommunication.SetApproversEvent">
            <summary>
            Specifies the SetApproversEvent activity
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.#ctor">
            <summary>
            Initializes a new instance of the ApprovalService class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the ApprovalService class.
            </summary>
            <param name="localizationService">The LocalizationService used for translations.</param>
            <remarks>If <paramref name="localizationService"/> is <c>null</c> the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.InstanceHandler_InstanceStarting(System.Object,EPiServer.WorkflowFoundation.StartInstanceEventArgs)">
            <summary>
            A new workflow instance is about to start. Check if it is a approval workflow and if
            so check so page version is not already published
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.AlreadyRunningForThisLanguage(EPiServer.WorkflowFoundation.StartInstanceEventArgs,EPiServer.Core.PageData)">
            <summary>
            Checks that there are not already running an approval workflow for this language of the page.
            </summary>
            <param name="e">The <see cref="T:EPiServer.WorkflowFoundation.StartInstanceEventArgs"/> instance containing the event data.</param>
            <param name="page">The page to start a approval workflow for</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.CheckApprovers(EPiServer.WorkflowFoundation.StartInstanceEventArgs,EPiServer.Core.PageReference)">
            <summary>
            Vill check that the given approvers has publish access. 
            And that if number of approvers is set that it is not larger than number of approvers 
            </summary>
            <param name="e"></param>
            <param name="pageLink"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.InvokeApprovalEvent(EPiServer.WorkflowFoundation.Workflows.ApprovalEventArgs)">
            <summary>
            invokes the ApprovalEvent
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.InvokeSetApproversEvent(EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs)">
            <summary>
            Invokes the SetApproversEvent
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApprovalService.HasReadAndPublishRights(System.String,EPiServer.Core.PageReference)">
            <summary>
            Determines whether the specified has read and publish rights for the specified page
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="pageLink">The page link to check access for</param>
            <returns>
            	<c>true</c> if has read and publish rights; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Workflows.ApprovalService.ApprovalEvent">
            <summary>
            Specifies the ApprovalEvent activity
            </summary>
        </member>
        <member name="E:EPiServer.WorkflowFoundation.Workflows.ApprovalService.SetApproversEvent">
            <summary>
            Specifies the SetApproversEvent activity
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ApproverItem">
            <summary>
            Represents an approver in an approval workflow
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ApproverItem.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.ApproverItem"/> class.
            </summary>
            <param name="approver">The approver.</param>
            <param name="isRole">if set to <c>true</c> [is role].</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApproverItem.Approver">
            <summary>
            The name of the approver
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApproverItem.IsRole">
            <summary>
            Indicates if the approver is a user or role/group
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ApproverItem.IsRequired">
            <summary>
            Gets or sets a value indicating whether this approver is required in the approval.
            </summary>
            <remarks>Only meaningful in parallel approval</remarks>
            <value>
            	<c>true</c> if the approver is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent">
            <summary>
            Event activity for approval event.
            </summary>
            <remarks>Specifies the ActivityPlugIn attribute to point out the usercontrol that should be used 
            to communicate with activity.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.MessageProperty">
            <summary>
            Registers Message as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.ApproverProperty">
            <summary>
            Registers Approver as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.ApprovedProperty">
            <summary>
            Registers Approved as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.OnInvoked(System.EventArgs)">
            <summary>
            Called just after the external event is received to allow subclasses to process the inbound <see cref="T:System.EventArgs"></see> before the activity closes.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"></see> that are received from the external event that was just received.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.InterfaceType">
            <summary>
            Gets or sets the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"></see> attributed interface type of the local service whose event will be handled. This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The interface type of the local service whose event will be handled.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.EventName">
            <summary>
            Gets the name of the raised event. This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The name of the raised event.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.Message">
            <summary>
            Gets or sets the message from the approver
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.Approver">
            <summary>
            Gets or sets the name of the approver.
            </summary>
            <value>The approver.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent.Approved">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.WorkflowFoundation.Workflows.Activities.ApprovalEvent"/> is approved.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent">
            <summary>
            Event activity for set approvers event
            </summary>
            <remarks>Specifies the ActivityPlugIn attribute to point out the usercontrol that should be used 
            to communicate with activity.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.TaskDescriptionProperty">
            <summary>
            Registers TaskDescription as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.PageLinkProperty">
            <summary>
            Registers PageLink as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.ApproversProperty">
            <summary>
            Registers Approvers as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.NeededApprovmentsProperty">
            <summary>
            Registers NeededApprovments as a dependencyproperty so it can be databound
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.OnInvoked(System.EventArgs)">
            <summary>
            Called just after the external event is received to allow subclasses to process the inbound <see cref="T:System.EventArgs"></see> before the activity closes.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"></see> that are received from the external event that was just received.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.InterfaceType">
            <summary>
            Gets or sets the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute"></see> attributed interface type of the local service whose event will be handled. 
            This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The interface type of the local service whose event will be handled.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.EventName">
            <summary>
            Gets the name of the raised event. This property must be set before local communication can occur.
            </summary>
            <value></value>
            <returns>The name of the raised event.</returns>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.TaskDescription">
            <summary>
            Gets or sets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.PageLink">
            <summary>
            Gets or sets the page link.
            </summary>
            <value>The page link.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.Approvers">
            <summary>
            Gets or sets the approvers.
            </summary>
            <value>The approvers.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.Activities.SetApproversEvent.NeededApprovments">
            <summary>
            Gets or sets the minimum number of needed approvments.
            </summary>
            <value>The needed approvments.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ParallelApproval">
            <summary>
            Workflow for parallel approval. 
            This workflow will create tasks for all given approvers. When all or the specified minimum number of 
            approvers has approved the page the page gets published and the workflow completes. If some approver 
            disapproves a "not approved" task is created for person who saved/created page.
            </summary>
            <remarks>The workflow specifies the WorkflowPlugIn attribute to specify the usercontrol used to set start parameters.
            <para>
            By default a page published by this workflow will be published in the context
            of the user who saved the page. If another behaviour is wanted e.g. that the page should
            be published in the context of one of approvers the impersonation step in method OnPublishPage
            should be changed.
            </para></remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.PageArgsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.TaskDescriptionProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.ApproversProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.NeededApprovmentsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.ApprovedProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.ApprovalEventProperty">
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.NotAllTasksCreated(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to determine if all tasks has been created
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnCreateApprovalTask(System.Object,System.EventArgs)">
            <summary>
            Called when [create approval task] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.IsMoreApprovers(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to determine if more approvers are needed or if page can be published
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ConditionalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.PublishPage(System.Object,System.EventArgs)">
            <summary>
            Publishes the page.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnCreateOwnerTask(System.Object,System.EventArgs)">
            <summary>
            Called when [create owner task] activity is executed, that is when some approver did not approve page
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnSetApprovers(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Called when [set approvers] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.InitializeApproversDictionary">
            <summary>
            Initializes the internal dictionary that keeps track on which approvments that has been done
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.CreateApproverDictionary(System.Object,System.EventArgs)">
            <summary>
            called from code activity
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnApprovalEvent(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Called when [approval event] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnAddHistoryItem(System.Object,System.EventArgs)">
            <summary>
            Called when [add history item] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnAddApproversUserData(System.Object,System.EventArgs)">
            <summary>
            Called when [add approvers user data] activity is executed. Used so control loaded for task
            can be initialized with same approvers predefined as before.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnAddNumbersUserData(System.Object,System.EventArgs)">
            <summary>
            Called when [add numbers user data] activity is executed. Used so control loaded for task
            can be initialized with same number of minimum approvers predefined as before.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.OnAddDescriptionUserData(System.Object,System.EventArgs)">
            <summary>
            Called when [add description user data] activity is executed. Used so control loaded for task
            can be initialized with same description predefined as before.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.HasApprovers(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to see if there are any approvers specified
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.IsApproved(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to see if latest approval was approved or not approved
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.IsValidParameters(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Validate start parameters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.PageArgs">
            <summary>
            Sets PageArgs as start parameters so we can get the page for automatically created workflows
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.Approvers">
            <summary>
            Gets or sets the approvers for the workflow
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.TaskDescription">
            <summary>
            Gets or sets the task description.
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.NeededApprovments">
            <summary>
            Gets or sets the minimum number of needed approvments.
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.PageLink">
            <summary>
            Gets the page link for the page version this approval is concerning
            </summary>
            <value>The page link.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.ApprovalEvent">
            <summary>
            Gets or sets the latest approval event.
            </summary>
            <value>The approval event.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ParallelApproval.Approved">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.WorkflowFoundation.Workflows.ParallelApproval"/> is approved.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.SequentialApproval">
            <summary>
            Workflow for sequential approval. 
            The workflow will create tasks and waits for approval event foreach of the given approvers. 
            If an approver does not approve a "not approved task" will be created for the 
            person who saved page. When all approvers has approved the page will be published.
            </summary>
            <remarks>The workflow specifies the WorkflowPlugIn attribute to specify the usercontrol used to set start parameters.
            
            By default a page published by this workflow will be published in the context
            of the user who saved the page. If another behaviour is wanted e.g. that the page should
            be published in the context of one of approvers the impersonation step in method OnPublishPage
            should be changed.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.PageArgsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.TaskDescriptionProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.ApproversProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.CurrentIndexProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.ApprovedProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.ApprovalEventProperty">
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnCreateApprovalTask(System.Object,System.EventArgs)">
            <summary>
            Called when [create approval task] activity is executed.
            Creates an approval task for the current approver.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnApprovedEvent(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Called when [approved event] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnPublishPage(System.Object,System.EventArgs)">
            <summary>
            Called when [publish page] code activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnCreateOwnerTask(System.Object,System.EventArgs)">
            <summary>
            Called when [create owner task] activity is executed.
            Creates an "not approved" task for the person who saved page.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnSetApprover(System.Object,System.Workflow.Activities.ExternalDataEventArgs)">
            <summary>
            Called when [set approver] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ExternalDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.IsMoreApprovers(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to determine if more approvers are needed or if page can be published
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ConditionalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnAddHistoryItem(System.Object,System.EventArgs)">
            <summary>
            Called when [add history item] activity is executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnAddUserData(System.Object,System.EventArgs)">
            <summary>
            Called when [add user data] activity is executed. 
            Used so control loaded when owner clicks on taks can be intialized with same value as previous
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>Used so usercontrol specified with task can be initialized with same approvers as before</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.OnAddDescriptionUserData(System.Object,System.EventArgs)">
            <summary>
            Called when [add description user data] activity is executed. Used so control loaded for task
            can be initialized with same description predefined as before.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.HasApprovers(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            code condition to see if there is approvers specified
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.IsApproved(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            code condition to see if last approvement was approved or not approved
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.IsValidParameters(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Validates that the start parameters are valid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Activities.ConditionalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.PageArgs">
            <summary>
            Sets PageArgs as start parameters so we can get the page for automatically created workflows
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.Approvers">
            <summary>
            Gets or sets the approvers.
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.TaskDescription">
            <summary>
            Gets or sets the task description.
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.PageLink">
            <summary>
            Gets the page link for the page version this approval is concerning
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.CurrentIndex">
            <summary>
            Gets or sets the index of the current approver.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.ApprovalEvent">
            <summary>
            Gets or sets the latest approval event.
            </summary>
            <value>The approval event.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SequentialApproval.Approved">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.WorkflowFoundation.Workflows.SequentialApproval"/> is approved.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs">
            <summary>
            Arguments used with SetApproversEvent activity
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs.#ctor(System.String,System.Collections.Generic.List{EPiServer.WorkflowFoundation.Workflows.ApproverItem},System.Int32,EPiServer.Core.PageReference,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs"/> class.
            </summary>
            <param name="taskDescription">The task description.</param>
            <param name="approvers">The approvers.</param>
            <param name="neededApprovments">The needed approvments.</param>
            <param name="pageLink">The page version that is to be approved</param>
            <param name="workflowInstanceId">The workflow instance id.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs.TaskDescription">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs.Approvers">
            <summary>
            Gets the approvers.
            </summary>
            <value>The approvers.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs.PageLink">
            <summary>
            Gets the page link for the page version to approve
            </summary>
            <value>The page link.</value>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.SetApproversEventArgs.NeededApprovments">
            <summary>
            Gets the minimum number of needed approvments.
            </summary>
            <value>The needed approvments.</value>
            <remarks>Only meaningful in parallel approval workflow</remarks>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.RequestForFeedbackService">
            <summary>
            Service registered with runtime. Used to register custom services with object store
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedbackService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.RequestForFeedbackService"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.UserItem">
            <summary>
            Represents a user/group in feedback workflow
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.UserItem.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.UserItem"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="isRole">if set to <c>true</c> [is role].</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.UserItem.UserName">
            <summary>
            The name of the user or group
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.UserItem.IsRole">
            <summary>
            Represent if it is a user or a group/role
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.CustomCodeActivityTheme">
            <summary>
            We make our custom code activity has same appearance as a regular
            code activity in designer.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.FeedbackOwnerActivity">
            <summary>
            A Noop activity. It is used to associate created task with a usercontrol
            </summary>
            <remarks>ActivityPlugIn specifies usercontrol for owner of feedback workflow</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.FeedbackOwnerActivity.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.FeedbackUserActivity">
            <summary>
            A Noop activity. It is used to associate created task with a usercontrol
            </summary>
            <remarks>ActivityPlugIn specifies usercontrol for user in feedback workflow</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.FeedbackUserActivity.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback">
            <summary>
            Workflow for request for feedback. 
            This workflow will create a task where feedback is requested for all specified users. It will also create a task for
            workflow owner where he/she can see the recieved feedback. The owner can complete workflow at will or the workflow
            completes after specified time.
            </summary>
            <remarks>The workflow specifies the WorkflowPlugIn attribute to specify the usercontrol used to set start parameters.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.PageArgsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.UsersProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.OwnerProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.RequestDescriptionProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.FileSystemArgsProperty">
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.IsValidParameters(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Validate start parameters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.MoreUsers(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Checks if all tasks are created
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.setTimeToLive(System.Object,System.EventArgs)">
            <summary>
            Sets the time for when feedback can be posted
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.OnCreateFeedbackRequests(System.Object,System.EventArgs)">
            <summary>
            Creates a feedback request in form of a task
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.OnCreateOwnerFeedback(System.Object,System.EventArgs)">
            <summary>
            Creates a task for owner where he/she can see the feedback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.RemoveTasks(System.Object,System.EventArgs)">
            <summary>
            Clear all tasks except for owner
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.PageArgs">
            <summary>
            Sets PageArgs as start parameters so we can get the page for automatically created workflows
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.Users">
            <summary>
            Gets or sets the users the feedback request is assigned to
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.Owner">
            <summary>
            Gets or sets owner of the workflow, that is the user that wants feedback
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.RequestDescription">
            <summary>
            Gets or sets the description for the feedback request
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.TimeToLive">
            <summary>
            Gets or sets the time before the workflow completes
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.RequestForFeedback.PageLink">
            <summary>
            Gets the page the request is associated with (if any)
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation">
            <summary>
            Workflow for ready for translation of page. 
            This workflow will create a task with a translation request for each specified language. If a main translator is specified
            tasks will be created for that user for each not specified (but enabled on site) language.
            After the final time specified the workflow will notify owner of which pages that was translated before it completes.
            </summary>
            <remarks>The workflow specifies the WorkflowPlugIn attribute to specify the usercontrol used to set start parameters.</remarks>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.PageArgsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.TranslatorsProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.MainTranslatorProperty">
            <exclude/>
        </member>
        <member name="F:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.OwnerProperty">
            <exclude/>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.ValidateStartCondition(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Validates startparameters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.SetInitialDelay(System.Object,System.EventArgs)">
            <summary>
            Sets the intial delay before request for translation is sent out
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.IsMoreTranslators(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition to decide if there are more translators
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.DetermineTranslators(System.Object,System.EventArgs)">
            <summary>
            Goes through all enabled languages for the site and the specified translators
            and sets upp translators
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.OnCreateTranslationTask(System.Object,System.EventArgs)">
            <summary>
            when a translation request is to be made
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.NotCompleted(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Determines if workflow instance is considered comleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.SetTimeout(System.Object,System.EventArgs)">
            <summary>
            Set remaining timeout
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.IsAssignedTranslator(System.String,System.String)">
            <summary>
            Determines if a user is assigned translators. That is it checks if user os same
            or if user belongs to assigned group
            </summary>
            <param name="user"></param>
            <param name="assignedTranslator"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.RemoveTask(EPiServer.WorkflowFoundation.Workflows.TranslationItem)">
            <summary>
            Removes a task
            </summary>
            <param name="translationItem"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.OnCreateOwnerFeedback(System.Object,System.EventArgs)">
            <summary>
            Creates feedback to workflow owner
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.IfNeedsPublish(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition that specifies if a page needs to be published before task is considered fulfilled
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.OnPageEvent(System.Object,EPiServer.WorkflowFoundation.Activities.WorkflowPageEventArgs)">
            <summary>
            When a page is Published or Saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.IsOwnerSpecified(System.Object,System.Workflow.Activities.ConditionalEventArgs)">
            <summary>
            Code condition that indicates if an owner is specified
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.UpdateTaskDueDate(System.Object,System.EventArgs)">
            <summary>
            Updates the created tasks DueDate. The reason we have to do this is becuase for a Task the reminder
            is sent when 3/4 of the time set in DueDate has elapsed. But since we want to have control over when 
            the reminder is sent we first created the task with duedate set so reminder get sent when we want it.
            Then (that is wath this activity does) we change the duedate to what we wanted.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.PageArgs">
            <summary>
            Sets PageArgs as start parameters so we can get the page for automatically created workflows
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.PublishNeeded">
            <summary>
            Indicates if page needs to be published to fullfil task
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.Translators">
            <summary>
            The specified translators
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.MainTranslator">
            <summary>
            The fallback translator for site enabled languages that is not explictly assigned
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.Owner">
            <summary>
            The owner of the translation process
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.InitialDelay">
            <summary>
            The initial delay before translation request tasks is created
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.Reminder">
            <summary>
            When a reminder should be sent fore none fulfilled translation tasks
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.Final">
            <summary>
            When the workflow should complete
            </summary>
            <remarks>set as startparameter when instance is created</remarks>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.PageName">
            <summary>
            The name of the page that is translated
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslation.InitialLanguage">
            <summary>
            The language of the version of the page that initially started the workflow
            </summary>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService">
            <summary>
            Service registered with runtime. Used to track WorkflowTerminated event so it can cleanup.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService"/> class.
            </summary>
            <param name="localizationService">The resource locator used for translation.</param>
            <remarks>If <paramref name="localizationService"/> is <c>null</c> the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.ReadyForTranslationService.InstanceHandler_InstanceStarting(System.Object,EPiServer.WorkflowFoundation.StartInstanceEventArgs)">
            <summary>
            Check if there already a instance running for this page, if so cancel starting
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EPiServer.WorkflowFoundation.Workflows.TranslationItem">
            <summary>
            Represents a translator task in ReadyForTranslation workflow
            </summary>
        </member>
        <member name="M:EPiServer.WorkflowFoundation.Workflows.TranslationItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.WorkflowFoundation.Workflows.TranslationItem"/> class.
            </summary>
            <param name="translator">The translator.</param>
            <param name="languageName">Name of the language.</param>
            <param name="languageId">The language id.</param>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.TranslationItem.Translator">
            <summary>
            The user/group that should translate
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.TranslationItem.LanguageName">
            <summary>
            The name of the language to translate to
            </summary>
        </member>
        <member name="P:EPiServer.WorkflowFoundation.Workflows.TranslationItem.LanguageId">
            <summary>
            The id of the language to translate to
            </summary>
        </member>
    </members>
</doc>

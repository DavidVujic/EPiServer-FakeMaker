<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mediachase.FileUploader</name>
    </assembly>
    <members>
        <member name="T:Mediachase.FileUploader.AssemblyResourceHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.AssemblyResourceHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.AssemblyResourceHandler"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.AssemblyResourceHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Mediachase.FileUploader.AssemblyResourceHandler.InnerFileCopy(System.Guid,System.IO.Stream)">
            <summary>
            Copies file stream to output stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <param name="OutputStream">The output stream.</param>
        </member>
        <member name="P:Mediachase.FileUploader.AssemblyResourceHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.ContentTypeElement">
            <summary>
            Represents content type configuration element.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElement.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElement"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElement"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElement"/> class.
            </summary>
            <param name="Extension">The extension.</param>
            <param name="Name">The name.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.ContentTypeElement.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.ContentTypeElement.Extension">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.ContentTypeElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.ContentTypeElementCollection">
            <summary>
            Represents a content type configuration element collection
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Add(Mediachase.FileUploader.Configuration.ContentTypeElement)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="Item">The item.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.IndexOf(Mediachase.FileUploader.Configuration.ContentTypeElement)">
            <summary>
            Indexes the of.
            </summary>
            <param name="Item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Remove(System.String)">
            <summary>
            Removes the specified extension.
            </summary>
            <param name="Extension">The extension.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Remove(Mediachase.FileUploader.Configuration.ContentTypeElement)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="Item">The item.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Mediachase.FileUploader.Configuration.ContentTypeElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.ContentTypeElementCollection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.FileUploaderContextSection">
            <summary>
            Represents file uploader context section.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FileUploaderContextSection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Configuration.FileUploaderContextSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FileUploaderContextSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.FileUploaderContextSection"/> class.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.SessionUidKey">
            <summary>
            Gets or sets the session uid key.
            </summary>
            <value>The session uid key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.TempFileStorageProviderKey">
            <summary>
            Gets or sets the session uid key.
            </summary>
            <value>The session uid key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.HttpPostMaxSize">
            <summary>
            Gets or sets the size of the HTTP post max.
            </summary>
            <value>The size of the HTTP post max.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.HttpFileMaxSize">
            <summary>
            Gets or sets the size of the HTTP file max.
            </summary>
            <value>The size of the HTTP file max.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.HttpPostBufferSize">
            <summary>
            Gets a 64-bit integer that represents the buffer size in bytes, which Mediachase FileUploader will use 
            to process request. You can change this value for better optimization. 
            </summary>
            <value>
            The default value is 655360 bytes.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FileUploaderContextSection.ContentTypes">
            <summary>
            Gets the content types.
            </summary>
            <value>The content types.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.FilterElement">
            <summary>
            Represents a filter configuration element.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElement.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Configuration.FilterElement"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.FilterElement"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElement.#ctor(Mediachase.FileUploader.FilterType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.FilterElement"/> class.
            </summary>
            <param name="Type">The type.</param>
            <param name="RequestPath">The request path.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElement.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElement.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElement.RequestPath">
            <summary>
            Gets or sets the request path.
            </summary>
            <value>The request path.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.FilterElementCollection">
            <summary>
            Represents a filter configuration element collection.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Configuration.FilterElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.FilterElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.Add(Mediachase.FileUploader.Configuration.FilterElement)">
            <summary>
            Adds the specified filter item.
            </summary>
            <param name="FilterItem">The filter item.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.IndexOf(Mediachase.FileUploader.Configuration.FilterElement)">
            <summary>
            Indexes the of.
            </summary>
            <param name="FilterItem">The filter item.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="Name">The name.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.Remove(Mediachase.FileUploader.Configuration.FilterElement)">
            <summary>
            Removes the specified filter item.
            </summary>
            <param name="FilterItem">The filter item.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.FilterElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="Index">The index.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Mediachase.FileUploader.Configuration.FilterElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.FilterElementCollection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup">
            <summary>
            Represents a mediachase file uploader section group.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup"/> class.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup.FileUploaderContext">
            <summary>
            Gets the file uploader context.
            </summary>
            <value>The file uploader context.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup.TempFileStorage">
            <summary>
            Gets the temp file storage.
            </summary>
            <value>The temp file storage.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup.UploadProgress">
            <summary>
            Gets the upload progress.
            </summary>
            <value>The upload progress.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Configuration.MediachaseFileUploaderSectionGroup.FileUploadControl">
            <summary>
            Gets the file upload control.
            </summary>
            <value>The file upload control.</value>
        </member>
        <member name="T:Mediachase.FileUploader.ContentType">
            <summary>
            Represent content type by file name resolver.
            </summary>
            <remarks>
            Sometime Web Browser doesn't send file content type. ContentType static class uses to resolve content type by file name.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.ContentType"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.CleanupExtension(System.String)">
            <summary>
            Cleanups the Extension.
            </summary>
            <param name="Extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.ResolveByPath(System.String)">
            <summary>
            Resolves the by path.
            </summary>
            <param name="Path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.Resolve(System.String)">
            <summary>
            Resolves the specified Extension.
            </summary>
            <param name="Extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.Register(System.String,System.String)">
            <summary>
            Registers the specified extension.
            </summary>
            <param name="Extension">The extension.</param>
            <param name="ContentTypeName">Name of the content type.</param>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.Unregister(System.String)">
            <summary>
            Unregisters the specified extension.
            </summary>
            <param name="Extension">The extension.</param>
        </member>
        <member name="M:Mediachase.FileUploader.ContentType.UnregisterAll">
            <summary>
            Unregisters all extensions.
            </summary>
        </member>
        <member name="E:Mediachase.FileUploader.ContentType.ContentTypeResolve">
            <summary>
            Occurs when a file content type is resolving.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.ContentType.Default">
            <summary>
            Gets or sets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="T:Mediachase.FileUploader.ContentTypeResolveEventArgs">
            <summary>
            Represents a content type resolve arguments.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.ContentTypeResolveEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.ContentTypeResolveEventArgs"/> class.
            </summary>
            <param name="Extension">The extension.</param>
        </member>
        <member name="P:Mediachase.FileUploader.ContentTypeResolveEventArgs.Extension">
            <summary>
            Gets the extension.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Mediachase.FileUploader.ContentTypeResolveEventArgs.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Mediachase.FileUploader.ContentTypeResolveEventHandler">
            <summary>
            Represents content type resolve event declaration.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Mediachase.FileUploader.FilterType">
            <summary>
            Indicates filter type.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.FilterType.Allow">
            <summary>
            Allow
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.FilterType.Deny">
            <summary>
            Deny
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.ImageThumbnail">
            <summary>
            Represents image thumbnail rendering.
            </summary>
            <remarks>
            Default code renders only image file thumbnail. Output image is image/jpeg.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.ImageThumbnail.InnerRender(System.Web.HttpContext,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Renders the image thumbnail to http response.
            </summary>
            <param name="context">The context.</param>
            <param name="StreamUid">The stream uid.</param>
            <param name="StretchSmallImages">if set to <c>true</c> [stretch small images].</param>
            <param name="MaxThumbnailDimension">The max thumbnail dimension.</param>
        </member>
        <member name="E:Mediachase.FileUploader.ImageThumbnail.Render">
            <summary>
            Occurs when image thumbnail is rendering.
            </summary>
            <remarks>
            Use properties to render image thumbnail and set Processed to true if thumbnail is rendered.
            </remarks>
        </member>
        <member name="E:Mediachase.FileUploader.ImageThumbnail.Error">
            <summary>
            Occurs when ImageThumbnail rendering is failed.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.ImageThumbnailResolveEventArgs">
            <summary>
            Provides data for the <see cref="E:Mediachase.FileUploader.ImageThumbnail.Render"/> event.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.#ctor(Mediachase.FileUploader.Web.FileStreamInfo,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.ImageThumbnailResolveEventArgs"/> class.
            </summary>
            <param name="StreamInfo">The stream info.</param>
            <param name="StretchSmallImages">if set to <c>true</c> [stretch small images].</param>
            <param name="MaxThumbnailDimension">The max thumbnail dimension.</param>
            <param name="Processed">if set to <c>true</c> [processed].</param>
            <param name="ErrorMessage">The error message.</param>
        </member>
        <member name="P:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.StretchSmallImages">
            <summary>
            Gets a value indicating whether [stretch small images].
            </summary>
            <value><c>true</c> if [stretch small images]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.MaxThumbnailDimension">
            <summary>
            Gets the max thumbnail dimension.
            </summary>
            <value>The max thumbnail dimension.</value>
        </member>
        <member name="P:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.StreamInfo">
            <summary>
            Gets the file stream info for generating thumbnail.
            </summary>
            <value>The file stream info.</value>
        </member>
        <member name="P:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.Processed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ImageThumbnailResolveEventArgs"/> was successfully processed.
            </summary>
            <value><c>true</c> if processed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.ImageThumbnailResolveEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message occured during generating image thumbnail.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Mediachase.FileUploader.ImageThumbnailResolveEventHandler">
            <summary>
            Represent an image thumbnail resolve event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The image thumbnail resolve event argument.</param>
        </member>
        <member name="T:Mediachase.FileUploader.Pattern">
            <summary>
            Represents the source validation with the specific mask.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Pattern.Match(System.String,System.String)">
            <summary>
            Validate the source string with the specific mask.
            </summary>
            <param name="Source">The string to validate.</param>
            <param name="Mask">The mask expression.</param>
            <returns>
            <b>true</b> if the Source string are valid; otherwise, <b>false</b>.
            </returns>
            <remarks>
            The static <b>PatternMatch</b> method allow you to validate your string with the specific mask.
            <br/><br/>
            The PatternMatch mask expression allows you to use two basic character types: literal (normal) text characters and metacharacters. 
            Metacharacters used to ? and * characters.<br/><br/>     
            <list type="table">
            	<item>
            		<term><B>?</B></term>
            		<description>Match any simbol</description>
            	</item>
            	<item>
            		<term><B>*</B></term>
            		<description>Zero or more matches</description>
            	</item>
            </list>
            </remarks>
            <example>
            The following code illustrates the use of the PatternMatch method. 
            <code>
            bool bRet1 = McHttpModule.PatternMatch("text","*");		// return true
            bool bRet1 = McHttpModule.PatternMatch("text","*e?t");	// return true
            bool bRet1 = McHttpModule.PatternMatch("text","*exx");	// return false
            bool bRet1 = McHttpModule.PatternMatch("text","t?et");	// return true
            bool bRet1 = McHttpModule.PatternMatch("text","??e?");	// return false
            bool bRet1 = McHttpModule.PatternMatch("text","t*t*");	// return true
            </code>
            </example>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl">
            <summary>
            Represents file upload control that allow users to select a file to upload to the server.
            </summary>
            <remarks>
            <para>
            The <b>FileUploadControl</b> integrates to the page, initializes file upload engine and uses 
            file upload entry-point page to select file(s) (default uploadiframe.aspx). 
            All another controls should be assigned with FileUploadControl via FileUploadControlID property. 
            </para>
            <para>
            The <b>FileUploadControl</b> control does not automatically save file(s) to the server after the user 
            selects the file. The user should use <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadActions"/> control and click the Upload button to 
            begin upload. The <b>FileUploadControl</b> uploads the file(s) to temporary file storage without page 
            submitting. You can upload file and edit related information together.
            </para>
            <para>
            When you submit page the Files property of <b>FileUploadControl</b> control gets uploaded file 
            information collection of <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/>. The <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class represents common 
            information about file (<see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.FileName"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.Size"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.ContentTypeName"/>) and reference to temporary storage 
            (<see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.ProviderName"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.SessionUid"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.StreamUid"/>). The file name that this property returns does not 
            include the path to the file on the client.
            </para>
            <para>
            The code that you write to save the specified file should call the <b>SaveAs</b> method or request file 
            stream from TempFileStorageProvider. <b>SaveAs</b> methods can save the content of a file to a specified 
            path on the server or to a sql table row. 
            </para>
            <para>
            When you call the <b>SaveAs</b> (to local disk) method, you must specify the full path to the directory 
            in which to save the uploaded file. The SaveAs (to local disk)  method copies file from temporary 
            storage to the specified directory. Therefore, the ASP.NET application must have write access 
            to the directory on the server. There are two ways that the application can get write access. 
            You can explicitly grant write access to the account under which the application is running, 
            in the directory in which the uploaded files will be saved. Alternatively, you can increase 
            the level of trust that is granted to the ASP.NET application. To get write access to the 
            executing directory for the application, the application must be granted the AspNetHostingPermission 
            object with the trust level set to the System.Web.AspNetHostingPermissionLevel.Medium value. 
            Increasing the level of trust increases the application's access to resources on the server. 
            Note that this is not a secure approach, because a malicious user who gains control of 
            your application will also be able to run under this higher level of trust. 
            It is a best practice to run an ASP.NET application in the context of a user with the minimum 
            privileges that are required for the application to run. For more information on security in 
            ASP.NET applications, see Basic Security Practices for Web Applications and ASP.NET Trust 
            Levels and Policy Files.
            </para>
            <para>
            When you call the <b>SaveAs</b> (to sql table) method, you must specify the connection string, 
            table name, column name for the column that the current file stream will encapsulate and 
            primary key of row. The SaveAs (to sql table)  method copies file from temporary storage to 
            the specified row column.  Therefore, the sql row should be created and column data type should 
            be image (A variable-length stream of binary data). 
            </para>
            <para>
            Use <b>ReleaseFile</b> or <b>ReleaseAll</b> method to release temporary file(s) after save file(s) to persistent storage.
            </para>
            <para>
            Use Provider property to get current TempFileStorageProvider. Using TempFileStorageProvider you 
            can work with TempFileStorage directly. For example: request file stream and realize save 
            file to custom persistent file storage.
            </para>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadControl"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"></see> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.RenderIFrame(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the I frame.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.ÑopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Ñopies the inputStream to outputStream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.SaveAs(Mediachase.FileUploader.Web.FileStreamInfo,System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="Info">The file stream info.</param>
            <param name="Filename">The filename.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.SaveAs(Mediachase.FileUploader.Web.FileStreamInfo,System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Saves the contents of an uploaded file into MS SQL database.
            </summary>
            <param name="Info">The file stream info.</param>
            <param name="ConnectionString">A sql connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</param>
            <param name="TableName">A table name for the table that the current file stream will encapsulate.</param>
            <param name="ColumnName">A column name for the column that the current file stream will encapsulate.</param>
            <param name="PrimaryKeys">A primary keys collection for the row that the current file stream will encapsulate.</param>
            <example>
            Example saves a new file into MS SQL database named <b>File</b> with FileId:int and Data:image columns.
            <code>
            private void btnSubmit_ServerClick(object sender, System.EventArgs e)
            {
            	if(McFileUp.PostedFile!=null)
            	{
            		int FileId = 0;
                
            		//TODO: Create a new record and assign FileId variable.
                
            		McFileUp.PostedFile.SaveAs("Data source=(local);Initial catalog=TestDB;User Id=sa;Password=","File","Data",new SqlParameter("@FileId",FileId));
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.MoveTo(Mediachase.FileUploader.Web.FileStreamInfo,System.String)">
            <summary>
            Moves a specified file to a new location from the temporary folder.
            </summary>
            <param name="info">The info.</param>
            <param name="destFileName">The name of the saved file.</param>
            <remarks>
            	<para>
            The method moves an incoming file from the temporary folder to a new location.
            If you use a HDD file storage, MoveTo method will increase performance and decrease a disk space requirement.
            </para>
            To invoke <see cref="M:Mediachase.FileUploader.Web.McHttpPostedFile.MoveTo(System.String)"/> method you must turn on an incoming file optimization.
            <para>
            	</para>
            	<para>
            		<b>Note:</b> You can execute MoveTo method only once.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">If incoming file optimization turn off.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.ReleaseFile(Mediachase.FileUploader.Web.FileStreamInfo)">
            <summary>
            Releases the stream.
            </summary>
            <param name="Info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.ReleaseAll">
            <summary>
            Releases the session.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.BlockHeight">
            <summary>
            Gets or sets the height of the block.
            </summary>
            <value>The height of the block.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.SessionUidKey">
            <summary>
            Gets the session uid key.
            </summary>
            <value>The session uid key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.SessionUid">
            <summary>
            Gets or sets the session uid.
            </summary>
            <value>The session uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.FilesNotUploadedQuestion">
            <summary>
            Gets or sets the question if some files are not uploaded before form submitting.
            </summary>
            <value>The question.</value>
            <remarks>
            <para>
            Displays the client confirm message dialog if files are not uploaded before form submitting.
            The user can press <b>Ok</b> button to upload file and submit form again or <b>Cancel</b> button 
            to cancel files selection.
            </para>
            <para>
            Set empty string, to disable question.
            </para>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.TempFileStorageProvider">
            <summary>
            Gets or sets the temp file storage provider.
            </summary>
            <value>The temp file storage provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.ScriptPath">
            <summary>
            Gets or sets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.Files">
            <summary>
            Gets the files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadIFrameControl.HasFiles">
            <summary>
            Gets a value indicating whether this instance has files.
            </summary>
            <value><c>true</c> if this instance has files; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner">
            <summary>
            Represents FileUploadActions designer.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.CompositeControlDesigner">
            <summary>
            Represents CompositeControl designer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.CompositeControlDesigner.GetDesignTimeHtml">
            <summary>
            Retrieves the HTML markup that is used to represent the control at design time.
            </summary>
            <returns>
            The HTML markup used to represent the control at design time.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.CompositeControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            This member overrides <see cref="M:System.Web.UI.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)"/>.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Called when [component changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="ce">The <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionLists">
            <summary>
            Gets the action lists.
            </summary>
            <value>The action lists.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.TemplateGroups">
            <summary>
            Gets the template groups.
            </summary>
            <value>The template groups.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList">
            <summary>
            Represents FileUploadActionsDesigner action list.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.#ctor(Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"></see> objects contained in the list.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItem"></see> array that contains the items in this list.
            </returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.DisplayShow">
            <summary>
            Gets or sets a value indicating whether [display show].
            </summary>
            <value><c>true</c> if [display show]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.ShowActionText">
            <summary>
            Gets or sets the show action text.
            </summary>
            <value>The show action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.DisplayHide">
            <summary>
            Gets or sets a value indicating whether [display hide].
            </summary>
            <value><c>true</c> if [display hide]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.HideActionText">
            <summary>
            Gets or sets the hide action text.
            </summary>
            <value>The hide action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.DisplayUpload">
            <summary>
            Gets or sets a value indicating whether [display upload].
            </summary>
            <value><c>true</c> if [display upload]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.UploadActionText">
            <summary>
            Gets or sets the upload action text.
            </summary>
            <value>The upload action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.DisplayCancel">
            <summary>
            Gets or sets a value indicating whether [display cancel].
            </summary>
            <value><c>true</c> if [display cancel]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadActionsDesigner.ActionList.CancelActionText">
            <summary>
            Gets or sets the cancel action text.
            </summary>
            <value>The cancel action text.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection">
            <summary>
            Represents a file upload control section.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.GetPage(Mediachase.FileUploader.Web.UI.FileUploadControlMode)">
            <summary>
            Gets the page.
            </summary>
            <param name="Mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.EmbeddedModePage">
            <summary>
            Gets or sets the embedded mode page.
            </summary>
            <value>The embedded mode page.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.IFrameModePage">
            <summary>
            Gets or sets the I frame mode page.
            </summary>
            <value>The I frame mode page.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.FileUploadControlSection.PopUpModePage">
            <summary>
            Gets or sets the pop up mode page.
            </summary>
            <value>The pop up mode page.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.Configuration.UploadProgressSection">
            <summary>
            Represents upload progress section.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Web.Configuration.UploadProgressSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.Configuration.UploadProgressSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.ValidateDefaultProvider">
            <summary>
            Validates the default provider.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mediachase.FileUploader.Web.Configuration.UploadProgressSection"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.UploadProgressSection.ProgressStateProviders">
            <summary>
            Gets the temp file storage providers.
            </summary>
            <value>The temp file storage providers.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection">
            <summary>
            Represents temp file storage section.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.#cctor">
            <summary>
            Initializes the <see cref="T:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.ValidateDefaultProvider">
            <summary>
            Validates the default provider.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection"></see> of properties for the element.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.Timeout">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection"/> is timeout.
            </summary>
            <value><c>true</c> if timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.Configuration.TempFileStorageSection.TempFileStorageProviders">
            <summary>
            Gets the temp file storage providers.
            </summary>
            <value>The temp file storage providers.</value>
        </member>
        <member name="T:Mediachase.FileUploader.FileSizeLimitException">
            <summary>
            Represents an exception that is thrown when an upload file size is bigger than the maximal size set in the config file
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileSizeLimitException.#ctor">
            <summary>
            Initializes a new instance of the FileSizeLimitException class
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.FileStreamTicket">
            <summary>
            Represent file stream ticket.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.FileStreamTicket"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.FileStreamTicket"/> class.
            </summary>
            <param name="uid">The uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.ToByteArray">
            <summary>
            Toes the byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.TryParse(System.String,Mediachase.FileUploader.FileStreamTicket@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="Str">The STR.</param>
            <param name="RetVal">The ret val.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.TryParse(System.Byte[],Mediachase.FileUploader.FileStreamTicket@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="Buffer">The buffer.</param>
            <param name="RetVal">The ret val.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.Parse(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="Str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileStreamTicket.Parse(System.Byte[])">
            <summary>
            Parses the specified buffer.
            </summary>
            <param name="Buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="P:Mediachase.FileUploader.FileStreamTicket.Uid">
            <summary>
            Gets the uid.
            </summary>
            <value>The uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileStreamTicket.TicketBufferSize">
            <summary>
            Gets the size of the ticket buffer.
            </summary>
            <value>The size of the ticket buffer.</value>
        </member>
        <member name="T:Mediachase.FileUploader.FileUploaderContext">
            <summary>
            Represent file uploader context.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileUploaderContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.FileUploaderContext"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileUploaderContext.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.FileUploaderContext.CheckUrlIsAllowed(System.String)">
            <summary>
            Checks the URL is allowed.
            </summary>
            <param name="requestPath">The request path.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.FileUploaderContext.PatternMatch(System.String,System.String)">
            <summary>
            Validate the source string with the specific mask.
            </summary>
            <param name="Source">The string to validate.</param>
            <param name="Mask">The mask expression.</param>
            <returns>
            <b>true</b> if the Source string are valid; otherwise, <b>false</b>.
            </returns>
            <remarks>
            The static <b>PatternMatch</b> method allow you to validate your string with the specific mask.
            <br/><br/>
            The PatternMatch mask expression allows you to use two basic character types: literal (normal) text characters and metacharacters. 
            Metacharacters used to ? and * characters.<br/><br/>     
            <list type="table">
            	<item>
            		<term><B>?</B></term>
            		<description>Match any simbol</description>
            	</item>
            	<item>
            		<term><B>*</B></term>
            		<description>Zero or more matches</description>
            	</item>
            </list>
            </remarks>
            <example>
            The following code illustrates the use of the PatternMatch method. 
            <code>
            bool bRet1 = McHttpModule.PatternMatch("text","*");		// return true
            bool bRet1 = McHttpModule.PatternMatch("text","*e?t");	// return true
            bool bRet1 = McHttpModule.PatternMatch("text","*exx");	// return false
            bool bRet1 = McHttpModule.PatternMatch("text","t?et");	// return true
            bool bRet1 = McHttpModule.PatternMatch("text","??e?");	// return false
            bool bRet1 = McHttpModule.PatternMatch("text","t*t*");	// return true
            </code>
            </example>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.OpenStreams">
            <summary>
            Gets the open streams.
            </summary>
            <value>The open streams.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.SessionUid">
            <summary>
            Gets the session uid.
            </summary>
            <value>The session uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.ProgressUid">
            <summary>
            Gets or sets the progress uid.
            </summary>
            <value>The progress uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.SessionType">
            <summary>
            Gets or sets the type of the session.
            </summary>
            <value>The type of the session.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.TempFileStorageProvider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.Current">
            <summary>
            Gets or sets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.SessionUidKey">
            <summary>
            Gets the session uid query string key.
            </summary>
            <value>The session uid key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.TempFileStorageProviderKey">
            <summary>
            Gets the temp file storage provider query string key.
            </summary>
            <value>The temp file storage provider key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.HttpFileMaxSize">
            <summary>
            Gets the size of the HTTP file max.
            </summary>
            <value>The size of the HTTP file max.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.HttpPostMaxSize">
            <summary>
            Gets the size of the HTTP post max.
            </summary>
            <value>The size of the HTTP post max.</value>
        </member>
        <member name="P:Mediachase.FileUploader.FileUploaderContext.HttpPostBufferSize">
            <summary>
            Gets a 64-bit integer that represents the buffer size in bytes, which Mediachase FileUploader will use 
            to process request. You can change this value for better optimization. 
            </summary>
            <value>
            The default value is 655360 bytes.
            </value>
        </member>
        <member name="T:Mediachase.FileUploader.FileUploaderSessionType">
            <summary>
            Indicates file uploader session type.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.FileUploaderSessionType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.FileUploaderSessionType.Global">
            <summary>
            Global session with temporary file storage.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.FileUploaderSessionType.Internal">
            <summary>
            Internal session without temporary file storage.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.InvalidTempStoragePath">
            <summary>
            Represents the exception that is thrown when the section httpFile from Web.Config includes an invalide TempStoragePath attribute.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.InvalidTempStoragePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidTempStoragePath class with a specified file path.
            </summary>
            <param name="FilePath">The file path that equals TempStoragePath attrinute.</param>
        </member>
        <member name="T:Mediachase.FileUploader.McHttpModule">
            <summary>
            The module intercepts and optimizes http requests.
            </summary>
            <remarks>
            This module provides progress and optimized large file upload services. When the McHttpModule module is being used for the web-application, it's allow you to turn-on either Medium or Full mode.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.McHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="application">An HttpApplication that provides access to the methods, properties, and events common to all application objects within an ASP.NET application.</param>
        </member>
        <member name="M:Mediachase.FileUploader.McHttpModule.FinalizeUploadProgress">
            <summary>
            Finalizes the upload progress.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.McHttpModule.CleanupOpenFileStreams">
            <summary>
            Cleanups the open file streams.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.McHttpModule.Dispose">
            <summary>
            Releases the resources used by the McHttpModule.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.McHttpModule.httpPostRedirect">
            <summary>
            Gets a redirect path.
            </summary>
            <remarks>
            If request is larger or other exception is generated, you will be redirected to the page specified in Redirect attribute. 
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.McHttpModule.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>
            Return <b>"Mediachase.FileUploader.McHttpModule"</b> string
            </value>
        </member>
        <member name="T:Mediachase.FileUploader.PostSizeLimitException">
            <summary>
            Represents an exception that is thrown when POST size is bigger than the maximal size set in the config file
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.PostSizeLimitException.#ctor">
            <summary>
            Initializes a new instance of the PostSizeLimitException class
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.SerializationUtil">
            <summary>
            Serialization utility.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SerializationUtil.GetObject``1(System.String)">
            <summary>
            Gets the object.
            </summary>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SerializationUtil.GetObjectFromFile``1(System.String)">
            <summary>
            Gets the object from file.
            </summary>
            <param name="Path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SerializationUtil.GetString``1(``0)">
            <summary>
            Gets the string.
            </summary>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SerializationUtil.SaveObjectToFile``1(System.String,``0)">
            <summary>
            Gets the file.
            </summary>
            <param name="Path">The path.</param>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mediachase.FileUploader.SqlBlobAccess">
            <summary>
            Defines constants for read, write, or read/write access to a text, ntext, or image column.
            </summary>
            <remarks>
            <para>
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </para>
            </remarks>
        </member>
        <member name="F:Mediachase.FileUploader.SqlBlobAccess.Read">
            <summary>
            Read access to the text, ntext, or image column. Data can be read from the column. Combine with Write for read/write access.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.SqlBlobAccess.Write">
            <summary>
            Write access to the text, ntext, or image column. Data can be read from the column. Combine with Read for read/write access.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.SqlBlobAccess.ReadWrite">
            <summary>
            Read and write access to the text, ntext, or image column. Data can be read from and written to the column.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.SqlBlobStream">
             <summary>
             Exposes a Stream around a text, ntext, or image column, supporting both synchronous and asynchronous read and write operations.
             </summary>
             <remarks>
             <para>
             A common practice to reduce the amount of memory used when writing a BLOB value is to write the BLOB to the database in "chunks". 
             The process of writing a BLOB to a database in this way depends on the capabilities of your database.
             </para>
             <para>
             Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.
             </para>
             <para>
             Use the SqlBlobStream class to read, write, create or close text, ntext, or image values from a text, ntext, or image column, as well as to 
             manipulate other file-related operating system handles such as file.
             </para>
             <para>
             SqlBlobStream objects support random access to files using the Seek method. Seek allows the read/write position to be moved to any position within the file. 
             This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current 
             position, or the end of the underlying file, as represented by the three properties of the SeekOrigin class.
             </para>
             <para>
             For an example of using this class, see the Example section below. 
             </para>
             </remarks>
             <example>
             The following SqlBlobStream constructor grants read-only access to an column (SqlBlobAccess.Read).
             <code>
            	string strConnectionString = "Data source=(local);Initial catalog=TestDB;User Id=sa;Password=";
            	string strSqlTable = "Files";
            	string strBLOBColumn = "Data";
            
            	try
            	{
            		using(SqlBlobStream stream = new SqlBlobStream(strConnectionString,
            				strSqlTable,
            				strBLOBColumn,
            				SqlBlobAccess.Read,new SqlParameter("@FileId",12345)))
            		{
            			byte[] tmpBuffer = new byte[1024];
            			int Length = 0;
            			while((Length=stream.Read(buffer,0,1024))==1024)
            			{
            				//TODO: Save tmpBuffer
            			}
            		}
            	}
            	catch(Exception ex)
            	{
            		System.Diagnostics.Trace.WriteLine(ex);
            		throw;
            	}
             </code>
             </example>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.#ctor">
            <summary>
            Initializes a new instance of <b>SqlBlobStream</b> class.
            </summary>
            <remarks>
            Invoke <see cref="M:Mediachase.FileUploader.SqlBlobStream.Open"/> method to open stream.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.#ctor(System.String,System.String,System.String,Mediachase.FileUploader.SqlBlobAccess,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initializes a new instance of <b>SqlBlobStream</b> class for the specified 
            Connection String, Table Name, BLOB Data Column, with the specified read/write permission and Primary Keys.
            </summary>
            <param name="ConnectionString">A sql connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</param>
            <param name="TableName">A table name for the table that the current SqlBlobStream object will encapsulate.</param>
            <param name="BlobDataColumn">A column name for the column that the current SqlBlobStream object will encapsulate.</param>
            <param name="BlobAccess">A SqlBlobAccess constant that gets the CanRead and CanWrite properties of the SqlBlobStream object.</param>
            <param name="PrimaryKeys">A primary keys collection for the row that the current SqlBlobStream object will encapsulate.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.#ctor(System.Data.SqlClient.SqlTransaction,System.String,System.String,Mediachase.FileUploader.SqlBlobAccess,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initializes a new instance of <b>SqlBlobStream</b> class for the specified 
            Transaction, Table Name, BLOB Data Column, with the specified read/write permission and Primary Keys.
            </summary>
            <param name="Transaction">A sql transaction. The default value is an null.</param>
            <param name="TableName">A table name for the table that the current <b>SqlBlobStream</b> object will encapsulate.</param>
            <param name="BlobDataColumn">A column name for the column that the current <b>SqlBlobStream</b> object will encapsulate.</param>
            <param name="BlobAccess">A <b>SqlBlobAccess</b>constant that gets the CanRead and CanWrite properties of the <b>SqlBlobStream</b> object.</param>
            <param name="PrimaryKeys">A primary keys collection for the row that the current <b>SqlBlobStream</b> object will encapsulate.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Open">
            <summary>
            Opens the closed connection.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Init">
            <summary>
            Initializes a new connection.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.OnInit">
            <summary>
            Raises the Init event.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The array to which bytes are written. </param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Flush">
            <summary>
            Overridden. Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overridden. Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.SetLength(System.Int64)">
            <summary>
            Overridden. Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream. </param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the SqlBlobStream.
            </summary>
            <param name="disposing">The disposing flag.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.Close">
            <summary>
            Overridden. Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetDataLengthCommand">
            <summary>
            Gets the sql command returning Data Length.
            </summary>
            <returns>The sql command.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetDataLength">
            <summary>
            Gets the selected element's data length.
            </summary>
            <returns>The data length. (bytes)</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetOpenPointerCommand">
            <summary>
            Gets the sql command returning a text pointer.
            </summary>
            <returns>The sql command.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.OpenPointer">
            <summary>
            Opens the text pointer.
            </summary>
            <returns>The text pointer.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetUpdateTextCommand">
            <summary>
            Gets the sql command updating a blob element.
            </summary>
            <returns>The sql command.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetUpdateTextCommandWithNullValue">
            <summary>
            Gets the sql command inserting a blob element.
            </summary>
            <returns>The sql command.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.UpdateText(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes the array into the BLOB column.
            </summary>
            <param name="buffer">The array to which bytes are written. </param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.UpdateTextCommandWithNullValue(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes the array into the BLOB column.
            </summary>
            <param name="buffer">The array to which bytes are written. </param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.GetReadTextCommand">
            <summary>
            Gets the sql command reading a blob element.
            </summary>
            <returns>The sql command.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlBlobStream.ReadText(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the array from the BLOB column.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.IsOpen">
            <summary>
            Gets the current SqlBlobStream's state.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.Pointer">
            <summary>
            Gets a current pointer to the BLOB value.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.BlobAccess">
            <summary>
            Gets a current read/write permission.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.PrimaryKeys">
            <summary>
            Gets the primary keys collection.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.ConnectionString">
            <summary>
            Gets, sets a sql connection string that includes the source database name, and other parameters needed to establish the initial connection. 
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.Transaction">
            <summary>
            Gets, sets a current sql transaction. 
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.TableName">
            <summary>
            Gets, sets a table name for the table that the current <b>SqlBlobStream</b> object will encapsulate.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.ColumnName">
            <summary>
            Gets, sets a table column for the BLOB value that the current <b>SqlBlobStream</b> object will encapsulate.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.CanRead">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.CanSeek">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.CanWrite">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.Position">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlBlobStream.Length">
            <summary>
            Overridden. Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.SqlContext">
            <summary>
            Represents the sql connection information, either valid connection string for a SqlConnection or SqlTransaction.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.#ctor">
            <summary>
            Initializes a new instance of the SqlContext.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlContext class with valid connection string for a SqlConnection.
            </summary>
            <param name="ConnectionString"></param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.BeginTransaction">
            <summary>
            Begins a new database transaction.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.Rollback">
            <summary>
            Roll back the database transaction from a pending state.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlContext.Dispose(System.Boolean)">
            <summary>
            Disposes the specified clean up managed and native resources.
            </summary>
            <param name="cleanUpManagedAndNativeResources">if set to <c>true</c> [clean up managed and native resources].</param>
        </member>
        <member name="P:Mediachase.FileUploader.SqlContext.ConnectionString">
            <summary>
            Gets or sets the connection string for a SqlConnection.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.SqlContext.Transaction">
            <summary>
            Gets or sets the SqlTransaction.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.Null2DBNull(System.Object)">
            <summary>
            Convert a null reference (<b>Nothing</b> in Visual Basic) into DBNull.Value.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.DBNull2Null(System.Object)">
            <summary>
            Converts DNNull.Value into a null reference (<b>Nothing</b> in Visual Basic).
            </summary>
            <param name="Value">Value from DB</param>
            <returns>Value or null (<b>Nothing</b> in Visual Basic).</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.DBNull2Null(System.Object,System.Object)">
            <summary>
            Converts DNNull.Value into a null reference (<b>Nothing</b> in Visual Basic) or assign default value.
            </summary>
            <param name="Value">Value from DB</param>
            <param name="DefaultValue">Default value</param>
            <returns>Value or null (<b>Nothing</b> in Visual Basic).</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.Serialize(System.Object)">
            <summary>
            This method serializes object into binary storage.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.Deserialize(System.Byte[])">
            <summary>
            This method deserializes object from binary storage.
            </summary>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of SqlParameters tho be added to command</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the SqlCommand to be prepared</param>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScript(Mediachase.FileUploader.SqlContext,System.String)">
            <summary>
            Executes a complex sql script.
            </summary>
            <param name="context">The current context.</param>
            <param name="Script">A sql script.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="context">The current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="context">The current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="context">the current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="context">the current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters"></param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <param name="context">the current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <param name="context">the current context.</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Mediachase.FileUploader.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(Mediachase.FileUploader.SqlContext,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="context">the current context/</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:Mediachase.FileUploader.SqlHelper.SqlConnectionOwnership">
            <summary>
            this enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Mediachase.FileUploader.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Mediachase.FileUploader.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an array of SqlParamters</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="T:Mediachase.FileUploader.SqlParameterList">
            <summary>
            Represents the SqlParameter collection.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.#ctor">
            <summary>
            Initializes a new instance of the SqlParameterList class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.Data.SqlClient.SqlParameter)">
            <summary>
            Adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="param">The SqlParameter to be added to the SqlParameterList</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.String,System.Object)">
            <summary>
            Creates a new SqlParameter by parameterName and value and adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">An Object that is the value of the SqlParameter.</param>
            <returns>A new SqlParameter object.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.String,System.Data.SqlDbType)">
            <summary>
            Creates a new SqlParameter by parameterName and SqlDbType and adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"/> values.</param>
            <returns>A new SqlParameter object.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Creates a new SqlParameter by parameterName, SqlDbType, size and adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <returns>A new SqlParameter object.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a new SqlParameter by parameterName, SqlDbType, value and adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"/> values.</param>
            <param name="value">An Object that is the value of the SqlParameter.</param>
            <returns>A new SqlParameter object.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Add(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates a new SqlParameter by parameterName, SqlDbType, value and adds an SqlParameter to the SqlParameterList.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="value">An Object that is the value of the SqlParameter.</param>
            <returns>A new SqlParameter object.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.Remove(System.Data.SqlClient.SqlParameter)">
            <summary>
            Removes the first occurrence of a specific object from the SqlParameterList.
            </summary>
            <param name="param">The SqlParameter to remove.</param>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.ToArray">
            <summary>
            Copies the elements of the SqlParameterList to a new array.
            </summary>
            <returns>An SqlParameter array containing copies of the elements of the SqlParameterList.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.SqlParameterList.ToArray(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Copies the elements of the SqlParameterList to a new array and adds an additional params.
            </summary>
            <param name="addParams">An additioanl SqlParameter items or null (<b>Nothing</b> in Visual Basic).</param>
            <returns>An SqlParameter array containing copies of the elements of the SqlParameterList.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.SqlParameterList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.UploadCanceled">
            <summary>
            Represents an exception that is thrown when an upload is canceled
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.UploadCanceled.#ctor">
            <summary>
            Initializes a new instance of the UploadCanceled class
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.InProcessUploadProgressProvider">
            <summary>
            Represents in-process upload progress provider. 
            </summary>
            <remarks>
            <para>
            The <b>InProcessUploadProgressProvider</b> class  is derived from the <see cref="T:Mediachase.FileUploader.Web.UploadProgressProvider"/>
            and is the default upload progress provider for Mediachase FileUploader.Net.
            The <b>InProcessUploadProgressProvider</b> class stores progress information in to the current ASP.NET process. 
            </para>
            <para>
            The following code example shows an example of an web.config file section with installed InProcessUploadProgressProvider:
            <code>
              &lt;uploadProgress defaultProvider="McInProcessProgressStateProvider" enabled="true" timeout="10"&gt;
                &lt;providers&gt;
                    &lt;add name="McInProcessProgressStateProvider" 
                        type="Mediachase.FileUploader.Web.InProcessUploadProgressProvider, Mediachase.FileUploader" 
                        description="Default Upload Progress Provider" /&gt;
               &lt;/providers&gt;
              &lt;/uploadProgress&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UploadProgressProvider">
            <summary>
            Provides a common base class for all upload progress providers, and a way for developers to 
            implement custom upload progress providers that can be used 
            with the Mediachase FileUploader.NET infrastructure as persistent stores 
            for upload progress.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UploadProgressProvider"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.GetInfo(System.Guid)">
            <summary>
            Gets the upload progress information by ProgressUid.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <returns>UploadProgressInfo if progress info is exist, otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.Update(Mediachase.FileUploader.Web.UploadProgressInfo)">
            <summary>
            Updates the upload progress information.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.UpdateBytesReceived(System.Guid,System.Int32)">
            <summary>
            Updates the bytes received.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <param name="BytesReceived">The bytes received.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProvider.SetUploadError(System.Guid,System.String)">
            <summary>
            Sets the upload error.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <param name="ErrorMessage">The error message.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.StartCleaunUpTimer">
            <summary>
            Starts the cleaun up timer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.Cleanup(System.Object)">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.GetInfo(System.Guid)">
            <summary>
            Gets the info.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.Update(Mediachase.FileUploader.Web.UploadProgressInfo)">
            <summary>
            Updates the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.InProcessUploadProgressProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider">
            <summary>
            Represents local disk temporary file storage.
            </summary>
            <remarks>
            <para>
            The <b>LocalDiskTempFileStorageProvider</b> class  is derived from the <see cref="T:Mediachase.FileUploader.Web.TempFileStorageProvider"/>
            and is the default emporary file storage provider for Mediachase FileUploader.Net.
            The <b>LocalDiskTempFileStorageProvider</b> class saves temporary file to folder. 
            </para>
            <para>
            Use <b>tempStoragePath</b> attribute to define temporary folder. Default value is ASP.NET temporary folder. 
            Check that you have to set write rights for specified path for ASP.NET account. Following steps are required to set write rights for temp folder:
            <list type="bullet">
                <item><description>Open folder in Windows Explorer.</description></item>
                <item><description>Right click folder and go to properties.</description></item>
                <item><description>In properties dialog select Security tave and click Add.</description></item>
                <item><description>Select ASPNET account and click Add.</description></item>
                <item><description>Select aspnet_wp account (computername\ASPNET) account and the check Allow checkbox for read/write rights.</description></item>
                <item><description>Clear all other Allow or check Deny boxes.</description></item>
                <item><description>Accept changes and close dialog.</description></item>
            </list>
            </para>
            <para>
            The following code example shows an example of an web.config file section with installed LocalDiskTempFileStorageProvider:
            <code>
            &lt;tempFileStorage defaultProvider="McLocalDiskTempFileStorageProvider" enabled="true" timeout="60"&gt;
              &lt;providers&gt;
                &lt;add name="McLocalDiskTempFileStorageProvider" 
                     type="Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider, Mediachase.FileUploader" 
                     description="" 
                     tempStoragePath="%TEMP%" /&gt;
              &lt;/providers&gt;
            &lt;/tempFileStorage&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:Mediachase.FileUploader.Web.TempFileStorageProvider">
            <summary>
            Provides a common base class for all temp file storage providers, and a way for developers to 
            implement custom temporary file storage providers that can be used 
            with the Mediachase FileUploader.NET infrastructure as persistent stores 
            for temporary file.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.TempFileStorageProvider"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.CreateStream(System.Guid,System.String,System.String,System.Guid@)">
            <summary>
            Creates a new temporary file stream.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <param name="FileName">Name of the file.</param>
            <param name="ContentType">Type of the content.</param>
            <param name="StreamUid">The stream unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.CompleteStream(System.Guid)">
            <summary>
            Completes the stream.
            </summary>
            <param name="StreamUid">The stream unique identifier.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.GetFileStreamInfo(System.Guid)">
            <summary>
            Gets the stream information by StreamUid.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.GetStream(System.Guid)">
            <summary>
            Gets the stream by StreamUid.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.ReleaseStream(System.Guid)">
            <summary>
            Releases the stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.GetFileStreamInfos(System.Guid)">
            <summary>
            Gets the stream information list by SessionUid.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProvider.ReleaseSession(System.Guid)">
            <summary>
            Releases the session.
            </summary>
            <param name="SessionUid">The session uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SessionCache_Init">
            <summary>
            Sessions the cache_ init.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SessionCache_AddItem(Mediachase.FileUploader.Web.FileStreamInfo)">
            <summary>
            Sessions the cache_ add item.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SessionCache_GetItemList(System.Guid)">
            <summary>
            Sessions the cache_ get item list.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SessionCache_RemoveStream(System.Guid)">
            <summary>
            Sessions the cache_ remove stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SessionCache_Remove(System.Guid)">
            <summary>
            Sessions the cache_ remove.
            </summary>
            <param name="SessionUid">The session uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.StartCleaunUpTimer">
            <summary>
            Starts the cleaun up timer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SafeStreamDelete(System.Guid)">
            <summary>
            Safes the stream delete.
            </summary>
            <param name="StreamUid">The stream uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.SafeFileDelete(System.String)">
            <summary>
            Safes the file delete.
            </summary>
            <param name="Path">The path.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.Cleanup(System.Object)">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.CleanupSessionCache">
            <summary>
            Cleanups the session cache.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.CleanupTempStorage(System.String,System.Boolean)">
            <summary>
            Cleanups the temp storage.
            </summary>
            <param name="tmpDirectoryPath">The TMP directory path.</param>
            <param name="InitMode">if set to <c>true</c> [init mode].</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetLocalDiskPath(System.String)">
            <summary>
            Gets the local disk path.
            </summary>
            <param name="FileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetStreamFilePath(System.Guid)">
            <summary>
            Gets the stream file local disk path.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetInfoFilePath(System.Guid)">
            <summary>
            Gets the info file local disk path.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.CreateStream(System.Guid,System.String,System.String,System.Guid@)">
            <summary>
            Creates the stream.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <param name="FileName">Name of the file.</param>
            <param name="ContentType">Type of the content.</param>
            <param name="StreamUid">The stream unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.CompleteStream(System.Guid)">
            <summary>
            Completes the stream.
            </summary>
            <param name="StreamUid">The stream unique identifier.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetFileStreamInfo(System.Guid)">
            <summary>
            Gets the stream info.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetFileStreamInfos(System.Guid)">
            <summary>
            Gets the stream info.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.GetStream(System.Guid)">
            <summary>
            Gets the stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.ReleaseStream(System.Guid)">
            <summary>
            Releases the stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.ReleaseSession(System.Guid)">
            <summary>
            Releases the stream.
            </summary>
            <param name="SessionUid"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.LocalDiskTempFileStorageProvider.TempStoragePath">
            <summary>
            Gets or sets the temp storage path.
            </summary>
            <value>The temp storage path.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.McHttpMultipartContentDynamicParser">
            <summary>
            Summary description for HttpMultipartContentTemplateParser.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpMultipartContentDynamicParser.GetNextLine">
            <summary>
            Extract a new line
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mediachase.FileUploader.Web.McHttpPostedFile">
            <summary>
            Provides a way to access individual files that have been uploaded by a client.
            </summary>
            <remarks>
            The McHttpPostedFile class is similar to standard ASP .NET class <see cref="T:System.Web.HttpPostedFile"/>. But he recognizes an active marker.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.#ctor(System.Web.HttpPostedFile)">
            <summary>
            Initializes a new instance of the McHttpPostedFile class to the value indicated by a <see cref="T:System.Web.HttpPostedFile"/> object.
            </summary>
            <param name="httpPostedFile">The <see cref="T:System.Web.HttpPostedFile"/> object.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.InitializeStream">
            <summary>
            Initializes the stream.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="filename">The name of the saved file.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.WriteTo(System.IO.Stream)">
            <summary>
            Copies InputStream to the output stream.
            </summary>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.SaveAs(System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Saves the contents of an uploaded file into MS SQL database.
            </summary>
            <param name="ConnectionString">A sql connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</param>
            <param name="TableName">A table name for the table that the current file stream will encapsulate.</param>
            <param name="ColumnName">A column name for the column that the current file stream will encapsulate.</param>
            <param name="PrimaryKeys">A primary keys collection for the row that the current file stream will encapsulate.</param>
            <example>
            Example saves a new file into MS SQL database named <b>File</b> with FileId:int and Data:image columns.
            <code>
            private void btnSubmit_ServerClick(object sender, System.EventArgs e)
            {
            	if(McFileUp.PostedFile!=null)
            	{
            		int FileId = 0;
                
            		//TODO: Create a new record and assign FileId variable.
                
            		McFileUp.PostedFile.SaveAs("Data source=(local);Initial catalog=TestDB;User Id=sa;Password=","File","Data",new SqlParameter("@FileId",FileId));
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location from the temporary folder.
            </summary>
            <param name="destFileName">The name of the saved file.</param>
            <remarks>
            <para>
            The method moves an incoming file from the temporary folder to a new location. 
            If you use a HDD file storage, MoveTo method will increase performance and decrease a disk space requirement.
            </para>
            To invoke <see cref="M:Mediachase.FileUploader.Web.McHttpPostedFile.MoveTo(System.String)"/> method you must turn on an incoming file optimization. 
            <para>
            </para>
            <para>
            <b>Note:</b> You can execute MoveTo method only once.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">If incoming file optimization turn off.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.McHttpPostedFile.Dispose">
            <summary>
            Releases the resources used by the McHttpPostedFile.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.FileName">
            <summary>
            Gets the file name of the file on the client's computer (for example "Test.txt").
            </summary>
            <value>
            The name of the client's file.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.FullyQualifiedFileName">
            <summary>
            Gets the fully-qualified name of the file on the client's computer (for example "C:\MyFiles\Test.txt").
            </summary>
            <value>
            The fully-qualified name of the client's file.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.ContentType">
            <summary>
            Gets the MIME content type of a file sent by a client.
            </summary>
            <value>
            The MIME content type of the uploaded file.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.ContentLength">
            <summary>
            Gets the size in bytes of an uploaded file.
            </summary>
            <value>
            The length of the file.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.InputStream">
            <summary>
            Gets a Stream object which points to an uploaded file to prepare for reading the contents of the file.
            </summary>
            <value>
            A <see cref="T:System.IO.Stream"/> pointing to a file.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.McHttpPostedFile.UseExtrenalStream">
            <summary>
            Gets a value indicating whether [use extrenal stream].
            </summary>
            <value><c>true</c> if [use extrenal stream]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.SqlUploadProgressProvider">
            <summary>
            Represents Sql upload progress provider.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.Cleanup(System.Object)">
            <summary>
            Cleanups the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.StartCleaunUpTimer">
            <summary>
            Starts the cleaun up timer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.GetInfo(System.Guid)">
            <summary>
            Gets the upload progress information by ProgressUid.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <returns>
            UploadProgressInfo if progress info is exist, otherwise <b>null</b>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.Update(Mediachase.FileUploader.Web.UploadProgressInfo)">
            <summary>
            Updates the upload progress information.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlUploadProgressProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.SqlUploadProgressProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.ClientBinderProviderType">
            <summary>
            Specifies client binder provider type.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UI.ClientBinderProviderType.Json">
            <summary>
            Json Model
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UI.ClientBinderProviderType.Xml">
            <summary>
            Xml Model
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner">
            <summary>
            Represents FileUploadProgress designer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Called when [component changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="ce">The <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionLists">
            <summary>
            Gets the action list collection for the control designer.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"></see> object that contains the <see cref="T:System.ComponentModel.Design.DesignerActionList"></see> items for the control designer.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.TemplateGroups">
            <summary>
            Gets a collection of template groups, each containing one or more template definitions.
            </summary>
            <value></value>
            <returns>A collection of <see cref="T:System.Web.UI.Design.TemplateGroup"></see> objects. The default is an empty <see cref="T:System.Web.UI.Design.TemplateGroupCollection"></see>.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList">
            <summary>
            Represents FileUploadProgressDesigner action list.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList.#ctor(Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList.GetSortedActionItems">
            <summary>
            Gets the sorted action items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList.BarBackColor">
            <summary>
            Gets or sets the color of the bar back.
            </summary>
            <value>The color of the bar back.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.FileUploadProgressDesigner.ActionList.BarBorderColor">
            <summary>
            Gets or sets the color of the bar border.
            </summary>
            <value>The color of the bar border.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner">
            <summary>
            Represents UploadedFileList designer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Called when [component changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="ce">The <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.ActionLists">
            <summary>
            Gets the action list collection for the control designer.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"></see> object that contains the <see cref="T:System.ComponentModel.Design.DesignerActionList"></see> items for the control designer.</returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.TemplateGroups">
            <summary>
            Gets a collection of template groups, each containing one or more template definitions.
            </summary>
            <value></value>
            <returns>A collection of <see cref="T:System.Web.UI.Design.TemplateGroup"></see> objects. The default is an empty <see cref="T:System.Web.UI.Design.TemplateGroupCollection"></see>.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.ActionList">
            <summary>
            Represents FileViewControlDesigner Action List.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.ActionList.#ctor(Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.ActionList"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.UploadedFileListDesigner.ActionList.GetSortedActionItems">
            <summary>
            Gets the sorted action items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.UploadedFileList">
            <summary>
            Shows Temporary uploaded file list control.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.UploadedFileList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.UploadedFileList"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.UploadedFileList.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.UploadedFileList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"></see> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.UploadedFileList.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.DeleteCommandTemplate">
            <summary>
            Gets or sets the delete command template.
            </summary>
            <value>The delete command template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.ClientBinderProvider">
            <summary>
            Client Data Binding Provider
            ClientBinderProviderType.JSON By Default
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.FileUploadControlID">
            <summary>
            Gets or sets the file upload control ID.
            </summary>
            <value>The file upload control ID.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.ScriptPath">
            <summary>
            Gets or sets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.ShowThumbnail">
            <summary>
            Gets or sets a value indicating whether to show image thumbnail in front of uploaded file name.
            </summary>
            <value><c>true</c> if [show image thumbnail]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.MaxThumbnailDimension">
            <summary>
            Gets or sets the maximum thumbnail dimension.
            </summary>
            <value>The maximum thumbnail dimension.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.UploadedFileList.StretchSmallImages">
            <summary>
            Gets or sets a value indicating whether to stretch small images if max image dimension less than MaxThumbnailDimension.
            </summary>
            <value>
            	<c>true</c> if [stretch small images]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.FileUploadActions">
            <summary>
            Shows file upload command buttons: Show, Hide, Upload, Cancel. 
            </summary>
            <remarks>
            <para>
            The FileUploadActions control visualizes FileUploadControl command. 
            </para>
            <para>
            The User should press Show 
            command to show file upload entry-point. The user specifies the file(s) to upload by entering the 
            full path to the file on the local computer or selects the file(s) by clicking the Browse button, 
            and then locating it in the Choose File dialog box. While the file(s) are uploading to the server 
            the user can cancel upload by the calling Cancel command. The user hides upload panel by clicking 
            the Hide button. 
            </para>
            <para>
            Use <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.ShowActionText"/>, <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.HideActionText"/>, <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.UploadActionText"/> and <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.CancelActionText"/> properties to set 
            command text. Default values are <i>Show</i>, <i>Hide</i>, <i>Upload</i>, <i>Cancel</i>.
            </para>
            <para>
            Use <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayShow"/>, <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayHide"/>, <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayUpload"/> and <see cref="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayCancel"/> properties to show (hide) commands.
            </para>
            <para>
            To override command view you can use command view template. Available templates described in the following table can be used to customize the appearance of the list.
            <list type="table">
                <listheader>
                    <term>Template name</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>ShowTextTemplate</term>
                    <description>Defines the content and layout of show command.</description>
                </item>
                <item>
                    <term>HideTextTemplate</term>
                    <description>Defines the content and layout of hide command.</description>
                </item>
                <item>
                    <term>UploadTextTemplate</term>
                    <description>Defines the content and layout of upload command.</description>
                </item>
                <item>
                    <term>CancelTextTemplate</term>
                    <description>Defines the content and layout of cancel command.</description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadActions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadActions"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadActions.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadActions.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"></see> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadActions.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.ShowTextTemplate">
            <summary>
            Gets or sets the show text template.
            </summary>
            <value>The show text template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.HideTextTemplate">
            <summary>
            Gets or sets the hide text template.
            </summary>
            <value>The hide text template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.UploadTextTemplate">
            <summary>
            Gets or sets the upload text template.
            </summary>
            <value>The upload text template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.CancelTextTemplate">
            <summary>
            Gets or sets the cancel text template.
            </summary>
            <value>The cancel text template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.ShowActionText">
            <summary>
            Gets or sets the show action text.
            </summary>
            <value>The show action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.HideActionText">
            <summary>
            Gets or sets the hide action text.
            </summary>
            <value>The hide action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.UploadActionText">
            <summary>
            Gets or sets the upload action text.
            </summary>
            <value>The upload action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.CancelActionText">
            <summary>
            Gets or sets the cancel action text.
            </summary>
            <value>The cancel action text.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayShow">
            <summary>
            Gets or sets a value indicating whether [display show].
            </summary>
            <value><c>true</c> if [display show]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayHide">
            <summary>
            Gets or sets a value indicating whether [display hide].
            </summary>
            <value><c>true</c> if [display hide]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayUpload">
            <summary>
            Gets or sets a value indicating whether [display upload].
            </summary>
            <value><c>true</c> if [display upload]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.DisplayCancel">
            <summary>
            Gets or sets a value indicating whether [display cancel].
            </summary>
            <value><c>true</c> if [display cancel]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.FileUploadControlID">
            <summary>
            Gets or sets the file upload control ID.
            </summary>
            <value>The file upload control ID.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadActions.ScriptPath">
            <summary>
            Gets or sets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.FileUploadControl">
            <summary>
            Represents file upload control that allow users to select a file to upload to the server.
            </summary>
            <remarks>
            <para>
            The <b>FileUploadControl</b> integrates to the page, initializes file upload engine and uses 
            file upload entry-point page to select file(s) (default uploadiframe.aspx). 
            All another controls should be assigned with FileUploadControl via FileUploadControlID property. 
            </para>
            <para>
            The <b>FileUploadControl</b> control does not automatically save file(s) to the server after the user 
            selects the file. The user should use <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadActions"/> control and click the Upload button to 
            begin upload. The <b>FileUploadControl</b> uploads the file(s) to temporary file storage without page 
            submitting. You can upload file and edit related information together.
            </para>
            <para>
            When you submit page the Files property of <b>FileUploadControl</b> control gets uploaded file 
            information collection of <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/>. The <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class represents common 
            information about file (<see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.FileName"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.Size"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.ContentTypeName"/>) and reference to temporary storage 
            (<see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.ProviderName"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.SessionUid"/>, <see cref="P:Mediachase.FileUploader.Web.FileStreamInfo.StreamUid"/>). The file name that this property returns does not 
            include the path to the file on the client.
            </para>
            <para>
            The code that you write to save the specified file should call the <b>SaveAs</b> method or request file 
            stream from TempFileStorageProvider. <b>SaveAs</b> methods can save the content of a file to a specified 
            path on the server or to a sql table row. 
            </para>
            <para>
            When you call the <b>SaveAs</b> (to local disk) method, you must specify the full path to the directory 
            in which to save the uploaded file. The SaveAs (to local disk)  method copies file from temporary 
            storage to the specified directory. Therefore, the ASP.NET application must have write access 
            to the directory on the server. There are two ways that the application can get write access. 
            You can explicitly grant write access to the account under which the application is running, 
            in the directory in which the uploaded files will be saved. Alternatively, you can increase 
            the level of trust that is granted to the ASP.NET application. To get write access to the 
            executing directory for the application, the application must be granted the AspNetHostingPermission 
            object with the trust level set to the System.Web.AspNetHostingPermissionLevel.Medium value. 
            Increasing the level of trust increases the application's access to resources on the server. 
            Note that this is not a secure approach, because a malicious user who gains control of 
            your application will also be able to run under this higher level of trust. 
            It is a best practice to run an ASP.NET application in the context of a user with the minimum 
            privileges that are required for the application to run. For more information on security in 
            ASP.NET applications, see Basic Security Practices for Web Applications and ASP.NET Trust 
            Levels and Policy Files.
            </para>
            <para>
            When you call the <b>SaveAs</b> (to sql table) method, you must specify the connection string, 
            table name, column name for the column that the current file stream will encapsulate and 
            primary key of row. The SaveAs (to sql table)  method copies file from temporary storage to 
            the specified row column.  Therefore, the sql row should be created and column data type should 
            be image (A variable-length stream of binary data). 
            </para>
            <para>
            Use <b>ReleaseFile</b> or <b>ReleaseAll</b> method to release temporary file(s) after save file(s) to persistent storage.
            </para>
            <para>
            Use Provider property to get current TempFileStorageProvider. Using TempFileStorageProvider you 
            can work with TempFileStorage directly. For example: request file stream and realize save 
            file to custom persistent file storage.
            </para>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadControl"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"></see> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.RenderEmbedded(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the embedded.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.RenderIFrame(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the I frame.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.ÑopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Ñopies the inputStream to outputStream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.SaveAs(Mediachase.FileUploader.Web.FileStreamInfo,System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="Info">The file stream info.</param>
            <param name="Filename">The filename.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.SaveAs(Mediachase.FileUploader.Web.FileStreamInfo,System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Saves the contents of an uploaded file into MS SQL database.
            </summary>
            <param name="Info">The file stream info.</param>
            <param name="ConnectionString">A sql connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</param>
            <param name="TableName">A table name for the table that the current file stream will encapsulate.</param>
            <param name="ColumnName">A column name for the column that the current file stream will encapsulate.</param>
            <param name="PrimaryKeys">A primary keys collection for the row that the current file stream will encapsulate.</param>
            <example>
            Example saves a new file into MS SQL database named <b>File</b> with FileId:int and Data:image columns.
            <code>
            private void btnSubmit_ServerClick(object sender, System.EventArgs e)
            {
            	if(McFileUp.PostedFile!=null)
            	{
            		int FileId = 0;
                
            		//TODO: Create a new record and assign FileId variable.
                
            		McFileUp.PostedFile.SaveAs("Data source=(local);Initial catalog=TestDB;User Id=sa;Password=","File","Data",new SqlParameter("@FileId",FileId));
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.MoveTo(Mediachase.FileUploader.Web.FileStreamInfo,System.String)">
            <summary>
            Moves a specified file to a new location from the temporary folder.
            </summary>
            <param name="info">The info.</param>
            <param name="destFileName">The name of the saved file.</param>
            <remarks>
            	<para>
            The method moves an incoming file from the temporary folder to a new location.
            If you use a HDD file storage, MoveTo method will increase performance and decrease a disk space requirement.
            </para>
            To invoke <see cref="M:Mediachase.FileUploader.Web.McHttpPostedFile.MoveTo(System.String)"/> method you must turn on an incoming file optimization.
            <para>
            	</para>
            	<para>
            		<b>Note:</b> You can execute MoveTo method only once.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">If incoming file optimization turn off.</exception>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.ReleaseFile(Mediachase.FileUploader.Web.FileStreamInfo)">
            <summary>
            Releases the stream.
            </summary>
            <param name="Info">The info.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadControl.ReleaseAll">
            <summary>
            Releases the session.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.ModeType">
            <summary>
            Gets or sets the type of the mode.
            </summary>
            <value>The type of the mode.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.BlockHeight">
            <summary>
            Gets or sets the height of the block.
            </summary>
            <value>The height of the block.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.SessionUidKey">
            <summary>
            Gets the session uid key.
            </summary>
            <value>The session uid key.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.SessionUid">
            <summary>
            Gets or sets the session uid.
            </summary>
            <value>The session uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.FilesNotUploadedQuestion">
            <summary>
            Gets or sets the question if some files are not uploaded before form submitting.
            </summary>
            <value>The question.</value>
            <remarks>
            <para>
            Displays the client confirm message dialog if files are not uploaded before form submitting.
            The user can press <b>Ok</b> button to upload file and submit form again or <b>Cancel</b> button 
            to cancel files selection.
            </para>
            <para>
            Set empty string, to disable question.
            </para>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.TempFileStorageProvider">
            <summary>
            Gets or sets the temp file storage provider.
            </summary>
            <value>The temp file storage provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.ScriptPath">
            <summary>
            Gets or sets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.Files">
            <summary>
            Gets the files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadControl.HasFiles">
            <summary>
            Gets a value indicating whether this instance has files.
            </summary>
            <value><c>true</c> if this instance has files; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.FileUploadControlMode">
            <summary>
            Specifies file upload control mode.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UI.FileUploadControlMode.Embedded">
            <summary>
            Use embedded file uploader  to upload file.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UI.FileUploadControlMode.IFrame">
            <summary>
            Use i-frame to upload file. (<b>Default</b>)
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UI.FileUploadControlMode.PopUp">
            <summary>
            Popup file uploader to upload file.
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.FileUploadProgress">
            <summary>
            Visualizes file upload process. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.FileUploadProgress"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.CreateContainerChildControls(Mediachase.FileUploader.Web.UI.TemplateDefaultContainer,System.String)">
            <summary>
            Creates the container child controls.
            </summary>
            <param name="container">The container.</param>
            <param name="sType">Type of the s.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"></see> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.FileUploadProgress.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.FileUploadControlID">
            <summary>
            Gets or sets the file upload control ID.
            </summary>
            <value>The file upload control ID.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.ScriptPath">
            <summary>
            Gets or sets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.ProgressBarStyle">
            <summary>
            Gets or sets the progress bar style.
            </summary>
            <value>The progress bar style.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.ProgressBarBoundaryStyle">
            <summary>
            Gets or sets the progress bar boundary style.
            </summary>
            <value>The progress bar boundary style.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.InfoTemplate">
            <summary>
            Gets or sets the info template.
            </summary>
            <value>The info template.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.FileUploadProgress.WaitTemplate">
            <summary>
            Gets or sets the wait template.
            </summary>
            <value>The wait template.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer">
            <summary>
            Represents a default template container.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer"/> class.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadFileName">
            <summary>
            Gets or sets the name of the upload file.
            </summary>
            <value>The name of the upload file.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadBytesReceived">
            <summary>
            Gets or sets the upload bytes received.
            </summary>
            <value>The upload bytes received.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadBytesTotal">
            <summary>
            Gets or sets the upload bytes total.
            </summary>
            <value>The upload bytes total.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadEstimatedTime">
            <summary>
            Gets or sets the upload estimated time.
            </summary>
            <value>The upload estimated time.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadTimeRemaining">
            <summary>
            Gets or sets the upload time remaining.
            </summary>
            <value>The upload time remaining.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadStartUpload">
            <summary>
            Gets or sets the start upload.
            </summary>
            <value>The start upload.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadEndUpload">
            <summary>
            Gets or sets the end upload.
            </summary>
            <value>The end upload.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadResult">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadLastModified">
            <summary>
            Gets or sets the last modified.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadProgress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.TemplateDefaultContainer.UploadTransferRate">
            <summary>
            Gets or sets the transfer rate.
            </summary>
            <value>The transfer rate.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UploadProgressInfo">
            <summary>
            Represents Upload Progress Information.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UploadProgressInfo"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressInfo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UploadProgressInfo"/> class.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressInfo.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UploadProgressInfo"/> class.
            </summary>
            <param name="ProgressUid">The progress uid.</param>
            <param name="BytesTotal">The bytes total.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.ProgressUid">
            <summary>
            Gets or sets the progress uid.
            </summary>
            <value>The progress uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.BytesReceived">
            <summary>
            Gets or sets the bytes received.
            </summary>
            <value>The bytes received.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.BytesTotal">
            <summary>
            Gets or sets the bytes total.
            </summary>
            <value>The bytes total.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.StartUpload">
            <summary>
            Gets or sets the start upload.
            </summary>
            <value>The start upload.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.EndUpload">
            <summary>
            Gets or sets the end upload.
            </summary>
            <value>The end upload.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.LastModified">
            <summary>
            Gets or sets the last modified.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.CurrentFileName">
            <summary>
            Gets or sets the name of the current file.
            </summary>
            <value>The name of the current file.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.Progress">
            <summary>
            Returns a value that represent the percent complete.
            </summary>
            <remarks>
            This value calculates from the two fields BytesReceived and BytesTotal.<br/><br/>
            <b>Progress = (this.BytesReceived * 100.0) /this.BytesTotal</b>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.TransferRate">
            <summary>
            Returns a value that represent the approximate transfer rate in byte/sec. 
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.EstimatedTime">
            <summary>
            Returns a value that represent the approximate time for an upload. 
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressInfo.TimeRemaining">
            <summary>
            Returns a value that represent the approximate time remaining for an upload. 
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UploadProgress">
            <summary>
            The UploadProgress class is an entry point of the progress structure, which is provided by one or more upload progress providers.  
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgress.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgress.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgress.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Mediachase.FileUploader.Web.UploadProgress"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgress.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgress.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UploadProgressProviderCollection">
            <summary>
            Represents collection of upload progress provider.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UploadProgressProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the collection.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">provider is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProviderCollection.Add(Mediachase.FileUploader.Web.UploadProgressProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UploadProgressProviderCollection.AddArray(Mediachase.FileUploader.Web.UploadProgressProvider[])">
            <summary>
            Adds the array.
            </summary>
            <param name="providerArray">The provider array.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UploadProgressProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mediachase.FileUploader.Web.UploadProgressProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UploadResult">
            <summary>
            Specifies the upload result.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UploadResult.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UploadResult.Succeeded">
            <summary>
            The upload is Succeeded. 
            </summary>
        </member>
        <member name="F:Mediachase.FileUploader.Web.UploadResult.Faulted">
            <summary>
            The upload is Faulted. 
            </summary>
        </member>
        <member name="T:Mediachase.FileUploader.Web.SqlTempFileStorageProvider">
            <summary>
            Represents sql table temporary file storage.
            </summary>
            <remarks>
            <para>
            The <b>SqlTempFileStorageProvider</b> class  is derived from the <see cref="T:Mediachase.FileUploader.Web.TempFileStorageProvider"/>
            and is the default emporary file storage provider for Mediachase FileUploader.Net.
            The <b>SqlTempFileStorageProvider</b> class saves temporary file to folder. 
            </para>
            <para>
            <b>Installation:</b>
            <para>
            <list type="bullet">
                <item><description>Create a new database.</description></item>
                <item><description>Apply <b>CreateSqlTempStorage.sql</b> sql script. It creates mcfu_UploadedFiles table and storage procedures.</description></item>
                <item><description>Add McSqlTempFileStorageProvider into tempFileStorage section.</description></item>
                <item><description>Set McSqlTempFileStorageProvider as default provider.</description></item>
            </list>
            </para>
            </para>
            <para>
            Use <b>connectionString</b> attribute to define connection to temporary file storage database.
            </para>
            <para>
            The following code example shows an example of an web.config file section with installed SqlTempFileStorageProvider:
            <code>
            &lt;tempFileStorage defaultProvider="McSqlTempFileStorageProvider" enabled="true" timeout="60"&gt;
              &lt;providers&gt;
                &lt;add name="McSqlTempFileStorageProvider" 
                     type="Mediachase.FileUploader.Web.SqlTempFileStorageProvider, Mediachase.FileUploader" 
                     description="" 
                     connectionString="Data Source=(local); Initial Catalog=mcFileUploaderTempStorage;Integrated Security=SSPI;" /&gt;
              &lt;/providers&gt;
            &lt;/tempFileStorage&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.StartCleanUpTimer">
            <summary>
            Starts the clean up timer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.CleanUp(System.Object)">
            <summary>
            Cleans the up.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.CreateStream(System.Guid,System.String,System.String,System.Guid@)">
            <summary>
            Creates the stream.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <param name="FileName">Name of the file.</param>
            <param name="ContentType">Type of the content.</param>
            <param name="StreamUid">The stream unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.CompleteStream(System.Guid)">
            <summary>
            Completes the stream.
            </summary>
            <param name="StreamUid">The stream unique identifier.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.GetFileStreamInfo(System.Guid)">
            <summary>
            Gets the stream info.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.GetFileStreamInfos(System.Guid)">
            <summary>
            Gets the stream info.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.GetStream(System.Guid)">
            <summary>
            Gets the stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.ReleaseStream(System.Guid)">
            <summary>
            Releases the stream.
            </summary>
            <param name="StreamUid">The stream uid.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.ReleaseSession(System.Guid)">
            <summary>
            Releases the stream.
            </summary>
            <param name="SessionUid"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.SqlTempFileStorageProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.TempFileStorage">
            <summary>
            The TempFileStorage class is an entry point of the temp file storages, which is provided by one or more temp file storage providers.  
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorage.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.TempFileStorage.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.TempFileStorage.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Mediachase.FileUploader.Web.TempFileStorage"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.TempFileStorage.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.TempFileStorage.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.TempFileStorageProviderCollection">
            <summary>
            Represents collection of temp file storage provider.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.TempFileStorageProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the collection.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of provider is less than 1.</exception>
            <exception cref="T:System.ArgumentNullException">provider is null.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProviderCollection.Add(Mediachase.FileUploader.Web.TempFileStorageProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.TempFileStorageProviderCollection.AddArray(Mediachase.FileUploader.Web.TempFileStorageProvider[])">
            <summary>
            Adds the array.
            </summary>
            <param name="providerArray">The provider array.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.TempFileStorageProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mediachase.FileUploader.Web.TempFileStorageProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner">
            <summary>
            Represents McHtmlInputFile designer.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Called when the associated control changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ce">A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionLists">
            <summary>
            Gets the action list collection for the control designer.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"></see> object that contains the <see cref="T:System.ComponentModel.Design.DesignerActionList"></see> items for the control designer.</returns>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList">
            <summary>
            Represents McHtmlInputFileDesigner action list.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList.#ctor(Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"></see> objects contained in the list.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItem"></see> array that contains the items in this list.
            </returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList.MultiFileUpload">
            <summary>
            Gets or sets a value indicating whether [multi file upload].
            </summary>
            <value><c>true</c> if [multi file upload]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.Design.McHtmlInputFileDesigner.ActionList.MultiFileCount">
            <summary>
            Gets or sets the multi file count.
            </summary>
            <value>The multi file count.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.UI.McHtmlInputFile">
            <summary>
            Control that allows to simplify and optimize file uploading using web browser to your ASP.NET Web Server.
            </summary>
            <remarks>
            <para>
            You should use the McHtmlInputFile server control instead of <see cref="T:System.Web.UI.HtmlControls.HtmlInputFile"/>. 	
            Use the McHtmlInputFile server control to handle uploading binary or text files from a browser client to the server. 
            File upload works with Microsoft Internet Explorer version 3.02 or later.
            </para>
            <note>
            The Enctype property of an HtmlForm must be set to "multipart/form-data" for this control to work properly
            </note>
            <para>
            To specify the file to upload, enter the fully path to the file (for example, "C:\MyFiles\Test.txt") in the text box 
            of the control. You can also select the file by clicking the <b>Browse</b> button and then locating it in the <b>Choose file</b> dialog box.
            </para>
            <para>
            The McHtmlInputFile control does not have a built-in way to post back to the server. To upload the file to the server, use the <see cref="M:Mediachase.FileUploader.Web.McHttpPostedFile.SaveAs(System.String)"/> 
            method of the <see cref="T:Mediachase.FileUploader.Web.McHttpPostedFile"/> contained in the PostedFile property. This operation is usually 
            done in an event-handling method, such as for a button click.
            </para>
            <para>
            To simplify development Mediachase.FileUploader.Web.UI.McHtmlFileInput supports full Design-Time view in 
            Visual Studio.NET. You can add it into Visual Studio.NET toolbar and then add it to your webform using 
            drag-and-drop. You can change properties and control will adjust in real-time it's view to the one that will 
            be displayed on web page. 
            </para>
            <note>
            To add the control to the Visual Studio .NET toolbox, please do the following: 
            <list type="bullet">
            	<item><description>Open a Web Form (aspx page) in design mode.</description></item>
            	<item><description>Right-click on the toolbox.</description></item>
            	<item><description>Select <b>Customize Toolbox.</b></description></item>
            	<item><description>Select the <b>.NET Framework Components</b> tab.</description></item>
            	<item><description>Click <b>Browse...</b>.</description></item>
            	<item><description>Find <b>Mediachase.FileUploader.dll</b> on your local machine, and select <b>Open</b>.</description></item>
            </list>
            Now when you add the control to your web projects, Visual Studio will automatically add the Mediachase.FileUploader.dll assembly 
            to your web application's bin directory. To deploy the application, all you need to do is copy the content to the live server. 
            </note>
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.#ctor">
            <summary>
            Initializes a new instance of the McHtmlInputFile class.
            </summary>
            <remarks>
            Use this constructor to create and initialize a new instance of the McHtmlInputFile class.
            </remarks>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.CreateControlCollection">
            <summary>
            This member overrides <see cref="M:System.Web.UI.Control.CreateControlCollection">Control.CreateControlCollection</see>
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            This member overrides <see cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">System.Web.UI.WebControls.WebControl.AddAttributesToRender</see>
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            This member overrides <see cref="M:System.Web.UI.WebControls.WebControl.Render(System.Web.UI.HtmlTextWriter)">System.Web.UI.WebControls.WebControl.Render</see>
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.CreateChildControls">
            <summary>
            This member overrides <see cref="M:System.Web.UI.Control.CreateChildControls">System.Web.UI.Control.CreateChildControls</see>
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.UI.McHtmlInputFile.OnPreRender(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)">System.Web.UI.Control.OnPreRender</see>
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.RenderedNameAttribute">
            <summary>
            Gets the unique, hierarchically-qualified name.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.ViewStateIgnoresCase">
            <summary>
            This member overrides <see cref="P:System.Web.UI.Control.ViewStateIgnoresCase">Control.ViewStateIgnoresCase</see>.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.PostedFile">
            <summary>
            Gets access to the uploaded file specified by a client.
            </summary>
            <value>
            A <see cref="T:Mediachase.FileUploader.Web.UI.McHtmlInputFile"/> that accesses the file to be uploaded.
            </value>
            <remarks>Browser security restrictions prevent this value from being maintained across multiple requests.</remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.Accept">
            <summary>
            Gets or sets a comma-separated list of MIME encodings used to constrain the file types the user can select.
            </summary>
            <value>
            The comma-separated list of MIME encodings.
            </value>
            <remarks>
            Use this property to specify the file type that can be uploaded to the server. For example, to restrict the selection to images, set this property to "image/*".
            <note>
            Support for this property is browser dependent. Check with your browser to determine if it supports this property.
            </note>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.MaxLength">
            <summary>
            Gets or sets the maximum length of the file path for the file to upload from the client computer.
            </summary>
            <value>
            The maximum length of the file path.
            </value>
            <remarks>
            Use this property to specify a limit for the number of characters that can be entered for the path to the file to upload.
            <note>
            Support for this property is browser dependent. Check with your browser to determine if it supports this property.
            </note>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.Size">
            <summary>
            Gets or sets the width of the text box in which the file path is entered.
            </summary>
            <value>
            The width of the file-path text box.
            </value>
            <remarks>
            Use this property to specify the width of the text box in which to enter the file path.
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.Value">
            <summary>
            Gets the full path of the file on the client's computer.
            </summary>
            <value>
            The full path of the client's file.
            </value>
            <remarks>
            The Value property retrieves the full path of the file on the client's computer (for example "C:\MyFiles\Test.txt"). This is useful when you need to know where the file is stored on the computer submitting the file. This property is also commonly used to determine the original file name. To get the original file name, parse the value of this property.
            <note>
            The Value property is <b>read-only</b>. If you attempt to assign a value to this property, a <see cref="T:System.NotSupportedException">System.NotSupportedException</see> is thrown.
            </note>
            </remarks>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.HasFile">
            <summary>
            Gets a value indicating whether the control contains a file.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.PostedFiles">
            <summary>
            Gets access to the uploaded files specified by a client.
            </summary>
            <value>
            A <see cref="T:Mediachase.FileUploader.Web.UI.McHtmlInputFile"/> collection that accesses the files to be uploaded.
            </value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.MultiFileUpload">
            <summary>
            Gets or sets an ability to upload multiple files at once.
            </summary>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.MultiFileCount">
            <summary>
            Gets or sets the count of the multi-file that can be sent at the same time. 0 - is unlimited
            </summary>
            <value>The size of the multi file.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.UI.McHtmlInputFile.Separator">
            <summary>
            Gets or sets the multi-file html separator.
            </summary>
            <value>The separator.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.FileStreamInfo">
            <summary>
            Represents an information about uploaded file stream.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.FileStreamInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.FileStreamInfo.#ctor(System.Guid,System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <param name="FileName">Name of the file.</param>
            <param name="StreamUid">The stream uid.</param>
            <param name="Size">The size.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.FileStreamInfo.#ctor(System.Guid,System.String,System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class.
            </summary>
            <param name="SessionUid">The session uid.</param>
            <param name="FileName">Name of the file.</param>
            <param name="ContentType">Type of the content.</param>
            <param name="StreamUid">The stream uid.</param>
            <param name="Size">The size.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.FileStreamInfo.#ctor(System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mediachase.FileUploader.Web.FileStreamInfo"/> class.
            </summary>
            <param name="FileName">Name of the file.</param>
            <param name="StreamUid">The stream uid.</param>
            <param name="Size">The size.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.FileStreamInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.SessionType">
            <summary>
            Gets or sets the type of the session.
            </summary>
            <value>The type of the session.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.SessionUid">
            <summary>
            Gets or sets the session uid.
            </summary>
            <value>The session uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.StreamUid">
            <summary>
            Gets or sets the stream uid.
            </summary>
            <value>The stream uid.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.FileName">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.Created">
            <summary>
            Gets or sets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:Mediachase.FileUploader.Web.FileStreamInfo.ContentTypeName">
            <summary>
            Gets or sets the name of the content type.
            </summary>
            <value>The name of the content type.</value>
        </member>
        <member name="T:Mediachase.FileUploader.Web.Util.ClientScript">
            <summary>
            Represents static methods to emit fileuploader client-side script blocks in the Page.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterShowProgressWindow(System.Web.UI.Page,System.String)">
            <summary>
            Registers the show progress window.
            </summary>
            <param name="OwnerPage">The owner page.</param>
            <param name="ProgressPagePath">The progress page path.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterShowProgressWindow(System.Web.UI.Page,System.String,System.Int32,System.Int32)">
            <summary>
            Registers the show progress window.
            </summary>
            <param name="OwnerPage">The owner page.</param>
            <param name="ProgressPagePath">The progress page path.</param>
            <param name="Width">The width.</param>
            <param name="Height">The height.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterShowProgressWindow(System.Web.UI.Page,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Registers the show progress window.
            </summary>
            <param name="OwnerPage">The owner page.</param>
            <param name="ProgressPagePath">The progress page path.</param>
            <param name="Top">The top.</param>
            <param name="Left">The left.</param>
            <param name="Width">The width.</param>
            <param name="Height">The height.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterShowProgressWindow(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers the show progress window.
            </summary>
            <param name="OwnerPage">The owner page.</param>
            <param name="ProgressPagePath">The progress page path.</param>
            <param name="ProgressPageFeatures">The progress page features.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterMultiUpload(Mediachase.FileUploader.Web.UI.McHtmlInputFile)">
            <summary>
            Adds ability to upload multiple files at once.
            </summary>
            <param name="Control">Original control.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterMultiUpload(Mediachase.FileUploader.Web.UI.McHtmlInputFile,System.String)">
            <summary>
            Adds ability to upload multiple files at once.
            </summary>
            <param name="Control">The control.</param>
            <param name="HtmlSeparator">The HTML separator.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterMultiUpload(Mediachase.FileUploader.Web.UI.McHtmlInputFile,System.String,System.Int32)">
            <summary>
            Adds ability to upload multiple files at once.
            </summary>
            <param name="Control">Original control.</param>
            <param name="HtmlSeparator">The HTML separator.</param>
            <param name="MaxCount">The max count.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterScript(System.Web.UI.Page,System.Type,System.String,System.String,System.String)">
            <summary>
            Registers the script.
            </summary>
            <param name="Page">The page.</param>
            <param name="ControlType">Type of the control.</param>
            <param name="ScriptPath">The script path.</param>
            <param name="Key">The key.</param>
            <param name="Name">The name.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.Boolean)">
            <summary>
            Registers the script.
            </summary>
            <param name="Page">The page.</param>
            <param name="ControlType">Type of the control.</param>
            <param name="ScriptBlock">The script block.</param>
            <param name="addTags">The addTags.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ClientScript.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String)">
            <summary>
            Registers the script.
            </summary>
            <param name="Page">The page.</param>
            <param name="ControlType">Type of the control.</param>
            <param name="ScriptBlock">The script block.</param>
        </member>
        <member name="T:Mediachase.FileUploader.Web.Util.CommonHelper">
            <summary>
            Represents utilities.
            </summary>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.GetAbsolutePath(System.String)">
            <summary>
            Gets the absolute path.
            </summary>
            <param name="xsPath">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.GetClientIdByServerId(System.Web.UI.Page,System.String)">
            <summary>
            Gets the client id by server id.
            </summary>
            <param name="page">The page.</param>
            <param name="serverId">The server id.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.GetClientIdByServerId(System.Web.UI.Control,System.String)">
            <summary>
            Gets clientId by serverId. Searches for control with specified serverId within control itself and its Children.
            </summary>
            <param name="control"></param>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.GetClientIdByServerId2(System.Web.UI.Control,System.String)">
            <summary>
            Calls GetClientIdByServerId(Control control, string serverId) if control.NamingContainer!=null, otherwise calls GetClientIdByServerId(Page page, string serverId).
            </summary>
            <param name="control"></param>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.GetIdFromCollections(System.Web.UI.ControlCollection,System.String)">
            <summary>
            Gets the id from collections.
            </summary>
            <param name="controls">The controls.</param>
            <param name="serverId">The server id.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.FormatBytes(System.Int64)">
            <summary>
            Formats the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.CommonHelper.ThreeNonZeroDigits(System.Double)">
            <summary>
            Threes the non zero digits.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ScriptManagerDetector.TryInit">
            <summary>
            Tries the init.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ScriptManagerDetector.IsInstalled(System.Web.UI.Page)">
            <summary>
            Determines whether this instance is installed.
            </summary>
            <returns>
            	<c>true</c> if this instance is installed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ScriptManagerDetector.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)">
            <summary>
            Registers the client script include.
            </summary>
            <param name="page">The page.</param>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ScriptManagerDetector.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers the startup client script.
            </summary>
            <param name="page">The page.</param>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="script">The script.</param>
            <param name="addTags">The addTags.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.ScriptManagerDetector.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)">
            <summary>
            Registers the submit client script.
            </summary>
            <param name="page">The page.</param>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="script">The script.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetExpression(System.Object,System.String)">
            <summary>
            Evaluate expression in context of given object. can contains indexers
            </summary>
            <param name="data"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetExpression(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the expression.
            </summary>
            <param name="data">The data.</param>
            <param name="expression">The expression.</param>
            <param name="binding_flags">The binding_flags.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetProperty(System.Object,System.String)">
            <summary>
            Get Property value for given object by property Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetProperty(System.Object,System.Reflection.BindingFlags,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="obj">The obj.</param>
            <param name="binding_flags">The binding_flags.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetField(System.Object,System.String)">
            <summary>
            Get Field value for given object by field Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetField(System.Object,System.Reflection.BindingFlags,System.String)">
            <summary>
            Gets the field.
            </summary>
            <param name="obj">The obj.</param>
            <param name="binding_flags">The binding_flags.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetData(System.Object,System.String)">
            <summary>
            Get Field or Property value ( auto detect what is it ) for given object by Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetData(System.Object,System.Reflection.BindingFlags,System.String)">
            <summary>
            Gets the data.
            </summary>
            <param name="obj">The obj.</param>
            <param name="binding_flags">The binding_flags.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.GetStaticData(System.Type,System.String)">
            <summary>
            Get value of static Field or Property for given Type( not need create some instance of object )
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetExpression(System.Object,System.Object,System.String)">
            <summary>
             Find Member by Evaluate expression in context of given object and set his value. cannot contains indexers yet
            </summary>
            <param name="data"></param>
            <param name="value"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetExpression(System.Object,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Sets the expression.
            </summary>
            <param name="data">The data.</param>
            <param name="value">The value.</param>
            <param name="expression">The expression.</param>
            <param name="binding_flags">The binding_flags.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set Property value for given object by property Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetField(System.Object,System.String,System.Object)">
            <summary>
            Get Field value for given object by field Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetData(System.Object,System.String,System.Object)">
            <summary>
            Get Field or Property value ( auto detect what is it ) for given object by Name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.SetStaticData(System.Type,System.String,System.Object)">
            <summary>
             Set value of static Field or Property for given Type( not need create some instance of object )
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call specific method of given object with parametrs
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="argv"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.CallStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Call static method for given Type
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <param name="argv"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.CallMethodWithSignature(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Call method with specifed signature. Need if object has two or more object with same name
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="signature"></param>
            <param name="argv"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.CreateObject(System.String,System.String,System.Object[])">
            <summary>
            Create specified object 
            </summary>
            <param name="assembly_name"></param>
            <param name="type_name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.IsEqualByProperties(System.Object,System.Object,System.String[])">
            <summary>
            Return true if object equals by specifed list of properties.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="property_names"></param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindMember(System.Object,System.String,System.Type[],System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Finds the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="member_name">The member_name.</param>
            <param name="signature">The signature.</param>
            <param name="mt">The mt.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.CompareSignature(System.Type[],System.Reflection.ParameterInfo[])">
            <summary>
            Compares the signature.
            </summary>
            <param name="signature">The signature.</param>
            <param name="pi">The pi.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindMember(System.Object,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Finds the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="member_name">The member_name.</param>
            <param name="mt">The mt.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Finds the member.
            </summary>
            <param name="t">The t.</param>
            <param name="member_name">The member_name.</param>
            <param name="mt">The mt.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindMembers(System.Object,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Finds the members.
            </summary>
            <param name="obj">The obj.</param>
            <param name="member_name">The member_name.</param>
            <param name="mt">The mt.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindMembers(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Finds the members.
            </summary>
            <param name="ti">The ti.</param>
            <param name="member_name">The member_name.</param>
            <param name="mt">The mt.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindProperty(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Finds the property.
            </summary>
            <param name="obj">The obj.</param>
            <param name="member_name">The member_name.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.FindField(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Finds the field.
            </summary>
            <param name="obj">The obj.</param>
            <param name="member_name">The member_name.</param>
            <param name="bf">The bf.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="mi">The mi.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.GetType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:Mediachase.FileUploader.Web.Util.UntypedObject.Details.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
    </members>
</doc>

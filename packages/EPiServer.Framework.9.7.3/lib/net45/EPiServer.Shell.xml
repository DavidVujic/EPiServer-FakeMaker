<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Shell</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Shell.UI.DojoConfig">
            <summary>
            Configuration settings used when initiating the Dojo Toolkit on the client.
            </summary>
            <remarks>These settings will be serialized to JSON.</remarks>
        </member>
        <member name="M:EPiServer.Shell.UI.DojoConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UI.DojoConfig"/> class.
            </summary>
        </member>
        <member name="E:EPiServer.Shell.UI.DojoConfig.Serializing">
            <summary>
            Exposes the BeforeSerializing event which is raised before the DojoConfig instance is serialized.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UI.DojoConfig.OnSerializing">
            <summary>
            Called before the DojoConfig instance is serialized.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.IsDebug">
            <summary>
            Gets or sets whether we are in debug mode.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Locale">
            <summary>
            Gets or sets the localization to use.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.ParseOnLoad">
            <summary>
            Gets or sets whether the config should be parsed on load.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Async">
            <summary>
            Gets or sets whether the config should be async.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Paths">
            <summary>
            Gets or sets a collection of modules and their paths.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Aliases">
            <summary>
            Gets a collection of aliases
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Packages">
            <summary>
            Gets a collection of packages
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.DeferredInstrumentation">
            <summary>
            Gets if dojo should instrument the deferreds
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.UseDeferredInstrumentation">
            <summary>
            If DeferredInstrumtation is true report unhandled rejections
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.ServerTime">
            <summary>
             Gets current datetime of server
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.IoPublish">
            <summary>
            Gets or sets whether to publish IO.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UI.DojoConfig.Has">
            <summary>
            Gets the has configuration options.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UI.DojoConfig.Serialize">
            <summary>
            Serializes this configuration to a JSON formatted string.
            </summary>
            <returns>A JSON formatted string of the Dojo configuration.</returns>
        </member>
        <member name="M:EPiServer.Shell.IEnumerableExtensions.FirstOfType``1(System.Collections.IEnumerable)">
            <summary>
            Returns the first elment of the specified type in the list
            </summary>
            <typeparam name="TType">The type to return.</typeparam>
            <param name="list">The list to operate on.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.IUIDescriptorInitializer">
            <summary>
            Interface for UI descriptor initializers
            </summary>
        </member>
        <member name="M:EPiServer.Shell.IUIDescriptorInitializer.Initialize(EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Initializes the specified registry.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:EPiServer.Shell.LicensedExtendedDataService">
            <summary>
            Integrates the modules concept into the licensing system
            </summary>
        </member>
        <member name="M:EPiServer.Shell.LicensedExtendedDataService.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.LicensedExtendedDataService"/> class.
            <param name="serviceLocator"></param>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.LicensedExtendedDataService.Get">
            <summary>
            Get licensed extended data such as modules name
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Paths">
            <summary>
            Helps resolve path's to resources in EPiServer Shell.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Paths.ShellModuleName">
            <summary>
            The name of the shell framework module. This constant is used internally.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Paths.ProtectedRootPath">
            <summary>
            The root path of protected modules
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Paths.PublicRootPath">
            <summary>
            The root path of public modules
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToShellResource(System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a master page or config file
            </summary>
            <param name="shellModuleRelativeResourcePath">A path relative to the shell framework module's root path, e.g. "ClientResources/packages.config"</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToShellClientResource(System.String)">
            <summary>
            Resolves the path of EPiServer Framework client resource such as a javascript file or css
            </summary>
            <param name="shellModuleRelativeClientResourcePath">A path relative to the shell framework module's root path, e.g. "ClientResources/EPiJQuery.js"</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToResource(System.String,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a master page or config file
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="moduleRelativeResourcePath">A path relative to the given module's root path, e.g. "ClientResources/packages.config"</param>
            <returns>A resolved path.</returns>
            <remarks>If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToResource(System.Reflection.Assembly,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a master page or config file
            </summary>
            <param name="moduleAssembly">The module assembly.</param>
            <param name="moduleRelativeResourcePath">A path relative to the given module's root path, e.g. "ClientResources/packages.config"</param>
            <returns>
            A resolved path.
            </returns>
            <remarks>
            If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.
            </remarks>
            <exception cref="T:System.ArgumentException">Shell module cannot be found by moduleAssembly.</exception>
            <exception cref="T:System.ArgumentNullException">Exception is thrown when moduleAssembly is null.</exception>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToResource(System.Type,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a master page or config file
            </summary>
            <param name="typeInModuleAssembly">Type contained in module assembly.</param>
            <param name="moduleRelativeResourcePath">A path relative to the given module's root path, e.g. "ClientResources/packages.config"</param>
            <returns>
            A resolved path.
            </returns>
            <exception cref="T:System.ArgumentException">Shell module cannot be found by moduleAssembly.</exception>
            <exception cref="T:System.ArgumentNullException">Exception is thrown when specified typeInModuleAssembly is null.</exception>
            <remarks>
            If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToClientResource(System.String,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a javascript file or css
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="moduleRelativeClientResourcePath">A path relative to the given module's root path, e.g. "Content/MyStyle.css"</param>
            <returns>A resolved path.</returns>
            <remarks>If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToClientResource(System.Reflection.Assembly,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a javascript file or css
            </summary>
            <param name="moduleAssembly">The module assembly.</param>
            <param name="moduleRelativeClientResourcePath">A path relative to the given module's root path, e.g. "Content/MyStyle.css"</param>
            <returns>
            A resolved path.
            </returns>
            <remarks>
            If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.
            </remarks>
            <exception cref="T:System.ArgumentException">Shell module cannot be found by moduleAssembly.</exception>
            <exception cref="T:System.ArgumentNullException">Exception is thrown when moduleAssembly is null.</exception>
        </member>
        <member name="M:EPiServer.Shell.Paths.ToClientResource(System.Type,System.String)">
            <summary>
            Resolves the path of EPiServer Framework module resource such as a javascript file or css
            </summary>
            <param name="typeInModuleAssembly">The type in module assembly.</param>
            <param name="moduleRelativeClientResourcePath">A path relative to the given module's root path, e.g. "Content/MyStyle.css"</param>
            <returns>
            A resolved path.
            </returns>
            <exception cref="T:System.ArgumentException">Shell module cannot be found by moduleAssembly.</exception>
            <exception cref="T:System.ArgumentNullException">Exception is thrown when typeInModuleAssembly is null.</exception>
            <remarks>
            If moduleRelativePath is an absolute or app-relative url it will be returned without beeing combined to the module's resource path.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Paths.TryToAbsolute(System.String@)">
            <summary>
            Tries to absolute an url with some error handling that should help in unit test scenarios.
            </summary>
            <param name="path">The path.</param>
            <returns>True if the path was modified.</returns>
        </member>
        <member name="T:EPiServer.Shell.ShellInitialization">
            <summary>
            Shell Initialization module
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
            <summary>
            Configures EPiServer Shell on the IoC container
            </summary>
            <param name="context">The context which is configured.</param>
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.InitializeHttpEvents(System.Web.HttpApplication)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the module into an uninitialized state.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:EPiServer.Shell.ShellInitialization.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ShellPlugInArea">
            <summary>
            Shell plug-in areas
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ShellPlugInArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ShellPlugInArea"/> class.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ShellPlugInArea.DashboardDefaultTab">
            <summary>
            The default tab for the dashboard view.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ShellPlugInArea.DashboardRoot">
            <summary>
            The root node for the dashboard. Use this node to plug in new tabs.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.UIDescriptor`1">
            <summary>
            Generic version of ui descriptor to simplify setup.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor`1"/> class.
            </summary>
            <param name="iconClass">Represents CSS class name which will be used to display an icon for the type.</param>
        </member>
        <member name="T:EPiServer.Shell.UIDescriptor">
            <summary>
            Represents a UI descriptor for a content type (which could be page, block, etc...), which will be used to render UI for a specific content.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor" /> class.
            </summary>
            <param name="forType">The type to describe.</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor"/> class.
            </summary>
            <param name="forType">The described CLR type.</param>
            <param name="iconClass">Represents CSS class name which will be used to display an icon for the type.</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor"/> class.
            </summary>
            <param name="forType">The described CLR type.</param>
            <param name="iconClass">Represents CSS class name which will be used to display an icon for the type.</param>
            <param name="dndTypes">An array with the drag and drop types that the item type represents.</param>
            <remarks>Only use this overload if you want to specifically register custom drag and drop types.</remarks>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewConfiguration},EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor"/> class.
            </summary>
            <param name="forType">The described CLR type.</param>
            <param name="iconClass">Represents CSS class name which will be used to display an icon for the type.</param>
            <param name="dndTypes">An array with the drag and drop types that the item type represents.</param>
            <param name="viewConfigurations">All view configurations</param>
            <param name="localizationService">The localization service to use for getting localizations</param>
            <remarks>Only use this overload if you want to specifically register custom drag and drop types.</remarks>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewConfiguration},EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptor"/> class.
            </summary>
            <param name="forType">The described CLR type.</param>
            <param name="typeIdentifier">Type's identifier. Used to replace CLR type's fully qualified name.</param>
            <param name="iconClass">Represents CSS class name which will be used to display an icon for the type.</param>
            <param name="dndTypes">An array with the drag and drop types that the item type represents.</param>
            <param name="viewConfigurations">All view configurations</param>
            <param name="localizationService">The localization service to use for getting localizations</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.ExtractAvailableViews(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewConfiguration})">
            <summary>
            Extracts the available views from view configurations.
            </summary>
            <param name="viewConfigurations">The view configurations.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptor.AddDisabledView(System.String)">
            <summary>
            Add a view to the list of disabled views.
            </summary>
            <param name="viewName"></param>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.ForType">
            <summary>
            Gets or sets connected CLR type.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.TypeIdentifier">
            <summary>
            Type's identifier. Used to replace CLR type's fully qualified name.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.BaseTypeIdentifier">
            <summary>
            Gets the base type identifier, that is: the closest parent in the inheritance chain.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.IconClass">
            <summary>
            Represents CSS class name which will be used to display an icon for the type.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.ContainerTypeIdentifier">
            <summary>
            Represents the class that parent object in the hierarchy haves, for instance "episerver.core.pagedata".
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.ContainerTypes">
            <summary>
            Represents the types that can be parents to this type. For instance a ContentFolder for the BlockData type.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.MainWidgetType">
            <summary>
            Defines the main widget that is responsible for showing the user interface when an instance of this type is loaded in the client context.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.DisabledViews">
            <summary>
            Gets or sets the disabled views.
            </summary>
            <value>
            The disabled views.
            </value>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.DndTypes">
            <summary>
            An array with the drag and drop types that the item type represents.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.LanguageKey">
            <summary>
            The unique key for the child node to the contenttypes node.
            </summary>
            <remarks>
            This value will default to the class name with lower case.
            Set this property to the path of the XML element that contains the 
            label and description elements in one of your localization providers.
            (for instance an xml file in the /lang directory.) 
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.DefaultView">
            <summary>
            Gets or sets the default view for this UI descriptor.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.CreateView">
            <summary>
            Gets or sets the view to be shown when creating content for this UI descriptor.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.PublishView">
            <summary>
            Gets or sets the view to be shown after publishing content for this UI descriptor.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.AvailableViews">
            <summary>
            Gets or sets the available views.
            </summary>
            <value>
            The available views.
            </value>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.CommandIconClass">
            <summary>
            Gets or sets the icon class for commands for this type.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.SortKey">
            <summary>
            Gets or sets the sort column.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.IsPrimaryType">
            <summary>
            Flag indicates creating content is primary type or not
            </summary>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptor.BaseTypes">
            <summary>
            Gets or sets a list of the base types and interfaces that the item type directly inherited from.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.UIDescriptorProvider">
            <summary>
            Base class for providing <see cref="T:EPiServer.Shell.UIDescriptor"/>s to the <see cref="T:EPiServer.Shell.UIDescriptorRegistry"/> 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorProvider.GetDescriptors">
            <summary>
            Implement this method to provide custom ui descriptors
            </summary>
            <returns>A collection of ui descriptors</returns>
        </member>
        <member name="T:EPiServer.Shell.UIDescriptorRegistrationAttribute">
            <summary>
            Represents attributes configuring plugin services for registering ContentUIDescriptor
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistrationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptorRegistrationAttribute"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.UIDescriptorRegistry">
            <summary>
            Registry that holds all ui descriptors for entity types.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.#ctor(EPiServer.Shell.UIDescriptor[],EPiServer.Shell.IUIDescriptorInitializer[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptorRegistry"/> class.
            </summary>
            <param name="uiDescriptors">The UI descriptors.</param>
            <param name="initializers">The UI descriptor initializers</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.#ctor(EPiServer.Shell.UIDescriptor[],EPiServer.Shell.IUIDescriptorInitializer[],EPiServer.Shell.UIDescriptorProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.UIDescriptorRegistry"/> class.
            </summary>
            <param name="uiDescriptors">The UI descriptors.</param>
            <param name="initializers">The UI descriptor initializers</param>
            <param name="descriptorProviders">A collection of providers queried for additiona descriptors</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.GetTypeIdentifiers(System.Type)">
            <summary>
            Gets the type identifiers.
            </summary>
            <param name="type">The type to find .</param>
            <returns>A sorted list with the most specific matching type first.</returns>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.GetDescriptorsForType(System.Type)">
            <summary>
            Gets a list of ui descriptors registered for a type and its base types.
            </summary>
            <param name="type"></param>
            <returns>A sorted list with the most specific matching type first.</returns>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.HasMatchedTypeIdentifier(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether any ui descriptor matching the type has any matching type identifiers in the provided collection.
            </summary>
            <param name="type">The type to get ui descriptors for.</param>
            <param name="typeIdentifiers">A collection of type identifier for matching.</param>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.GetAllRegisteredUIDescriptors">
            <summary>
            Gets all registered UI descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.Add(EPiServer.Shell.UIDescriptor)">
            <summary>
            Adds the specified descriptor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <remarks>This method is not thread safe. Implement <see cref="T:EPiServer.Shell.UIDescriptorProvider"/> instead to add ui descriptors.</remarks>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.GetDescriptorsForType(System.Type,System.Collections.Generic.IEnumerable{EPiServer.Shell.UIDescriptor})">
            <summary>
            Gets an ordered list of any descriptors for a particular type or any of its base types.
            The list is ordered by inheritance with the most specific first.
            </summary>
            <param name="type">The type to look for</param>
            <param name="descriptors">A collection of descriptors to search</param>
            <returns>An ordered list of matching descriptors</returns>
        </member>
        <member name="P:EPiServer.Shell.UIDescriptorRegistry.UIDescriptors">
            <summary>
            A collection of the <see cref="T:EPiServer.Shell.UIDescriptor"/>s registered for available content types
            </summary>
        </member>
        <member name="M:EPiServer.Shell.UIDescriptorRegistry.TypeComparer.Compare(EPiServer.Shell.UIDescriptor,EPiServer.Shell.UIDescriptor)">
            <summary>
            Compares two UIDescriptors based on their connected type. X is greater than Y if X's instances are assignable from Y's instances
            </summary>
            <param name="x">The first UIDescriptor instance.</param>
            <param name="y">The second UIDescriptor instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Validate">
            <summary>
            Helper class for method parameter validation.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Validate.RequiredParameter(System.String,System.Object)">
            <summary>
            Helper method to validate parameters. Throws ArgumentNullException
            when the parameter is null.
            </summary>
            <param name="parameterName">The name of the parameter to check.</param>
            <param name="parameter">The parameter instance to check.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewConfiguration`1">
            <summary>
            Class to define configuration of sparrowhawk(R) view for specific type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewConfiguration`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewConfiguration`1"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewConfiguration">
            <summary>
            Class to define configuration of sparrowhawk(R) view for specific type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewConfiguration.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewConfiguration"/> class.
            </summary>
            <param name="forType">For type.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.ForType">
            <summary>
            Gets or sets for type.
            </summary>
            <value>
            For type.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.Key">
            <summary>
            Gets the key that's used to find this view configuration.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.LanguagePath">
            <summary>
            Gets or sets the language path.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.IconClass">
            <summary>
            Gets or sets the icon class.
            </summary>
            <value>
            The icon class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.HideFromViewMenu">
            <summary>
            Gets or sets the show on view menu.
            </summary>
            <value>
            The show on view menu.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.ViewType">
            <summary>
            Gets the full identifier for the widget used to represent the view, for instance "mynamespace/widget/widgettype".
            </summary>
            <value>
            The type of the view.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.ControllerType">
            <summary>
            Gets the full identifier for the controller used to represent the view, for instance "mynamespace/widget/widgettype".
            </summary>
            <value>
            The type of the controller.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.SortOrder">
            <summary>
            Used to sort items that implements this interface. Trumphed by <see cref="P:EPiServer.Shell.ViewConfiguration.Category"/> which is used to
            group the items (items without category will be considered a group too). Sort order will be respected within
            the group and the groups will be ordered by the lowest sort order within each group.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.Category">
            <summary>
            Used to group items that implements this interface.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewConfiguration.PlugInAreas">
            <summary>
            Gets or sets the plug-in areas where you can select the view.
            </summary>
            <value>
            The plug-in areas.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Composition.AttributeDiscovery.GetAttributedTypes``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Type[])">
            <summary>
            Probes the assemblies for classes decorated with an attribute.
            </summary>
            <param name="assemblies">The list of assemblies to search</param>
            <param name="typeScannerRepository">The global type scanner repository</param>
            <param name="classBaseTypes">The base types required</param>
            <typeparam name="TAttribute">The attribute to look for.</typeparam>
        </member>
        <member name="M:EPiServer.Shell.Composition.AttributeDiscovery.GetAttributedMethods``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Type[])">
            <summary>
            Probes assemblies for methods decorated with the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to probe.</typeparam>
            <param name="assemblies">The assemblies to probe.</param>
            <param name="typeScannerRepository">The global type scanner repository</param>
            <param name="classBaseTypes">Type of the base class.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Composition.AttributeInfo`1">
            <summary>
            Encapsulates information about an attributed method.Describes an attributed method
            </summary>
            <typeparam name="T">Type of the decorating attribute.</typeparam>
        </member>
        <member name="P:EPiServer.Shell.Composition.AttributeInfo`1.AttributedMethod">
            <summary>
            Gets or sets information about the attributed method. This property is null when the attribute decorates a type.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Composition.AttributeInfo`1.AttributedType">
            <summary>
            Gets or sets information about the attributed method.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Composition.AttributeInfo`1.Attribute">
            <summary>
            Gets or sets the decorating attribute.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Composition.DependencyGetter`1">
            <summary>
            A delegate for a method that returns a dependency resolved at runtime. 
            The delegate is used to retrieve singletons without directly depending
            on their static instance. This delegate is used internally by EPiServer.
            </summary>
            <typeparam name="TDependency">The type of dependency the delegate returns.</typeparam>
            <returns>An object isntance.</returns>
        </member>
        <member name="T:EPiServer.Shell.Composition.DynamicDataStoreFactoryExtensions">
            <summary>
            Extension methods for dynamic data store.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Composition.DynamicDataStoreFactoryExtensions.GetOrCreateStore(EPiServer.Data.Dynamic.DynamicDataStoreFactory,System.Type)">
            <summary>
            Gets or creates the dynamic data store for the supplied type.
            </summary>
            <param name="factory">The factory.</param>
            <param name="storedObjectType">Type of the stored object.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Composition.IContainer">
            <summary>
            Provides access to services of a wrapped inversion of control container.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Composition.IContainer.SatisfyImportsOnce(System.Object)">
             <summary>
            Satisfies the imports of the specified attributed object exactly once and they will not ever be recomposed.
             </summary>
             <param name="attributedPart">The attributed object to set the imports.</param>
        </member>
        <member name="M:EPiServer.Shell.Composition.IContainer.GetExportedValue``1">
            <summary>
            Gets an exported service from the composition container. The method 
            will throw an exception if no matching object is available.
            </summary>
            <typeparam name="T">The type of service to retrieve.</typeparam>
            <returns>The exported object.</returns>
        </member>
        <member name="M:EPiServer.Shell.Composition.IContainer.ExcludePart(System.Type)">
            <summary>
            Excludes an ComposablePart from the Part Catalog, the part will not be used when composing a batch
            </summary>
            <param name="typeToExclude">Type to exclude</param>
        </member>
        <member name="M:EPiServer.Shell.Composition.IContainer.AddAssemblyToCatalog(System.Reflection.Assembly)">
            <summary>
            Adds the assembly to catalog.
            </summary>
            <param name="assemblyToAdd">The assembly to add to the catalog.</param>
        </member>
        <member name="T:EPiServer.Shell.Configuration.AssemblyElement">
            <summary>
            A serializable assembly name container
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.AssemblyElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.AssemblyElement"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.AssemblyElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.AssemblyElement"/> class.
            </summary>
            <param name="value">The name of something.</param>
        </member>
        <member name="P:EPiServer.Shell.Configuration.AssemblyElement.Assembly">
            <summary>
            An assembly name.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.AssemblyElement.Name">
            <summary>
            This attribute helps migration from previous versions, do not use.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.AutoDiscoveryLevel">
            <summary>
            Option for auto-discovery of modules
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.AutoDiscoveryLevel.Minimal">
            <summary>
            The most secure option. Will only load modules configured by web.config 
            and associate assemblies explicitly configured in web.config
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.AutoDiscoveryLevel.Modules">
            <summary>
            Auto-discover modules in the module directory and load assemblies defined in the 
            module's module.config file and load assemblies located in the module's bin 
            directory in addition to those defined in the module's module.config file
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ClientModule">
            <summary>
            Defines client resources and dependencies of a shell module. 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientModule.Initializer">
            <summary>
            Gets or sets the initializer class used to start a module on the client.
            </summary>
            <value>The initializer.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientModule.ModuleDependencies">
            <summary>
            Gets or sets the module dependencies.
            </summary>
            <value>The module dependencies.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientModule.RequiredResources">
            <summary>
            Gets or sets the list of client resources that should be loaded for this client module
            </summary>
            <value>The resources.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ClientResourceElement">
            <summary>
            Client resource definition
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ClientResourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ClientResourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> class.
            </summary>
            <param name="path">The path to the resource.</param>
            <param name="name">The client resource name.</param>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.ResourceType">
            <summary>
            Gets or sets resource type
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.Path">
            <summary>
            Gets or sets the path to the resource
            </summary>
            <remarks>
            If the path is relative it will be autoresolved to the modules path
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.Name">
            <summary>
            Gets or sets the client resource name.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.Location">
            <summary>
            Obsolete, use <see cref="P:EPiServer.Shell.Configuration.ClientResourceElement.Name"/> property instead. Location stays here for backward compatibility.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.SortIndex">
            <summary>
            Gets or sets the sort index, use this if you have dependencies between your resources.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.IsMinified">
            <summary>
            Gets or sets a value indicating whether this resource is already minified.
            </summary>
            <value>
            	<c>true</c> if this resource is minified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceElement.Dependencies">
            <summary>
            Gets or sets the names of other client resources that current resource depends on.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ClientResourceElement.Equals(EPiServer.Shell.Configuration.ClientResourceElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ClientResourceElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ClientResourceElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ClientResourceReference">
            <summary>
            Reference to client-side resource
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ClientResourceReference.Name">
            <summary>
            Client resource name
            </summary>
            <seealso cref="T:EPiServer.Framework.Web.Resources.ClientResource"/>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ComponentSecurityElement">
            <summary>
            Defines a component security settings element.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ComponentSecurityElement.DefinitionName">
            <summary>
            Gets or sets the definition name of the component to match.
            </summary>
            <value>The definition name for the component.</value>
            <remarks>This should match either the <see cref="P:EPiServer.Shell.ViewComposition.IComponent.DefinitionName"/> or <see cref="P:EPiServer.Shell.ViewComposition.IComponentDefinition.DefinitionName"/> depending on the type of transformation.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ComponentSecurityElement.AllowedRoles">
            <summary>
            Gets or sets the allowed roles for this component type.
            </summary>
            <value>The allowed roles for this component type.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ComponentSecurityElementCollection">
            <summary>
            Defines a collection of <see cref="T:EPiServer.Shell.Configuration.ComponentSecurityElement"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ComponentSecurityElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Configuration.ComponentSecurityElement"/>.
            </summary>
            <returns>A new <see cref="T:EPiServer.Shell.Configuration.ComponentSecurityElement"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ComponentSecurityElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            'Name' configuration attribute value that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.ComponentSecurityElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ComponentSecurityElementCollection.Add(EPiServer.Shell.Configuration.ComponentSecurityElement)">
            <summary>
            Adds a element to the module collection.
            </summary>
            <param name="componentSecurityElement">The component security element to add</param>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DashboardElement">
            <summary>
            Defines a dashboard section in <see cref="T:EPiServer.Shell.Configuration.EPiServerShellSection"/>
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DashboardElement.Templates">
            <summary>
            Gets or sets the templates.
            </summary>
            <value>The templates.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DashboardElement.DisabledGadgets">
            <summary>
            A collection of gadgets that should be disabled.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DisabledGadgetElement">
            <summary>
            Defines a module available for a <see cref="T:EPiServer.Shell.Configuration.ModulesElementCollection"/> configuration section.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DisabledGadgetElement.Name">
            <summary>
            The name of the gadget that should be disabled
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DisabledGadgetsCollection">
            <summary>
            A collection of gadgets that should be disabled.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.DisabledGadgetsCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.DisabledGadgetsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.DisabledGadgetsCollection.Add(EPiServer.Shell.Configuration.DisabledGadgetElement)">
            <summary>
            Adds a gadget element to the collection of disabled gadgets.
            </summary>
            <param name="element">The element to add</param>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoAlias">
            <summary>
            Defines an alias that maps one dojo module to another
            </summary>
            <example>
            From: "epi/cms/widgets/ColorPicker"
            To: "epi-cms/widgets/NewAdvancedPicker"
            </example>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoAlias.From">
            <summary>
            The name of the module to alias
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoAlias.To">
            <summary>
            The new module name
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoConfiguration">
            <summary>
            The dojo configuration provided by a shell module. 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.DojoConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.DojoConfiguration"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoConfiguration.Aliases">
            <summary>
            Gets or sets the dojo aliases
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoConfiguration.Paths">
            <summary>
            Gets or sets the dojo paths
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoConfiguration.Packages">
            <summary>
            Gets or sets the dojo packages
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoConfiguration.PackageMaps">
            <summary>
            Gets or sets the dojo maps
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoPackage">
            <summary>
            Defines a package
            </summary>
            <example>
            Name: "epi-myPackage"
            Location: "//myServer/epi-myPackage"
            Main: 
            </example>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackage.Name">
            <summary>
            The name of the package
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackage.Location">
            <summary>
            The location of the package, can either be a path relative to baseUrl or an absolute path
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackage.Main">
            <summary>
            Optional parameter for indicating the module to load when package is required; defaults to "main" if not specified
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackage.PackageMap">
            <summary>
            References the Name attribute of the <see cref="T:EPiServer.Shell.Configuration.DojoPackageMap" /> to use to transparently remap package references
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoPackageMap">
            <summary>
            Defines a package map
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackageMap.Name">
            <summary>
            The name of the packageMap as referenced from <see cref="T:EPiServer.Shell.Configuration.DojoPackage" /> items
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackageMap.Mappings">
            <summary>
            The mappings that make out the <see cref="T:EPiServer.Shell.Configuration.DojoPackageMap" />
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoPackageMapping">
            <summary>
            Defines a package mapping
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackageMapping.Key">
            <summary>
            Gets or sets original package name
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPackageMapping.Value">
            <summary>
            Gets or sets the name of package to map to
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.DojoPath">
            <summary>
            Defines a dojo path as provided by a shell module. 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPath.Name">
            <summary>
            Name of the dojo module
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.DojoPath.Path">
            <summary>
            Path to the module root. Defaults to Scripts/[Name]
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.EPiServerShellSection">
            <summary>
            Configures shell specific settings.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.EPiServerShellSection.GetSection">
            <summary>
            Gets the site center section from the configuration.
            </summary>
            <returns>The episerver.shell configuration section as configured, or empty configuration class if not configured.</returns>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.ProtectedModules">
            <summary>
            A collection of modules only accessible for authenticated users.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.PublicModules">
            <summary>
            A collection of publicly accessible modules. In addition to modules 
            explicitly configured in this collection modules will also be auto-discovered 
            from the resource root path.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.Navigation">
            <summary>
            A collection of modules. In addition to modules configured in the 
            collection modules will be auto-discovered from the resource root path.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.ClientResources">
            <summary>
            Configures client resoruces such as enabling debug mode
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.Dashboard">
            <summary>
            Gets or sets the dashboard configuration.
            </summary>
            <value>The dashboard.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.ViewManager">
            <summary>
            Gets or sets the dashboard configuration.
            </summary>
            <value>The dashboard.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.UserInterface">
            <summary>
            Gets or sets the dashboard configuration.
            </summary>
            <value>The dashboard.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.ConfigurationInstance">
            <summary>
            Gets and sets the current configuration to use
            </summary>
            <exclude/>
        </member>
        <member name="P:EPiServer.Shell.Configuration.EPiServerShellSection.Instance">
            <summary>
            Gets the instance of the <see cref="T:EPiServer.Shell.Configuration.EPiServerShellSection"/> section
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.GadgetElement">
            <summary>
            Gadget element
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.GadgetElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.GadgetElement"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.GadgetElement.UniqueId">
            <summary>
             Unique element id
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.GadgetElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.GadgetElement.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.GadgetElementCollection">
            <summary>
            Describes gadget in dashboard template
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.GadgetElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Configuration.GadgetElement"/>.
            </summary>
            <returns>
            A new <see cref="T:EPiServer.Shell.Configuration.GadgetElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.GadgetElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration elemen.
            </summary>
            <param name="element">The <see cref="T:EPiServer.Shell.Configuration.GadgetElement"/> to return the key for.</param>
            <returns>
            A name of the gadget that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.GadgetElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.KeyValueElement">
            <summary>
            A serializable key-value class
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.KeyValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.KeyValueElement"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.KeyValueElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.KeyValueElement"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:EPiServer.Shell.Configuration.KeyValueElement.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.KeyValueElement.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.MenuItemCollection">
            <summary>
            A collection of <see cref="T:EPiServer.Shell.Configuration.MenuItemElement"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.MenuItemCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.MenuItemCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.MenuItemElement">
            <summary>
            Represents a menu item that is added to the menu
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.Text">
            <summary>
            The menu text
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.MenuPath">
            <summary>
            The menu path/key of this menu item. The path defines the structure and is also the unique key to this menu item.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.MenuItemType">
            <summary>
            The target url of this menu item.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.SortIndex">
            <summary>
            The sort index of this menu item. Menu items are sorted from low to high within each section.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.Target">
            <summary>
            The menu link target frame.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.Url">
            <summary>
            The target url of this menu item.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.MenuItemElement.Alignment">
            <summary>
            Menu item alignment
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.MenuItemElement.CreateMenuItem">
            <summary>
            Creates the menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.MenuItemType">
            <summary>
            What type of item the configuration represents
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.MenuItemType.Link">
            <summary>
            A link to a web resource
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.MenuItemType.Section">
            <summary>
            A menu section with subsections with a path below this section
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.MenuItemType.DropDown">
            <summary>
            A drop down style menu
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ModuleDependencyTypes">
            <summary>
            Client-client module dependency types
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.ModuleDependencyTypes.None">
            <summary>
            Default dependency type, the same to <see cref="F:EPiServer.Shell.Configuration.ModuleDependencyTypes.Require"/>
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.ModuleDependencyTypes.Require">
            <summary>
            Run dependant module initializer first
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Configuration.ModuleDependencyTypes.RunAfter">
            <summary>
            Automatically run current module initializer after the dependant module initializer
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ModuleDependency">
            <summary>
            Client-side shell module dependency definition
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleDependency.Dependency">
            <summary>
            Name of shell module that there is a dependency on
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleDependency.DependencyType">
            <summary>
            Module dependency type
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ModuleElement">
            <summary>
            Defines a module available for a <see cref="T:EPiServer.Shell.Configuration.ModulesElementCollection"/> configuration section.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleElement.Name">
            <summary>
            The name of the module. This is used to find the module directory.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleElement.ResourcePath">
            <summary>
            The path to the module. This is used to find the module directory.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleElement.ClientResourcePath">
            <summary>
            Optional client resource path. If not specified the <see cref="P:EPiServer.Shell.Configuration.ModuleElement.ResourcePath"/> is used.
            </summary>
            <value>The client resource path.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModuleElement.Assemblies">
            <summary>
            Assemblies to load and associate with the module. This value may be combined with assemblies defined by the module depending on the auto discovery option.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ModulesElementCollection">
            <summary>
            Tells the application where to look for modules. The modules will
            be auto-discovered from the resource root path but can also be explicitly
            added to the module element collection which is requierd when using
            custom virtual path providers.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModulesElementCollection.RootPath">
            <summary>
            The root path below which module directories are located.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ModulesElementCollection.AutoDiscovery">
            <summary>
            Option for probing the the module folder and load of module assemblies automatically on start-up.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ModulesElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:EPiServer.Shell.Configuration.ModuleElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ModulesElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ModulesElementCollection.Add(EPiServer.Shell.Configuration.ModuleElement)">
            <summary>
            Adds a module element to the module collection.
            </summary>
            <param name="module">The module to add</param>
        </member>
        <member name="T:EPiServer.Shell.Configuration.RouteDescription">
            <summary>
            Describes a route to use for a module
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.RouteDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.RouteDescription"/> class.
            Will set Url to the default value "{moduleArea}/{controller}/{action}/{id}".
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.Url">
            <summary>
            The URL pattern for the route.
            </summary>
            <remarks>
            Defaults to <code>{moduleArea}/{controller}/{action}/{id}</code> if not set.
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.Type">
            <summary>
            Gets or sets an optional class for routing. The class must inherit <see cref="T:System.Web.Routing.RouteBase"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.Defaults">
            <summary>
            Gets or sets the values to use if the URL does not contain all the parameters.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.Constraints">
            <summary>
            Gets or sets a collection of key/value pairs defining valid values for
            URL parameters.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.DataTokens">
            <summary>
            Gets or sets custom values that are passed to the route handler, but which
            are not used to determine whether the route matches a URL pattern.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.RouteDescription.ControllerPrefix">
            <summary>
            A prefix applied to to all controllers routed to this route. This makes it possible to "scope" controllers so they don't conflict with application controllers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.RouteDescription.TrimControllerName(System.String)">
            <summary>
            Removes the <see cref="P:EPiServer.Shell.Configuration.RouteDescription.ControllerPrefix"/> from the beginning of the controller name and "Controller" from the end.
            </summary>
            <param name="controllerName">The controller type name to trim.</param>
            <returns>A leaner controller name.</returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ShellModuleManifest">
            <summary>
            Meta-data for a module. The manifest is parsed from the file module.config in the module's
            root directory.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ShellModuleManifest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Configuration.ShellModuleManifest"/> class.
            Default value for LoadFromBin is true.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.HelpFile">
            <summary>
            Help file for the module
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.ProductName">
            <summary>
            Product name
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.ClientResourceRelativePath">
            <summary>
            Gets or sets the client resource path relative to base resource module folder.
            </summary>
            <value>
            The relative client resource path.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Type">
            <summary>
            Gets or sets the custom type for this module.
            </summary>
            <value>The custom type of the module.</value>
            <remarks>If not set, <see cref="T:EPiServer.Shell.Modules.ShellModule"/> will be used.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Assemblies">
            <summary>
            A list of assemblies where modules will be loaded from.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.RouteBasePath">
            <summary>
            Gets or sets the route base path.
            </summary>
            <value>
            The route base path.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Route">
            <summary>
            A definition of the routes for modules.
            </summary>
            <remarks>Route is a quick entry to the first entry of the <see cref="P:EPiServer.Shell.Configuration.ShellModuleManifest.Routes">Routes</see> collection.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Routes">
            <summary>
            A list of routes for the module.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.LoadFromBin">
            <summary>
            Indicates whether the application will look in all bin folders for modules.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Description">
            <summary>
            The description of the module
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Tags">
            <summary>
            Modules tag 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Version">
            <summary>
            Gets or sets the version for the shell module.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.ClientResources">
            <summary>
            Gets or sets the client resources provided by the module.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.DojoModules">
            <summary>
            Gets or sets the dojo modules provided by the shell module
            </summary>
            <remarks>This is obsolete, use Dojo.Paths instead.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.ClientModule">
            <summary>
            Gets or sets the client module settings.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ShellModuleManifest.Dojo">
            <summary>
            Gets or sets the dojo configuration
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ShellModuleManifest.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the stream into a ShellModuleManifest.
            </summary>
            <param name="manifestFileStream">A stream containing the object serialized as xml.</param>
            <returns>A <see cref="T:EPiServer.Shell.Configuration.ShellModuleManifest" /></returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.TabElement">
            <summary>
            Element describing one tab of the dashboard
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.TabElement.Name">
            <summary>
            Gets or sets the name of the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.TabElement.Layout">
            <summary>
            Gets or sets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.TabElement.Gadgets">
            <summary>
            Gets or sets the gadgets collection inside the tab.
            </summary>
            <value>The gadgets.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.TabElementCollection">
            <summary>
            Collection of tabs of the dashboard
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.TabElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Configuration.TabElement"/>.
            </summary>
            <returns>
            A new <see cref="T:EPiServer.Shell.Configuration.TabElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.TabElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:EPiServer.Shell.Configuration.TabElement"/> to return the key for.</param>
            <returns>
            A Name property of the tab that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.TabElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.TemplateElement">
            <summary>
            Dashboard template 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.TemplateElement.ForRoles">
            <summary>
            Gets or sets list of roles with comma as delimiter.
            </summary>
            <value>For roles.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.TemplateElement.Tabs">
            <summary>
            Gets or sets the tabs of the template.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="M:EPiServer.Shell.Configuration.TemplateElement.GetRoleList">
            <summary>
            Gets the list of roles.
            </summary>
            <returns>List of roles</returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.TemplateElementCollection">
            <summary>
            Dashboard templates collection
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.TemplateElementCollection.CreateNewElement">
            <summary>
            Creates new configuratino element
            </summary>
            <returns>
            A new <see cref="T:EPiServer.Shell.Configuration.TemplateElement"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.TemplateElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            'ForRoles' configuration attribute value that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.TemplateElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.UserInterfaceElement">
            <summary>
            Defines global user interface settings
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.UserInterfaceElement.ThemeClass">
            <summary>
            Gets or sets the the theme class(es) used for the body element.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ViewElement">
            <summary>
            Defines a view element.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewElement.TransformationSettings">
            <summary>
            Gets or sets the transformation settings.
            </summary>
            <value>The transformation settings.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ViewElementCollection">
            <summary>
            Defines a collection of <see cref="T:EPiServer.Shell.Configuration.ViewElement"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ViewElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Configuration.ViewElement"/>.
            </summary>
            <returns>A new <see cref="T:EPiServer.Shell.Configuration.ViewElement"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ViewElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            'Name' configuration attribute value that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.ViewElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ViewManagerElement">
            <summary>
            Defines a view manager section in <see cref="T:EPiServer.Shell.Configuration.EPiServerShellSection"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewManagerElement.Views">
            <summary>
            Gets or sets the views.
            </summary>
            <value>The views.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewManagerElement.SecuredComponents">
            <summary>
            Gets or sets the list of components that require specific access rights.
            </summary>
            <value>The secured components.</value>
            <remarks>This can also be used to disable components for all users.</remarks>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ViewTransformationElement">
            <summary>
            Defines a view transformation element.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewTransformationElement.TransformationType">
            <summary>
            Gets or sets the type of the transformation.
            </summary>
            <value>The type of the transformation.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewTransformationElement.PlugInArea">
            <summary>
            Gets or sets the plug area that is used to match a component.
            </summary>
            <value>The plug in area.</value>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewTransformationElement.DefinitionName">
            <summary>
            Gets or sets the definition name of the component to match.
            </summary>
            <value>The definition name for the component.</value>
            <remarks>This should match either the <see cref="P:EPiServer.Shell.ViewComposition.IComponent.DefinitionName"/> or <see cref="P:EPiServer.Shell.ViewComposition.IComponentDefinition.DefinitionName"/> depending on the type of transformation.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Configuration.ViewTransformationElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:EPiServer.Shell.Configuration.ViewTransformationElementCollection">
            <summary>
            Defines a collection of <see cref="T:EPiServer.Shell.Configuration.ViewTransformationElement"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ViewTransformationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Configuration.ViewTransformationElement"/>.
            </summary>
            <returns>A new <see cref="T:EPiServer.Shell.Configuration.ViewTransformationElement"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Configuration.ViewTransformationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:EPiServer.Shell.Configuration.ViewTransformationElement"/> to return the key for.</param>
            <returns>
            A name of the tranformation element that acts as the key for the specified <see cref="T:EPiServer.Shell.Configuration.ViewTransformationElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.Container">
            <summary>
            Conatiner of the <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> list int the <see cref="T:EPiServer.Shell.Dashboard.Tab"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.Container"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Container.Id">
            <summary>
            Container Id
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Container.Gadgets">
            <summary>
            Gets the gadgets.
            </summary>
            <value>The gadgets.</value>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.GetActiveGadgets(System.Web.Routing.RequestContext)">
            <summary>
            Gets the active gadgets.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.GetGadget(System.Guid)">
            <summary>
            Gets the gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <returns>A <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> or null</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.InsertGadget(System.Int32,EPiServer.Shell.Gadgets.Gadget)">
            <summary>
            Inserts the gadget.
            </summary>
            <param name="index">The index to insert to.</param>
            <param name="gadget">The gadget.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.Merge(EPiServer.Shell.Dashboard.Container)">
            <summary>
            Merges the specified container into this.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.RemoveGadgetsMarkedAsDeleted">
            <summary>
            Removes <see cref="T:EPiServer.Shell.Gadgets.Gadget"/>s instances that has been marked as IsDeletetd.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Container.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.Dashboard">
            <summary>
            Dashboard is the aggregate root for the Dashboard application
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Dashboard.Id">
            <summary>
            Dashboard Id
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Dashboard.UserName">
            <summary>
            Gets or sets the name of the user owning this <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/> instance.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Dashboard.Tabs">
            <summary>
            Gets the tab list.
            </summary>
            <value>The tabs list.</value>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.GetActiveTabs">
            <summary>
            Gets the active tabs.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryGetTab(System.Guid,EPiServer.Shell.Dashboard.Tab@)">
            <summary>
            Tries to get a tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="tab">The tab.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.AddTab(EPiServer.Shell.Dashboard.Tab)">
            <summary>
            Adds a tab.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryMoveTab(System.Guid,System.Int32)">
            <summary>
            Tries to move a tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="indexPosition">The index position to move to.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryRemoveTab(System.Guid)">
            <summary>
            Tries to removes a tab.
            </summary>
            <param name="tabId">The tab id to remove.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryRestoreTab(System.Guid)">
            <summary>
            Tries to restore a tab.
            </summary>
            <param name="tabId">The tab id.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryGetContainer(System.Guid,EPiServer.Shell.Dashboard.Container@)">
            <summary>
            Tries to get a container.
            </summary>
            <param name="containerId">The container id.</param>
            <param name="container">The container.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryGetGadget(System.Guid,EPiServer.Shell.Gadgets.Gadget@)">
            <summary>
            Tries to get a gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <param name="gadget">The gadget.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryMoveGadget(System.Guid,System.Guid,System.Int32)">
            <summary>
            Tries to move a gadget.
            </summary>
            <param name="gadgetId">The gadget id of the <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> to move.</param>
            <param name="containerId">The container id of the <see cref="T:EPiServer.Shell.Dashboard.Container"/> to move to.</param>
            <param name="indexPosition">The index position to move to.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryRemoveGadget(System.Guid)">
            <summary>
            Tries to remove a gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.TryRestoreGadget(System.Guid)">
            <summary>
            Tries to restore a gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.RemoveGadgetsMarkedAsDeleted">
            <summary>
            Cleans the dasboard from all <see cref="T:EPiServer.Shell.Dashboard.Tab"/> and <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> instances 
            that has been marked with IsDeleted.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Dashboard.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.DashboardEventArgs">
            <summary>
             Dashboard event arguments class
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardEventArgs.#ctor(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
             Creates instance of Dashboard event arguments class
            </summary>
            <param name="dashboard"></param>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.DashboardEventArgs.Dashboard">
            <summary>
             Reference to <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/> 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.DashboardEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether current action triggerd this event should be canceled.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.DashboardRepository">
            <summary>
            Acts as the link between the <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/> and the data storage.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.#ctor(EPiServer.Shell.Gadgets.IGadgetFactory,EPiServer.Data.Dynamic.DynamicDataStoreFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.DashboardRepository"/> class.
            </summary>
            <param name="gadgetFactory">A factory to create <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> instances or fetch <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> templates.</param>
            <param name="storeFactory">The store provider.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.Create(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Creates new dashboard in repository.
            </summary>
            <param name="dashboard">The dashboard to create.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.TryGet(System.Guid,EPiServer.Shell.Dashboard.Dashboard@)">
            <summary>
            Tries to get a <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/>.
            </summary>
            <param name="id">The id of the dashboard.</param>
            <param name="dashboard">The dashboard.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.TryGet(System.String,EPiServer.Shell.Dashboard.Dashboard@)">
            <summary>
            Tries to get a <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/>.
            </summary>
            <param name="userName">The username.</param>
            <param name="dashboard">The dashboard.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.Save(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Saves the specified dashboard.
            </summary>
            <param name="dashboard">The dashboard to save.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.DashboardRepository.Delete(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Deletes the specified dashboard.
            </summary>
            <param name="dashboard">The dashboard to delete.</param>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.DashboardRepository.Creating">
            <summary>
             Creating event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.DashboardRepository.Loaded">
            <summary>
             Loaded event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.DashboardRepository.Saving">
            <summary>
             Saving event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.DashboardRepository.Deleting">
            <summary>
             Deleting event
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.IDashboardRepository">
            <summary>
            Acts as the link between the <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/> and the data storage.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.IDashboardRepository.Create(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Creates new dashboard in repository.
            </summary>
            <param name="dashboard">The dashboard to create.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.IDashboardRepository.TryGet(System.Guid,EPiServer.Shell.Dashboard.Dashboard@)">
            <summary>
            Tries to get a <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/>.
            </summary>
            <param name="id">The id of the dashboard.</param>
            <param name="dashboard">The dashboard.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.IDashboardRepository.TryGet(System.String,EPiServer.Shell.Dashboard.Dashboard@)">
            <summary>
            Tries to get a <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/>.
            </summary>
            <param name="userName">The username.</param>
            <param name="dashboard">The dashboard.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.IDashboardRepository.Save(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Saves the specified dashboard.
            </summary>
            <param name="dashboard">The dashboard to save.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.IDashboardRepository.Delete(EPiServer.Shell.Dashboard.Dashboard)">
            <summary>
            Deletes the specified dashboard.
            </summary>
            <param name="dashboard">The dashboard to delete.</param>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.IDashboardRepository.Creating">
            <summary>
             Creating event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.IDashboardRepository.Loaded">
            <summary>
             Dashboard Loaded event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.IDashboardRepository.Saving">
            <summary>
             Dashboard Saving event
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Dashboard.IDashboardRepository.Deleting">
            <summary>
             Deleting event
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.LayoutPart">
            <summary>
            Provides the css-class and number of columns. 
            There can be a collection of these to build a layout on a tab.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.LayoutPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.LayoutPart"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.LayoutPart.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.LayoutPart"/> class.
            </summary>
            <param name="cssClass">The CSS class.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.LayoutPart.CssClass">
            <summary>
            Gets the CSS class.
            </summary>
            <value>The CSS class.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.LayoutPart.Columns">
            <summary>
            Gets the number of columns in the layout part.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.LayoutPart.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.Tab">
            <summary>
            Tab exists in the <see cref="T:EPiServer.Shell.Dashboard.Dashboard"/>, keeps the <see cref="T:EPiServer.Shell.Dashboard.Container"/> list.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.Tab"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.#ctor(System.String,EPiServer.Shell.Dashboard.TabLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.Tab"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Tab.Id">
            <summary>
            Id for the tab
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Tab.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Tab.Layout">
            <summary>
            Gets or sets the layout of the <see cref="P:EPiServer.Shell.Dashboard.Tab.Containers"/>.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Tab.Containers">
            <summary>
            Gets the containers.
            </summary>
            <value>The containers.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.Tab.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.ChangeLayout(EPiServer.Shell.Dashboard.TabLayout)">
            <summary>
            Changes the layout of the containers. Adds or removes containers as necessary.
            </summary>
            <param name="newLayout">The new layout.</param>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.GetContainer(System.Guid)">
            <summary>
            Gets the container.
            </summary>
            <param name="containerId">The container id.</param>
            <returns>The <see cref="T:EPiServer.Shell.Dashboard.Container"/> or null.</returns>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.RemoveGadgetsMarkedAsDeleted">
            <summary>
            Removes <see cref="T:EPiServer.Shell.Gadgets.Gadget"/>s instances that has been marked as IsDeletetd.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.Tab.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Dashboard.TabLayout">
            <summary>
            Provides layouts for the tabs 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.TabLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.TabLayout"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.TabLayout.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{EPiServer.Shell.Dashboard.LayoutPart})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Dashboard.TabLayout"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="iconUrl">The icon url.</param>
            <param name="layouts">The layouts definitions.</param>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.TabLayout.Id">
            <summary>
            TabLayout Id
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.TabLayout.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.TabLayout.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.TabLayout.IconUrl">
            <summary>
            Gets the icon url.
            </summary>
            <value>The icon url.</value>
        </member>
        <member name="P:EPiServer.Shell.Dashboard.TabLayout.Layouts">
            <summary>
            Gets the layout definitions. These are used in the view to render
            the content in accordance to the layout.
            </summary>
            <value>The layouts.</value>
        </member>
        <member name="M:EPiServer.Shell.Dashboard.TabLayout.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.DuplicateGadgetNameException">
            <summary>
            Duplicate gadget name found 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.DuplicateGadgetNameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.DuplicateGadgetNameException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.DuplicateGadgetNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.DuplicateGadgetNameException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.DuplicateGadgetNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.DuplicateGadgetNameException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.DuplicateGadgetNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.DuplicateGadgetNameException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.Gadget">
            <summary>
            A gadget, used for instance on the dashboard.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.Gadget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.Gadget.#ctor(EPiServer.Shell.Gadgets.GadgetDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> class.
            </summary>
            <param name="definition">The gadget definition.</param>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.Id">
            <summary>
            Obsolete. Use the <see cref="P:EPiServer.Shell.ViewComposition.IComponent.Id"/> property of the wrapping component instead.
            </summary>
            <remarks>
            Will always return <see cref="F:System.Guid.Empty"/>
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.TemplateId">
            <summary>
            Id of the template for this gadget type. 
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.Name">
            <summary>
            Name for this gadget
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.Title">
            <summary>
            The title of the gadget, used for ui puroses.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.IconUrl">
            <summary>
            The URL to the icon image.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.ControllerTypeName">
            <summary>
            Type type of controller that serves the gadget interface.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.Definition">
            <summary>
            The definition used by this gadget.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.Gadget.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.Gadget.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.Gadget.GetRouteValues">
            <summary>
            Gets the route values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetAction">
            <summary>
            Defines an action on a gadget controller
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetAction"/> class.
            </summary>
            <param name="actionName">Action method name</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetAction"/> class.
            </summary>
            <param name="actionName">Action method name</param>
            <param name="cssClass">Css class to be used in the gadget</param>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAction.ActionName">
            <summary>
            The name of the action method
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAction.CssClass">
            <summary>
            Css class to be used
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAction.Text">
            <summary>
            If displayed in the context menu it is used as the text
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetAction.ToString">
            <summary>
            Returns the name of the action
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetActionAttribute">
            <summary>
            Declares an action on a dashboard gadget
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetActionAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.Gadgets.GadgetActionAttribute"/> instance.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetActionAttribute.CssClass">
            <summary>
            Css class to be used
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetActionAttribute.Text">
            <summary>
            If displayed in the context menu it is used as the text
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetActionAttribute.TextResourceKey">
            <summary>
            Name of the resource key to get localized context menu name for this action.
            </summary>
            <remarks>This can be a resource key to a resource provided by <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetActionAttribute.ResourceType">
            <summary>
            <para>Optional resource wrapper class to retreive localised resources from. 
            If not set the resource provider configured by the <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.ResourceType"/> is used.</para>
            </summary>
            <remarks>
            <para>If not set and <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.ResourceType"/> is not set, 
            the <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used to find a match for the <see cref="P:EPiServer.Shell.Gadgets.GadgetActionAttribute.TextResourceKey"/>.</para>
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetAttribute">
            <summary>
            Declares a dashboard gadget. Adding this attribute to an ASP.NET MVC 
            Controller marks it as available for adding on the dashboard.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetAttribute.#ctor">
            <summary>
            A dashboard gadget with default values.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.Name">
            <summary>
            The name of the gadget type. Used as an identifier, must be unique among gadgets.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.Title">
            <summary>
            The title of the gadget type. This appears in the add gadget list, and
            in the title bar of the gadget on the dashboard.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.Description">
            <summary>
            The description of the gadget type. This appears in the add gadget list
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.DefaultAction">
            <summary>
            The ASP.NET MVC Controller action that provides the default view
            of gadget. Default is "Index".
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.ResourceType">
            <summary>
            The static resource wrapper class a static property.
            </summary>
            <remarks>
            <para>If not set the <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> 
            will be used to find a match for <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.NameResourceKey"/> and <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.DescriptionResourceKey"/>.</para>
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.NameResourceKey">
            <summary>
            The name of the resource key that provides the title.
            </summary>
            <remarks>This can either be a resource key to a resource provided by <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>
            or the name of the static resource wrapper property if <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.ResourceType"/> is set.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.DescriptionResourceKey">
            <summary>
            The name of the resource key that provides the description.
            </summary>
            <remarks>This can either be a resource key to a resource provided by <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>
            or the name of the static resource wrapper property if <see cref="P:EPiServer.Shell.Gadgets.GadgetAttribute.ResourceType"/> is set.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.IconUrl">
            <summary>
            The name of the static resource wrapper property that provides the URL for the icon image.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.ClientScriptInitMethod">
            <summary>
            A javascript function called when this gadget is initialized on the dashboard. 
            The function is called with the gadget instance object as parameter.
            </summary>
            <example>
                epi.gadgets.myTasks
            </example>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetAttribute.Category">
            <summary>
            Gets or sets the category associated with this gadget. Used for determining where in the UI the gadget can be added.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetComponent">
            <summary>
            A component that hosts a gadget.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponent.#ctor(EPiServer.Shell.ViewComposition.IComponentDefinition,EPiServer.Shell.Gadgets.GadgetDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetComponent"/> class.
            </summary>
            <param name="componentDefinition">The component definition.</param>
            <param name="gadgetDefinition">The gadget definition.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponent.OnDeleted(System.Guid)">
            <summary>
            Will be called when the component is deleted.
            </summary>
            <param name="id">The id of the component.</param>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetComponentDefinition">
            <summary>
            Used for providing gadgets to the opa framework by wrapping it.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentDefinition.#ctor(EPiServer.Shell.Gadgets.Gadget)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetComponentDefinition"/> class.
            </summary>
            <param name="gadget">The gadget.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentDefinition.CreateComponent">
            <summary>
            This implementation does not create any component. It's instead the <see cref="T:EPiServer.Shell.Gadgets.GadgetComponentProvider"/> that's creating gadget components.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentDefinition.Categories">
            <summary>
            Gets the category for this component. If no category is set in the definition then "dashboard" is returned.
            </summary>
            <value>Returns the category definied in gadget definition; else returns "dashboard".</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentDefinition.WidgetType">
            <summary>
            Name of the widget type to use for displaying the component.
            </summary>
            <value>epi.shell.widget.GadgetWrapper</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentDefinition.Title">
            <summary>
            Title used in the UI both for listings and as default for component instances. Should be localized.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentDefinition.Description">
            <summary>
            Description of the component. Should be localized.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentDefinition.DefinitionName">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentDefinition.Equals(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetComponentProvider">
            <summary>
            Provides dashboard gadgets as <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentProvider.#ctor(EPiServer.Shell.Gadgets.IGadgetFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetComponentProvider"/> class.
            </summary>
            <param name="gadgetFactory">The gadget factory.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentProvider.GetComponentDefinitions">
            <summary>
            Gets the components.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the component definitions that this provider handles.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetComponentProvider.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Creates a component instance corresponding to an <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.
            </summary>
            <param name="definition">The component definition to create a component for.</param>
            <returns>
                A component instance if the definition is provided by this provider; otherwise <c>null</c>
            </returns>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetComponentProvider.SortOrder">
            <summary>
            Used to select the order of execution of the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.
            </summary>
            <value><see cref="T:EPiServer.Shell.Gadgets.GadgetComponentProvider"/> has a sort order of 200.</value>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetDefinition">
            <summary>
            Definition of a gadget
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetDefinition.#ctor(System.String,System.String,System.Type,System.String,EPiServer.Shell.Gadgets.GadgetAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinition"/> class.
            </summary>
            <param name="name">The name of the gadget. Used as an identifier.</param>
            <param name="title">The title of the gadget. Used for display.</param>
            <param name="controllerType">The controller responsible for this gadget.</param>
            <param name="defaultAction">The default action.</param>
            <param name="actions">Avaliable actions for this gadget.</param>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Name">
            <summary>
            The name of the gadget type. Used as an identifier, must be unique among gadgets.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Title">
            <summary>
            The title of the gadget type. This appears in the add gadget list, and
            in the title bar of the gadget on the dashboard.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Description">
            <summary>
            The description of the gadget type. This appears in the add gadget list
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ResourceType">
            <summary>
            Gets or sets the type that is used to resolve localized resources.
            </summary>
            <value>The type that is used to resolve localized resources.</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.DescriptionResourceKey">
            <summary>
            Gets or sets the description resource key.
            </summary>
            <value>The description resource key.</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.NameResourceKey">
            <summary>
            Gets or sets the name resource key.
            </summary>
            <value>The name resource key.</value>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.DefaultAction">
            <summary>
            The ASP.NET MVC Controller action that provides the default view
            of gadget. Default is "Index".
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ControllerType">
            <summary>
            The ASP.NET MVC Controller Type
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ControllerName">
            <summary>
            The ASP.NET MVC Controller name without the "Controller" suffix
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Area">
            <summary>
            Used when the application is located within a virtual path.
            </summary>
            <example>
            Virtual path is ~/Shell/CMS then the area should be CMS
            </example>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.IconUrl">
            <summary>
            The name of the static resource wrapper property that provides the URL for the icon image.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Actions">
            <summary>
            List of aviable actions on the gadget
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ClientLocalizationDependencies">
            <summary>
            List of client localization routeValues that the gadget requires
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ClientResourceDependencies">
            <summary>
            List of client resources relative urls that gadget requires
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.IsAvailable">
            <summary>
            The delegate responsible for determining the gadgets avaliability in a certain context.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.ClientScriptInitMethod">
            <summary>
            The name of a javascript function for gadget initialization. Called when the gadget is instantiated.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinition.Category">
            <summary>
            Gets or sets the category associated with this gadget. Used for determining where in the UI the gadget can be added.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetDefinitionEventArgs">
            <summary>
            Gadget definition event arguments
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetDefinitionEventArgs.#ctor(EPiServer.Shell.Gadgets.GadgetDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinitionEventArgs"/> class.
            </summary>
            <param name="gadgetDefinition">The gadget definition.</param>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinitionEventArgs.GadgetDefinition">
            <summary>
            Gets or sets the gadget definition.
            </summary>
            <value>The gadget definition.</value>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetDefinitionProviderAttribute">
            <summary>
            Gadget definition provider attribute. A wrapper for the MEF's Export attribute for IGadgetDefinitionProvider interface.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetDefinitionProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinitionProviderAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetDefinitionProviderAttribute.Lifecycle">
            <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetFactory">
            <summary>
            Implementation of a <see cref="T:EPiServer.Shell.Gadgets.IGadgetFactory"/>.
            Provides methods to create <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> instances.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Gadgets.GadgetFactory._providers">
            <summary>
            An enumeration of all the loaded IGadgetDefinitionProvider.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetFactory.#ctor(EPiServer.Shell.Gadgets.IGadgetDefinitionProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetFactory"/> class.
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Gadgets.GadgetFactory.GettingGadgetTemplates">
            <summary>
            Occurs when IGadgetFactory.GetGadgetTemplates method called.
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Gadgets.GadgetFactory.CreatingGadgetDefinition">
            <summary>
            Occurs when IGadgetFactory.Create method called.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetFactory.CreateGadgetFromTemplate(System.Guid)">
            <summary>
            Creates a gadget from template.
            </summary>
            <param name="gadgetTemplateId">The gadget template ID.</param>
            <returns>A new <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> copied from the template.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetFactory.Create(System.String)">
            <summary>
            Create a <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinition"/> for a gadget name
            </summary>
            <param name="gadgetName">Name of the gadget.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetFactory.GetGadgetTemplates">
            <summary>
            Gets the available gadget templates.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetFactory.Create(EPiServer.Shell.Gadgets.GadgetDefinition)">
            <summary>
            Create a gadget template from a definition
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.GadgetTemplatesEventArgs">
            <summary>
            Gadget templates event arguments
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.GadgetTemplatesEventArgs.#ctor(System.Collections.Generic.IList{EPiServer.Shell.Gadgets.Gadget})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.GadgetTemplatesEventArgs"/> class.
            </summary>
            <param name="gadgetTemplates">The gadget templates collection.</param>
        </member>
        <member name="P:EPiServer.Shell.Gadgets.GadgetTemplatesEventArgs.GadgetTemplates">
            <summary>
            Gets or sets the gadget templates.
            </summary>
            <value>The gadget templates.</value>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.IGadgetDefinitionProvider">
            <summary>
            Provides gadget definitions to the gadget catalog.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.IGadgetDefinitionProvider.ListGadgets">
            <summary>
            Gets the provided gadget definitions.
            </summary>
            <returns>An enumeration of gadget definitions.</returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.IGadgetFactory">
            <summary>
            Provides methods to create <see cref="T:EPiServer.Shell.Gadgets.Gadget"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.IGadgetFactory.CreateGadgetFromTemplate(System.Guid)">
            <summary>
            Creates the gadget from template.
            </summary>
            <param name="gadgetTemplateId">The gadget template Id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.IGadgetFactory.Create(System.String)">
            <summary>
            Create a <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinition"/> for a gadget name
            </summary>
            <param name="gadgetName">Name of the gadget.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.IGadgetFactory.GetGadgetTemplates">
            <summary>
            Gets the available gadgets templates.
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Gadgets.IGadgetFactory.GettingGadgetTemplates">
            <summary>
            Occurs when IGadgetFactory.GetGadgetTemplates method called.
            </summary>
        </member>
        <member name="E:EPiServer.Shell.Gadgets.IGadgetFactory.CreatingGadgetDefinition">
            <summary>
            Occurs when IGadgetFactory.Create method called.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.IGadgetNotify">
            <summary>
            Should be implemented if you want to receive gadget event notifications 
            </summary>
            <remarks>
            The instance will be composed in MEF so Imports will be automatically resolved
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.IGadgetNotify.OnDeleted(System.Guid)">
            <summary>
            Will be called when the gadget is deleted
            </summary>
            <param name="gadgetId">Id of the gadget</param>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.ReflectingGadgetDefinitionProvider">
            <summary>
            Provides gadget definitions by traversing types in the app domain and 
            looking for ASP.NET MVC controllers decorated by the <see cref="T:EPiServer.Shell.Gadgets.GadgetAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.ReflectingGadgetDefinitionProvider.#ctor(EPiServer.Shell.Modules.ModuleTable,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.ReflectingGadgetDefinitionProvider"/> class.
            </summary>
            <param name="modules">The module manager.</param>
            <param name="typeScannerRepository">The global type scanner repository</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.ReflectingGadgetDefinitionProvider.ListGadgets">
            <summary>
            Lists all avaliable gadget definitions.
            </summary>
            <returns>An enumeration of gadget definitions.</returns>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.ReflectingGadgetDefinitionProvider.CreateDefintion(System.Type,EPiServer.Shell.Gadgets.GadgetAttribute,EPiServer.Shell.Modules.ModuleTable)">
            <summary>
            Creates a <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinition"/>.
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <param name="attribute">The attribute.</param>
            <param name="modules">A manager to handle the modules.</param>
            <returns>A new <see cref="T:EPiServer.Shell.Gadgets.GadgetDefinition" /></returns>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.UnknownGadgetException">
            <summary>
            No gadget matches the specified criteria
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.UnknownGadgetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.UnknownGadgetException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.UnknownGadgetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.UnknownGadgetException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.UnknownGadgetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.UnknownGadgetException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.UnknownGadgetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Gadgets.UnknownGadgetException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Shell.Gadgets.VerifyGadgetOwnerAttribute">
            <summary>
            A filter that verifies that the current gadget belongs to the currently logged on user
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Gadgets.VerifyGadgetOwnerAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called before an action is executed. 
            Will throw an exception if the specified gadget doesn't belong to the currently logged on user.
            </summary>
            <param name="filterContext">A context for the action.</param>
        </member>
        <member name="T:EPiServer.Shell.Json.JsonIdentityConverter">
            <summary>
            Converts the data store <see cref="T:EPiServer.Data.Identity"/> to and from a more suitable json representation
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Json.JsonIdentityConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if the type is <see cref="T:EPiServer.Data.Identity"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Json.JsonIdentityConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object and returns an <see cref="T:EPiServer.Data.Identity"/> instance.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the target object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value, or null if conversion failed.</returns>
        </member>
        <member name="M:EPiServer.Shell.Json.JsonIdentityConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the <see cref="T:EPiServer.Data.Identity"/> object to the writer.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value being converted.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:EPiServer.Shell.Json.TypeArrayConverter">
            <summary>
            Writes the FullName property for a <see cref="T:System.Type"/> instead of the FullyQualifiedName.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeArrayConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if the type is <see cref="T:EPiServer.Data.Identity"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object and returns an <see cref="T:EPiServer.Data.Identity"/> instance.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the target object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value, or null if conversion failed.</returns>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the <see cref="T:EPiServer.Data.Identity"/> object to the writer.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value being converted.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:EPiServer.Shell.Json.TypeConverter">
            <summary>
            Writes the Fullname property for a <see cref="T:System.Type"/> instead of the FullyQualifiedName.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if the type is <see cref="T:EPiServer.Data.Identity"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object and returns an <see cref="T:EPiServer.Data.Identity"/> instance.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the target object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value, or null if conversion failed.</returns>
        </member>
        <member name="M:EPiServer.Shell.Json.TypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the <see cref="T:EPiServer.Data.Identity"/> object to the writer.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value being converted.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:EPiServer.Shell.Modules.BinariesFinder">
            <summary>
            Locates modules assemblies
            NuGet compatible approach is used to find modules binaries: http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package.
            </summary>
            <remarks>
            Possible structure of module binaries folder:
            bin\module.dll
            bin\NET20\module.dll
            bin\NET40\module.dll
            clientbin\Silverlight4\module.dll
            clientbin\sl4\module.dll
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.#ctor(System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.BinariesFinder"/> class.
            </summary>
            <param name="virtualPathProvider">The virtual path provider.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.#ctor(System.Web.Hosting.VirtualPathProvider,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.BinariesFinder"/> class.
            </summary>
            <param name="virtualPathProvider">The virtual path provider.</param>
            <param name="runtimeVersion">The runtime version.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.GetAllBinaries(System.String)">
            <summary>
            Gets all binaries in modules.
            </summary>
            <param name="modulesRootPath"></param>
            <remarks>
            If module supports several runtime versions method returns binaries related to the current runtime version
            </remarks>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.GetAllSilverlightBinaries(System.String)">
            <summary>
            Gets all silverlight binaries in modules.
            </summary>
            <param name="modulesRootPath"></param>
            <remarks>
            If module supports several runtime versions method returns binaries related to the current runtime version
            </remarks>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.GetBinariesForModule(System.String)">
            <summary>
            Gets binaries for specified module path.
            </summary>
            <remarks>
            If module supports several runtime versions method returns binaries related to the current runtime version
            </remarks>
            <param name="moduleFolder">The module folder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.GetSilverlightBinariesForModule(System.String)">
            <summary>
            Gets Silverlight binaries for specified module path.
            </summary>
            <remarks>
            If module supports several runtime versions method returns binaries related to the current runtime version
            </remarks>
            <param name="moduleFolder">The module folder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.BinariesFinder.GetBinariesForModuleInternal(System.String,System.Runtime.Versioning.FrameworkName)">
            <summary>
            Gets binaries for the module.
            </summary>
            <param name="moduleFolder">The module folder.</param>
            <param name="targetFramework">Target framework to search assembly for</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ConfigModuleProvider">
            <summary>
            Analyzes the configuration and initializes built-in and user-defined modules.
            </summary>
            <remarks>This class is used internally by EPiServer and should not be instantiated.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Modules.ConfigModuleProvider.#ctor(EPiServer.Shell.Modules.IModuleFinder,EPiServer.Shell.Configuration.EPiServerShellSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ConfigModuleProvider"/> class.
            </summary>
            <param name="finder">The module finder.</param>
            <param name="configuration">The configuration from which to provide modules.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ConfigModuleProvider.GetModules">
            <summary>
            Initializes modules based on configuration
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.DefaultModuleProvider">
            <summary>
            Provides shell module for the web application.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.DefaultModuleProvider.#ctor(EPiServer.Shell.Modules.IModuleFinder,EPiServer.Shell.Configuration.EPiServerShellSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ConfigModuleProvider"/> class.
            </summary>
            <param name="finder">The module finder.</param>
            <param name="configuration">The configuration from which to provide modules.</param>
        </member>
        <member name="T:EPiServer.Shell.Modules.DojoLocalizationFileRouteContraint">
            <summary>
            Checks a route value representing a dojo localization file path against a pattern
            and checks that the request doesn't map to an existing file on disk.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.IFallbackModuleController">
            <summary>
            Gets a controller that will be used when a module dosn't have a controller.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.IFallbackModuleController.ControllerType">
            <summary>
            The type of the controller that will be used when a module have a view without a controller.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.IModuleFinder">
            <summary>
            Discovers modules in a folder structure and registers them into the application
            </summary>
            <remarks>This class is used internally by EPiServer and should not be instantiated.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Modules.IModuleFinder.GetModulesInSubdirectories(System.String,EPiServer.Shell.Configuration.AutoDiscoveryLevel)">
            <summary>
            Get modules from sub-directories of the supplied directory.
            </summary>
            <param name="rootPath">The root folder for modules to discover.</param>
            <param name="discoveryMode">The level to use for the auto discovery.</param>
            <returns>
            A list of shell modules
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.IModuleFinder.GetModuleInDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},EPiServer.Shell.Configuration.AutoDiscoveryLevel,System.String)">
            <summary>
            Extracts and loads a module in a directory
            </summary>
            <param name="routeBasePath">The base path for the routes.</param>
            <param name="moduleResourcePath">The virtual path to module resources</param>
            <param name="configuredAssemblyNames">Assemblies that are always loaded and associated with the module.</param>
            <param name="discoveryMode">What level the auto discovery should be.</param>
            <param name="configuredName">Configured module name.</param>
            <returns>
            A shell module.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.IModuleProvider">
            <summary>
            Provides modules in the shell module system.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.IModuleProvider.GetModules">
            <summary>
            Gets the modules.
            </summary>
            <returns>An enumeration of modules</returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleAssembly">
            <summary>
            Represents module assembly
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleAssembly.#ctor(System.Web.Hosting.VirtualFile,System.Runtime.Versioning.FrameworkName)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleAssembly"/> class.
            </summary>
            <param name="assemblyFile">The assembly virtual file.</param>
            <param name="targetFramework">The target framework.</param>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleAssembly.SupportedFrameworks">
            <summary>
            Gets the collection of supported frameworks.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleAssembly.TargetFramework">
            <summary>
            Gets the target framework.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleAssembly.AssemblyFile">
            <summary>
            Gets the assembly file.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleAssembly.Equals(EPiServer.Shell.Modules.ModuleAssembly)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleAssembly.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleClientResourceProvider">
            <summary>
            Module client resource provider
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleClientResourceProvider.#ctor(EPiServer.Shell.Modules.ModuleTable)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleClientResourceProvider"/> class.
            </summary>
            <param name="modules">The module manager.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleClientResourceProvider.GetClientResources">
            <summary>
            Gets the client resoures specified inside the <see cref="T:EPiServer.Shell.Configuration.ShellModuleManifest"/> file fo public modules.
            </summary>
            <returns>A list of client resources resolved for public modules.</returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleDependencyViewModel">
            <summary>
            Used to transfer <see cref="T:EPiServer.Shell.Configuration.ModuleDependency"/>  into a format that is suitable for client consumption.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleDependencyViewModel.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>
            The name of the module.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleDependencyViewModel.DependencyType">
            <summary>
            Gets or sets the type of the dependency.
            </summary>
            <value>
            The type of the dependency.
            </value>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleExtensions">
            <summary>
            Helps in dealing with shell modules
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleExtensions.GetModule(System.Web.Routing.RouteData)">
            <summary>
            Gets a shell module from the route data tokens.
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleExtensions.EnsureDefaultRoute(EPiServer.Shell.Configuration.ShellModuleManifest,System.String)">
            <summary>
            Ensures that the manifest has at least one route; if it doesn't the default is added.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleExtensions.ResolveVersion(EPiServer.Shell.Modules.ShellModule)">
            <summary>
            Resolve version for shell module
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleFinder">
            <inheritdoc /> 
        </member>
        <member name="F:EPiServer.Shell.Modules.ModuleFinder.ProtectedModulesFolderName">
            <summary>
            By default a folder named "_Protected" is always ignored by the module finder
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Modules.ModuleFinder._loadedAssemblies">
            <summary>
            Assemblies loaded to current application domain
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.#ctor(System.Web.Hosting.VirtualPathProvider,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleFinder"/> class.
            </summary>
            <param name="virtualPathProvider">The virtual path provider.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.#ctor(System.Web.Hosting.VirtualPathProvider,EPiServer.Shell.Modules.BinariesFinder,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleFinder"/> class.
            </summary>
            <param name="virtualPathProvider">The VPP.</param>
            <param name="binariesFinder">The BinariesFinder instance.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.GetModulesInSubdirectories(System.String,EPiServer.Shell.Configuration.AutoDiscoveryLevel)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.GetModuleInDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},EPiServer.Shell.Configuration.AutoDiscoveryLevel,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.RegisterModuleAssembly(System.Reflection.Assembly,System.Collections.Generic.List{System.Reflection.Assembly}@)">
            <summary>
            Registers the specified assembly for module, if it was not listed in module assemblies.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="moduleAssemblies">The module assemblies list.</param>
            <returns><c>true</c> if assembly was added to module assembly list; <c>false</c> if assembly is already listed.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.TryLoadAssemblyByName(System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load assembly by name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="loadedAssembly">The loaded assembly.</param>
            <returns><c>true</c> if assembly is successfully loaded by name; otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleFinder.ReadManifest(System.IO.Stream)">
            <summary>
            Deserialize the manifest file stream
            </summary>
            <param name="manifestStream">The manifest file stream</param>
            <returns>Deserialize manifest file</returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleInitializer">
            <summary>
            This class whole purpose in life is to initializes modules while being internally used by EPiServer.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleInitializer.#ctor(System.Web.Routing.IRouteHandler,System.Web.Routing.RouteCollection,System.Web.Mvc.ViewEngineCollection,System.Web.Hosting.VirtualPathProvider,EPiServer.Shell.Configuration.EPiServerShellSection)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleInitializer"/> class.
            </summary>
            <param name="routeHandler">The route handler</param>
            <param name="routes">The route collection</param>
            <param name="viewEngines">The view engines</param>
            <param name="virtualPathProvider">The virtual path provider</param>
            <param name="episerverShellConfig">The episerver shell configuration section.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleInitializer.RegisterModules(System.Collections.Generic.IEnumerable{EPiServer.Shell.Modules.ShellModule})">
            <summary>
            Registers route table and view engine related to the module
            </summary>
            <param name="modules">The modules that will be registered.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleInitializer.RegisterDojoModules(System.Collections.Generic.IEnumerable{EPiServer.Shell.Modules.ShellModule})">
            <summary>
            Registers dojo localization routes for registered dojo modules
            </summary>
            <param name="modules">A collection of registered shell modules</param>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleProviderAttribute">
            <summary>
            Attribute for the shell modules providers
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleProviderAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleProviderAttribute.Lifecycle">
            <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleRoutePair">
            <summary>
            Used to pass configurable information about a route.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleRoutePair.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleRoutePair"/> class.
            </summary>
            <param name="routeBasePath">The route base path.</param>
            <param name="routeDefaults">The route defaults.</param>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleRoutePair.RouteBasePath">
            <summary>
            The route base path.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleRoutePair.RouteDefaults">
            <summary>
            The route default values.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleTable">
            <summary>
            Keep tracks of module to assembly mappings
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.Initialize(System.Collections.Generic.IEnumerable{EPiServer.Shell.Modules.ShellModule})">
            <summary>
            Initializes the module manager for fist time usage.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.GetModuleAssemblies">
            <summary>
            Lists all module assemblies
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.GetModules">
            <summary>
            Gets managed shell modues.
            </summary>
            <returns>All modules</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.FindModule(System.String)">
            <summary>
            Searches for a <see cref="T:EPiServer.Shell.Modules.ShellModule"/> with a specific namne.
            </summary>
            <param name="moduleName">Module name to search for</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.Add(EPiServer.Shell.Modules.ShellModule)">
            <summary>
            Adds the specified module to the assembly-module mapping.
            </summary>
            <param name="newModule">The module that should be added.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.AddRange(System.Collections.Generic.IEnumerable{EPiServer.Shell.Modules.ShellModule})">
            <summary>
            Adds a range of modules to the module table.
            </summary>
            <param name="modules">The modules to add.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.TryGetModule(System.Reflection.Assembly,EPiServer.Shell.Modules.ShellModule@)">
            <summary>
            Tries to get the module associated to an assembly
            </summary>
            <param name="assembly">The associated assembly</param>
            <param name="shellModule">The module out parameter</param>
            <returns>True if the module exists</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.ResolvePath(System.String,System.String)">
            <summary>
            Resolves a path to a resource relative to the specified module.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="moduleRelativePath">The module relative path.</param>
            <returns>An absolute path to a resource within a module.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.ResolvePath(EPiServer.Shell.Modules.ShellModule,System.String)">
            <summary>
            Resolves a path to a resource relative to the specified module.
            </summary>
            <param name="module">The Shell module.</param>
            <param name="moduleRelativePath">The module relative path.</param>
            <returns>
            An absolute path to a resource within a module.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.ResolveClientPath(System.String,System.String)">
            <summary>
            Resolves a path to a client resource relative to the specified module.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="moduleRelativePath">The module relative path.</param>
            <returns>An absolute path to a resource within a module.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.ResolveClientPath(EPiServer.Shell.Modules.ShellModule,System.String)">
            <summary>
            Resolves a path to a client resource relative to the specified module.
            </summary>
            <param name="module">Shell module.</param>
            <param name="moduleRelativePath">The module relative path.</param>
            <returns>
            An absolute path to a resource within a module.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.GetModuleOrDefault(System.Reflection.Assembly)">
            <summary>
            Gets the shell module, or defaults to the application root.
            </summary>
            <param name="assembly">The assembly within the requested module.</param>
            <returns>A shell modeule, or a default one.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.Combine(System.String,System.String)">
            <summary>
            Combine two HTTP-scheme URLs or paths. Use for simple and robust concatentation of slash-separated paths,
            even if part of a full http: URL.
            </summary>
            <param name="part1">First part, may include scheme, host etc</param>
            <param name="part2">Second part, may include traling query string, fragment etc</param>
            <returns>The correctly combined paths regardless of if part1 ends or not, or part2 starts or not, with "/"</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleTable.GetEnumerator">
            <summary>
            Gets a <see cref="T:EPiServer.Shell.Modules.ShellModule"/> enumerator.
            </summary>
            <returns>An enumerator for <see cref="T:EPiServer.Shell.Modules.ShellModule"/> instances in the module table.</returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ModuleViewModel">
            <summary>
            Used to parse <see cref="T:EPiServer.Shell.Modules.ShellModule"/> and <see cref="T:EPiServer.Shell.Configuration.ShellModuleManifest"/> into a format that
            is suitable for client consumption.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleViewModel.#ctor(EPiServer.Shell.Modules.ShellModule,EPiServer.Framework.Web.Resources.IClientResourceService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleViewModel"/> class.
            </summary>
            <param name="module">The module.</param>
            <param name="clientResourceService">The client resource service.</param>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.Name">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.Initializer">
            <summary>
            Module initializer class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.ModuleDependencies">
             <summary>
            The module dependencies to load before this one.
             </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.CssResources">
            <summary>
            The CSS resources needed by the module.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.ScriptResources">
            <summary>
            The script resources needed by the module.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.Routes">
            <summary>
            The available routes.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ModuleViewModel.HelpPath">
            <summary>
            The path to the web help
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleViewModel.AddRouteInformation(EPiServer.Shell.Modules.ShellModule)">
            <summary>
            Adds the route information.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ModuleViewModel.GetResources(EPiServer.Framework.Web.Resources.ClientResourceType,EPiServer.Shell.Modules.ShellModule,EPiServer.Framework.Web.Resources.IClientResourceService)">
            <summary>
            Gets the resources.
            </summary>
            <param name="resourceType">Type of the resource to return.</param>
            <param name="module">The module.</param>
            <param name="clientResourceService">The client resource service.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.ProtectedModulesSecurity">
            <summary>
            Used to forbid access when modules are stored in the "_Protected" folder inside public modules
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.ReadOnlyProtectedModules">
            <summary>
            Used to forbid or unavailable access when modules are stored in the "_Protected" folder and the application is in the ReadOnly mode.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.ShellModule">
            <summary>
            Represents a module of the EPiServer Framework application
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:System.Reflection.Module"/> instance.
            </summary>
            <param name="name">The name of this module.</param>
            <param name="routeBasePath">The initial path of mvc actions.</param>
            <param name="resourceBasePath">The default location of resources such as aspx pages.</param>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.#ctor(System.String,System.String,System.String,EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Initializes a new <see cref="T:System.Reflection.Module"/> instance.
            </summary>
            <param name="name">The name of this module.</param>
            <param name="routeBasePath">The initial path of mvc actions.</param>
            <param name="resourceBasePath">The default location of resources such as aspx pages.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
            <param name="virtualPathProvider">The virtual path provider used for file system access.</param>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.Name">
            <summary>
            The name of the module, typically the same as the directory where the module is located.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.Controllers">
            <summary>
            Controllers associated with this module
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.Assemblies">
            <summary>
            Assemblies associated with this module. These are the combination of dll 
            files in the module's bin directory and assemblies configured in the module's manifest
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.Manifest">
            <summary>
            Describes the module. This information is de-serialized from a the file module.config located in the module directory.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.RouteBasePath">
            <summary>
            An absolute path from which routes to this module are resolved. For instance "episerver/yourmodule/".
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.ResourceBasePath">
            <summary>
            The path to the module directory. Views and client resources are located below this folder.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.ShellModule.ClientResourcePath">
            <summary>
            Gets or sets the client resource path.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetResolvedRouteBasePath">
            <summary>
            Gets the resolved route base path.
            </summary>
            <returns>A path in a format that is absolute and includes a virtual directory path if present. For instance "/localhost/mysite/episerver/mymodule".</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetControllerType(System.String)">
            <summary>
            Gets a controller type by the controller name.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <returns>A type if a matching controller is fount; otherwise null</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetRouteForController(System.String)">
            <summary>
            Gets the route for the given controller name.
            </summary>
            <param name="controllerName">The controller name</param>
            <returns>The route for the controller or null</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetRouteSegmentForController(System.String)">
            <summary>
            Gets the route segement used for creating URLs; taking into account the route prefix.
            </summary>
            <param name="controllerName">The controller name</param>
            <returns>The route segement</returns>
            <example>
            For "FooController" it will return "Foo".
            </example>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            The comparison is made on the Name property.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            Will use the Name property to generate the hash code.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.ResolveClientPath(System.String)">
            <summary>
            Resolves the client path.
            </summary>
            <param name="moduleRelativePath">The module relative path.</param>
            <returns>An absolut path to the client resource.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.CreateViewModel(EPiServer.Shell.Modules.ModuleTable,EPiServer.Framework.Web.Resources.IClientResourceService)">
            <summary>
            Creates the view module for this module.
            </summary>
            <param name="moduleTable">The module table.</param>
            <param name="clientResourceService">The client resource service.</param>
            <returns>An object that will be serialized and sent to the client when initializing a view.</returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetControllers">
            <summary>
            Scans the module's assemblies for controller types
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.GetHelpUrl">
            <summary>
            Get the webhelp url for this module
            </summary>
            <returns>A string containing the webhelp url </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.Merge(EPiServer.Shell.Modules.ShellModule)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellModule.MergeDuplicateModules(System.Collections.Generic.IEnumerable{EPiServer.Shell.Modules.ShellModule})">
            <summary>
            Merges duplicate modules in the specified modules list list
            </summary>
            <param name="modules"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:EPiServer.Shell.Modules.ShellZipArchiveSecurity">
            <summary>
            Used to restrict requests to ZIP archives containing a shell module.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Modules.ShellZipArchiveVirtualPathProviderModule">
            <summary>
            Handles convention based registration of <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider"/> for modules.
            </summary>
            <remarks>
            <para>
                If a module contains a .zip archive file with the same name as the directory it will be registered 
                and the content of the archive exposed through a <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider"/>.
            </para>
            <para>
                This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellZipArchiveVirtualPathProviderModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ShellZipArchiveVirtualPathProviderModule"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.ShellZipArchiveVirtualPathProviderModule.CreateProviders(EPiServer.Framework.Initialization.InitializationEngine)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Shell.Modules.ZipArchiveFinder.Find(System.String)">
            <summary>
            Finds all directories directly under the provided <paramref name="rootPath"/> that contains a 
            ZIP archive with the same name as the directory.
            </summary>
            <param name="rootPath">The root path under where to look for directories with archives.</param>
            <returns>A dictionary where the key is the name of the directory and the value is the relative path to the archive.</returns>
        </member>
        <member name="T:EPiServer.Shell.Modules.VersionUtility">
            <summary>
            Adapted Version utility, provides methods to get <see cref="T:System.Runtime.Versioning.FrameworkName"/> by folder name and find compatible assemblies.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Modules.VersionUtility.NetFrameworkIdentifier">
            <summary>
            .NET framework indentifier
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Modules.VersionUtility.SilverlightIdentifier">
            <summary>
            Silverlight indentifier
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Modules.VersionUtility.UnsupportedFrameworkIdentifier">
            <summary>
            Identifier for all unsupported frameworks
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Modules.VersionUtility.UnsupportedFrameworkName">
            <summary>
            The unsupported framework value
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.VersionUtility.DefaultTargetFrameworkVersion">
            <summary>
            Gets the default target framework version.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Modules.VersionUtility.DefaultTargetFramework">
            <summary>
            Gets the default target framework.
            </summary>
            <value>
            The default target framework.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Modules.VersionUtility.ParseFrameworkName(System.String)">
            <summary>
            This function tries to normalize a string that represents framework version names into
            something a framework name that the package manager understands.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Modules.VersionUtility.TryGetCompatibleItems``1(System.Runtime.Versioning.FrameworkName,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Tries the get compatible module assemblies.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projectFramework">The project framework.</param>
            <param name="items">The module assemblies.</param>
            <param name="compatibleItems">The compatible modules assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.VersionUtility.NormalizeVersion(System.Version)">
            <summary>
            Normalizes the version.
            </summary>
            <param name="version">The verison.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.VersionUtility.IsCompatible(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
            <summary>
            Determines whether the specified framework name is compatible with target framework name.
            </summary>
            <param name="frameworkName">Name of the framework.</param>
            <param name="targetFrameworkName">Name of the target framework.</param>
            <returns>
              <c>true</c> if the specified framework name is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Modules.VersionUtility.GetProfileCompatibility(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
            <summary>
            Given 2 framework names, this method returns a number which determines how compatible
            the names are. The higher the number the more compatible the frameworks are.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.DropDownMenuItem">
            <summary>
            A top menu item that opens other menu items in a drop down menu.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.DropDownMenuItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.DropDownMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.DropDownMenuItem.NodeCssClass">
            <summary>
            Gets the css to apply on the li tag that encapsulates the link
            </summary>
            <value></value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.DropDownMenuItem.IsLeaf">
            <summary>
            Drop downs are not leaves.
            </summary>
            <value></value>
        </member>
        <member name="T:EPiServer.Shell.Navigation.IMenuProvider">
            <summary>
            Classes implementing this interface can be used to provide links to the
            shell menu.
            </summary>
            <remarks>
            Besides implementing the interface menu providers must also be exported
            for usage by the composition container. This is typically done by the class' 
            assembly beeing configured in web.config.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Navigation.IMenuProvider.GetMenuItems">
            <summary>
            This method is called when the menu is being assembled.
            </summary>
            <returns>A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s that the provider exposes.</returns>
            <remarks>
            The Provider implementation has to handle the security themself.
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuAssembler">
            <summary>
            Class used to assemble the site center menu
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAssembler.MenuProviders">
            <summary>
            The menu providers for the assembler.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAssembler.#ctor(EPiServer.Shell.Navigation.IMenuProvider[],EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuAssembler"/> class.
            </summary>
            <param name="menuProviders">Available menu providers.</param>
            <param name="container">Used to get the request context.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAssembler.GetMenuHierarchy(System.String,System.Int32)">
            <summary>
            Creates a menu hierarchy and returns the nodes from below the given path uptil the supplied depth
            </summary>
            <param name="rootPath">Menu root path, e.g "/top".</param>
            <param name="relativeDepth">Menu depth, relative to the rootPath</param>
            <returns>
            a List of top <see cref="T:EPiServer.Shell.Navigation.MenuNode"/>s and theirs children.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAssembler.GetMenuHierarchy(System.String,System.Int32,System.String)">
            <summary>
            Creates a menu hierarchy and returns the nodes from below the given path uptil the supplied depth
            </summary>
            <param name="rootPath">Menu root path, e.g "/top".</param>
            <param name="relativeDepth">Depth of the nodes to include in the result, relative to the rootPath depth</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>
            a List of top <see cref="T:EPiServer.Shell.Navigation.MenuNode"/>s and theirs children.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAssembler.GetMenuItems(System.String,System.Int32)">
            <summary>
            Gets all menu items below a certain path uptil the given depth
            </summary>
            <param name="parentPath">The path.</param>
            <param name="relativeDepth">The max depth.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuAttributeBase">
            <summary>
            Base class for attributes that builds up the navigation.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAttributeBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuAttributeBase"/> class.
            </summary>
            <param name="menuPath">The unique path of the menu item.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAttributeBase.Text">
            <summary>
            Text to display in the menu
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAttributeBase.MenuPath">
            <summary>
            Unique path for the menu item
            </summary>
            <example>
            /top/forum/search
            </example>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAttributeBase.TextResourceKey">
            <summary>
            Name of a resource key to use for localized menu text
            </summary>
            <remarks>This can either be a resource key to a resource provided by <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>
            or the name of the static resource wrapper property if <see cref="P:EPiServer.Shell.Navigation.MenuAttributeBase.ResourceType"/> is set.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAttributeBase.ResourceType">
            <summary>
            The strongly typed resource wrapper to use for resource string lookups
            </summary>
            <remarks>
            <para>If not set the <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> 
            will be used to find a match for <see cref="P:EPiServer.Shell.Navigation.MenuAttributeBase.TextResourceKey"/>.</para>
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuAttributeBase.SortIndex">
            <summary>
            An index for ordering menu items. See <see cref="P:EPiServer.Shell.Navigation.MenuAttributeBase.SortIndex"/> values for predefined values.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAttributeBase.GetLocalizedText(System.String,System.String)">
            <summary>
            Gets the localized text or the fallback text if no localized text is found.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="fallbackText">The fallback text.</param>
            <remarks>This uses the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> 
            if <see cref="P:EPiServer.Shell.Navigation.MenuAttributeBase.ResourceType"/> is <c>null</c>.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuAttributeBase.GetLocalizedText(System.String,System.String,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Gets the localized text or the fallback text if no localized text is found.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="fallbackText">The fallback text.</param>
            <param name="localizationService">The service used for localization.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuBuilder">
            <summary>
            Builds a html structure of the shell menu
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuBuilder.#ctor(EPiServer.Shell.Navigation.MenuAssembler,EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuBuilder"/> class.
            </summary>
            <param name="assembler">The assembler.</param>
            <param name="serviceLocator">Used to get the request.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuBuilder.GetMenu(System.String)">
            <summary>
            Gets the menu html.
            </summary>
            <param name="startPath">The start path.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuBuilder.GetMenu(System.String,System.String)">
            <summary>
            Gets the menu html.
            </summary>
            <param name="startPath">The start path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuBuilder.Render(System.IO.TextWriter,System.String,System.String)">
            <summary>
            Renders the menu onto the supplied text writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="startPath">The start path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuHelper">
            <summary>
            Methods used to render menus in various locations.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.GlobalMenu(System.Web.Mvc.HtmlHelper)">
            <summary>
            Renders a complete GlobalMenu with containing html elements
            </summary>
            <param name="htmlHelper">The object this method is attached to.</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.GlobalMenu(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a complete GlobalMenu with containing html elements
            </summary>
            <param name="htmlHelper">The object this method is attached to.</param>
            <param name="path">The menu path.</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.GlobalMenu(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Renders a complete GlobalMenu with containing html elements
            </summary>
            <param name="htmlHelper">The object this method is attached to.</param>
            <param name="path">The menu path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.LocalMenu(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a complete LocalMenu with containing html elements
            </summary>
            <param name="htmlHelper">The object this method is attached to.</param>
            <param name="path">The menu path.</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.LocalMenu(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Renders a complete LocalMenu with containing html elements
            </summary>
            <param name="htmlHelper">The object this method is attached to.</param>
            <param name="path">The menu path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.ShellMenu(System.String,System.String)">
            <summary>
            Renders a complete menu with containing html elements
            </summary>
            <param name="path">The menu path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.EnsureValidMenuPath(System.String)">
            <summary>
            Ensures the the path is valid. Removes trailing / and appends missing / at the start
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.CalculatePathDepth(System.String)">
            <summary>
            Calculates depth of the menu path.
            </summary>
            <param name="path">The path to calculate on</param>
            <returns>The depth of the patch</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.CreateGlobalMenu(System.String,System.String)">
            <summary>
            Renders a complete GlobalMenu with containing html elements
            </summary>
            <param name="path">The menu path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuHelper.CreateLocalMenu(System.String,System.String)">
            <summary>
            Renders a complete LocalMenu with containing html elements
            </summary>
            <param name="path">The menu path.</param>
            <param name="selectionPath">The menu path to select, If null the selection will be autoresolved</param>
            <returns>A chunk of html</returns>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuItem">
            <summary>
            Base class for all menu items
            </summary>
            <example>
            This example shows how to create a top level menu called "Dashboard" and sub menu item to it called "Controls".
            <code>
            MenuSectionItem topMenu = new MenuSectionItem("Dashboard", "/top/dashboard");
            RouteMenuItem subMenu = new MenuItem("Controls","/top/dashboard/controls", "Index", new { controller = "ExampleControls", moduleArea="Shell" });
            </code>
            </example>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuItem"/> class
            </summary>
            <param name="text">Text for the link</param>
            <param name="path">Unique path for the menu item</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Text">
            <summary>
            Link text
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.ToolTip">
            <summary>
            Tooltip text
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.CssClass">
            <summary>
            CSS class
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.SortIndex">
            <summary>
            Sort index for the menu item
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Url">
            <summary>
            The url to the interface referenced by this menu item.
            </summary>
            <returns>The url for the menu item</returns>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Alignment">
            <summary>
            The alignment for this menu item in the menu, e.g. Right.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.IsLeaf">
            <summary>
            Indicates whether this menu items has any children that should be displayed in the menu.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.IsStyled">
            <summary>
            Will render additional span elements used for adding icons to this menu item via style sheets
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Path">
            <summary>
            Unique path for the menu item
            </summary>
            <example>
            /top/forum/search
            </example>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Target">
            <summary>
            Target frame.
            </summary>
            <example>
            _blank
            </example>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.Depth">
            <summary>
            Get the depth of the path.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.IsAvailable">
            <summary>
            The delegate responsible for determining the menuitems avaliability in a certain context.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.ExcludeFromSearch">
            <summary>
            Gets or sets a value indicating whether this menu item should be excluded from the navigation search provider.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItem.ToString">
            <summary>
            Returns a string with the Path, Text and URL for the <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItem.IsSelected(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether the menu item is selected withing the the specified request context.
            </summary>
            <param name="requestContext">The request context.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItem.NodeCssClass">
            <summary>
            Gets the css to apply on the li tag that encapsulates the link
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItem.RenderContents(System.IO.TextWriter)">
            <summary>
            Renders the menu item contents (probably a link).
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuItemAlignment">
            <summary>
            Defines how a menu item should be aligned.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuItemAlignment.Left">
            <summary>
            Default alignment (left)
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuItemAlignment.Right">
            <summary>
            Align menu item to the right
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuItemAttribute">
            <summary>
            Declares a menu item.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItemAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuItemAttribute"/> class.
            </summary>
            <param name="menuPath">The unique path of the menu item.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItemAttribute.Url">
            <summary>
            Gets or sets the URL corresponding o the menu item.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuItemAttribute.CssClass">
            <summary>
            The CSS class for the menu item
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuItemAttribute.GetResolvedUrl">
            <summary>
            Resolves and returns the <see cref="P:EPiServer.Shell.Navigation.MenuItemAttribute.Url"/> parameter.
            </summary>
            <returns>The resolved <see cref="P:EPiServer.Shell.Navigation.MenuItemAttribute.Url"/> parameter.</returns>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuNode">
            <summary>
            Class that represents a <see cref="T:EPiServer.Shell.Navigation.MenuNode"/> and its children.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuNode._nestedNavigationId">
            <summary>
            An id assigned to sub-menu items
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.#ctor(EPiServer.Shell.Navigation.MenuNode,EPiServer.Shell.Navigation.MenuItem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuNode"/> class.
            </summary>
            <param name="parent">The parent menu node.</param>
            <param name="current">Menu item</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.#ctor(EPiServer.Shell.Navigation.MenuNode,EPiServer.Shell.Navigation.MenuItem,System.Collections.Generic.IEnumerable{EPiServer.Shell.Navigation.MenuNode})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuNode"/> class.
            </summary>
            <param name="parent">The parent menu node.</param>
            <param name="current">Menu item</param>
            <param name="children">The immediate child nodes to this node.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuNode.Parent">
            <summary>
            Parent node, Is null if it a top node
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuNode.Current">
            <summary>
            Menu item
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuNode.Children">
            <summary>
            Child menu items
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuNode.IsSelected">
            <summary>
            Gets or sets a value indicating whether this node is selected
            </summary>
            <remarks>
            This will set the selection to all its parents.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.SortChildren">
            <summary>
            Sort the list of menu items
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.Find(System.String)">
            <summary>
            Finds a <see cref="T:EPiServer.Shell.Navigation.MenuNode"/>.
            </summary>
            <param name="path">The path to search for</param>
            <returns>Returns the <see cref="T:EPiServer.Shell.Navigation.MenuNode"/> matching the path, otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.CompareTo(EPiServer.Shell.Navigation.MenuNode)">
            <summary>
            Compares the current object with another object of the same type.
            The comparison is made by comparing the integer value Current.SortIndex.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.Render(System.IO.TextWriter,System.Web.Routing.RequestContext)">
            <summary>
            Renders a menu node and it's children.
            </summary>
            <param name="writer">The writer.</param>
            <param name="request">The request used for filtering by access.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.RenderStart(System.IO.TextWriter)">
            <summary>
            Renders the start of menu node.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuNode.RenderEnd(System.IO.TextWriter)">
            <summary>
            Renders the end of the menu node.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuPaths">
            <summary>
            Known base paths in EPiServer.Shell
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuPaths.Global">
            <summary>
            Top menu path, /global
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuPaths.Help">
            <summary>
            Help menu path, /global/help
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuPaths.User">
            <summary>
            User menu path, /global/user
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.MenuPaths.UserSettings">
            <summary>
            User settings menu path, /global/user/settings
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuProviderAttribute">
            <summary>
            Menu provider attribute. A wrapper for the MEF's Export attribute for IMenuProvider interface.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuProviderAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.MenuProviderAttribute.Lifecycle">
            <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.MenuSectionAttribute">
            <summary>
            Defines a menu section when placed on a <see cref="T:System.Web.Mvc.IController"/> or <see cref="T:System.Web.UI.Page"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.MenuSectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.MenuSectionAttribute"/> class.
            </summary>
            <param name="menuPath">The unique path of the menu item.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.PopupMenuItem">
            <summary>
            Menu item wich create popup window
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Navigation.PopupMenuItem.Width">
            <summary>
            Gets or sets the window width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.PopupMenuItem.Height">
            <summary>
            Gets or sets the window height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.PopupMenuItem.Name">
            <summary>
            Gets or sets the window name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.PopupMenuItem.Options">
            <summary>
            Gets or sets the window additional options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.PopupMenuItem"/> class.
            </summary>
            <param name="text">Menu item text.</param>
            <param name="path">Unique path for the menu item.</param>
            <param name="url">The URL to put pop up in.</param>
            <param name="width">The poped up window width.</param>
            <param name="height">The poped up window height.</param>
            <param name="name">The poped up window name.</param>
            <param name="options">The other poped up window options.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.PopupMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item</param>
            <param name="url">Link Url</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.PopupMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item</param>
            <param name="url">Link Url</param>
            <param name="name">The poped up window name.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.RenderContents(System.IO.TextWriter)">
            <summary>
            Renders the menu item contents (probably a link).
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.GetOpenWindowScript">
            <summary>
            Gets the open window script.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Navigation.PopupMenuItem.GetWindowOptions">
            <summary>
            Gets the window options.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Navigation.RouteMenuItem">
            <summary>
            MVC Route MenuItem
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.RouteMenuItem.#ctor(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
             Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.RouteMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item.</param>
            <param name="routeValues">Extra route values</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.RouteMenuItem.RouteValues">
            <summary>
            Extra route values
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.RouteMenuItem.IsSelected(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether the menu item is selected withing the the specified request context.
            </summary>
            <param name="requestContext">The request context.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.ScriptMenuItem">
            <summary>
            Creates a menu item that invokes a JavaScript method when clicked
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.ScriptMenuItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.ScriptMenuItem"/> class.
            </summary>
            <param name="text">Menu item text.</param>
            <param name="path">Unique path for the menu item.</param>
            <param name="method">The JavaScript method to invoke.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.ScriptMenuItem.Method">
            <summary>
            Gets or sets the JavaScript method to invoke on click.
            </summary>
            <value>The method.</value>
        </member>
        <member name="M:EPiServer.Shell.Navigation.ScriptMenuItem.RenderContents(System.IO.TextWriter)">
            <summary>
            Renders the menu item contents.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.SectionMenuItem">
            <summary>
            A top menu item that contains other menu items as children
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.SectionMenuItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.SectionMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.SectionMenuItem.NodeCssClass">
            <summary>
            Gets the css to apply on the li tag that encapsulates the link
            </summary>
            <value></value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.SectionMenuItem.IsLeaf">
            <summary>
            Menu sections are not leaves.
            </summary>
            <value></value>
        </member>
        <member name="T:EPiServer.Shell.Navigation.SortIndex">
            <summary>
            Helps in ordering menu items by providing a standard set of menu positions.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.SortIndex.First">
            <summary>
            Approximate index for the first position in the menu [-1000].
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.SortIndex.Early">
            <summary>
            Approximate index for a early position in the menu [-100].
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.SortIndex.Normal">
            <summary>
            Approximate index for a normal position in the menu [0].
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.SortIndex.Late">
            <summary>
            Approximate index for a late position in the menu [100].
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.SortIndex.Last">
            <summary>
            Approximate index for the last position in the menu [1000].
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.Targets">
            <summary>
            Helper class for anchor targets
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.Targets.Blank">
            <summary>
            _blank target 
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.Targets.Parent">
            <summary>
            _parent target
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.Targets.Self">
            <summary>
            _self target
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.Targets.Top">
            <summary>
            _top target
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Navigation.Targets.Help">
            <summary>
            Help target window name
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Navigation.UrlMenuItem">
            <summary>
            Basic URI menu item
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.UrlMenuItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.UrlMenuItem"/> class.
            </summary>
            <param name="text">Link text</param>
            <param name="path">Unique path for the menu item</param>
            <param name="url">Link Url</param>
        </member>
        <member name="T:EPiServer.Shell.Navigation.Providers.ConfigNavigationProvider">
            <summary>
            Provides menu items configured in web.config
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ConfigNavigationProvider.#ctor(EPiServer.Shell.Configuration.EPiServerShellSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.Providers.ConfigNavigationProvider"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ConfigNavigationProvider.GetMenuItems">
            <summary>
            This method is called when the menu is being assembled.
            </summary>
            <returns>
            A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s that the provider exposes.
            </returns>
            <remarks>
            The Provider implementation has to handle the security themself.
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Navigation.Providers.ModuleHelpMenuProvider">
            <summary>
            Help menu provider that lists all help files defined within the <see cref="T:EPiServer.Shell.Modules.ShellModule"/>s <see cref="T:EPiServer.Shell.Configuration.ShellModuleManifest"/> file.
            It uses the <see cref="T:EPiServer.Shell.Modules.ShellModule"/>.Name when creating the menu item.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ModuleHelpMenuProvider.#ctor(EPiServer.Shell.Modules.ModuleTable,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.Providers.ModuleHelpMenuProvider"/> class.
            </summary>
            <param name="moduleManager">Module manager to use.</param>
            <param name="localizationService">The service used for localization.</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ModuleHelpMenuProvider.GetMenuItems">
            <summary>
            This method is called when the menu is being assembled.
            </summary>
            <returns>
            A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s that the provider exposes.
            </returns>
            <remarks>
            The Provider implementation has to handle the security themself.
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider">
            <summary>
            Provides search for the shell menu items.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider.#ctor(EPiServer.Shell.Navigation.IMenuProvider[],StructureMap.IContainer,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider"/> class.
            </summary>
            <param name="providers">Available menu providers.</param>
            <param name="container">Used to retrieve the request context at runtime.</param>
            <param name="localizationService">The localizationService used for translation.</param>
        </member>
        <member name="P:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider.Area">
            <summary>
            Area that the provider mapps to, used for spotlight searching
            </summary>
            <value>Shell</value>
        </member>
        <member name="P:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider.Category">
            <summary>
            The category that the provider returns hits in
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.NavigationSearchProvider.Search(EPiServer.Shell.Search.Query)">
            <summary>
            Gives an enumeration of menu items matching the query.
            </summary>
            <param name="query">Text in the menu items to look for.</param>
            <returns>An enumeration of menu items.</returns>
        </member>
        <member name="T:EPiServer.Shell.Navigation.Providers.ReflectingMenuItemProvider">
            <summary>
            Loads <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s from attributed controllers and pages.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ReflectingMenuItemProvider.#ctor(EPiServer.Shell.Modules.ModuleTable,EPiServer.ServiceLocation.IServiceLocator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Navigation.Providers.ReflectingMenuItemProvider"/> class with specific configuration.
            This contructor is used for unit tests.
            </summary>
            <param name="moduleManager">The module manager.</param>
            <param name="container">Used to get request and the route collection.</param>
            <param name="localizationService">The service used for localization.</param>
            <param name="typeScannerLookup">The global type scanner repository</param>
        </member>
        <member name="M:EPiServer.Shell.Navigation.Providers.ReflectingMenuItemProvider.GetMenuItems">
            <summary>
            Probes plug-in assemblies for MVC controller methods and classes inheriting from <see cref="T:System.Web.UI.Page"/>
            decorated with the <see cref="T:EPiServer.Shell.Navigation.MenuItemAttribute"/>.
            </summary>
            <returns>
            A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s found when probing assemblies.
            </returns>
            <remarks>
            The Provider implementation has to handle the security themself.
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ClientEditorAttribute">
            <summary>
            Attribute to overwrite system's default editor. Can be applied to either classes or properties
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.ClientEditingClass">
            <summary>
            Gets or sets the client editing class, usually a DOJO widget.
            </summary>
            <value>The client editing class.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.ClientEditingPackage">
            <summary>
            Gets or sets the client editing class package, which needs to be required, usually a dojo package. 
            Leave it empty if package name is the same to class name.
            </summary>
            <value>
            The client editing class package.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.LayoutClass">
            <summary>
            Gets or sets the layout class.
            </summary>
            <value>
            The layout class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.DefaultValue">
            <summary>
            Gets or sets the default binding value.
            </summary>
            <value>
            The default binding value.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.EditorConfiguration">
            <summary>
            Gets or sets the editors initial configuration. Should be a string in JSON format. This will be passed to the editor class's constructor
            </summary>
            <value>
            The editors configuration.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.OverlayConfiguration">
            <summary>
            Gets or sets the configuration of the overlay. Should be a string in JSON format. This will be passed to the editor class's constructor
            </summary>
            <value>
            The overlays configuration.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ClientEditorAttribute.SelectionFactoryType">
            <summary>
            Gets or sets the type of the selection factory.
            </summary>
            <value>
            The type of the selection factory.
            </value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.DefaultDragAndDropTargetAttribute">
            <summary>
            Set this to define which property that should accept drag and drop operations for a complex object in the overlay.
            </summary>
            <remarks>An example of usage is to set this attribute on an image for a block containing an image and text. The
            intended usage is to define this on a single property on a model. If this attribute has been defined on several
            properties the last property will override the configuration defined by any other attributes on the same model.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.DefaultDragAndDropTargetAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
            <summary>
            When implemented in a class, provides metadata to the model metadata creation process.
            </summary>
            <param name="metadata">The model metadata.</param>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptorAttribute">
            <summary>
            Provides default editor settings for a class or property. These settings are applied first so specific attributes will
            override the settings from the editor descriptor.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptorAttribute.EditorDescriptorType">
            <summary>
            Gets or sets the editor descriptor type that you want to use.
            </summary>
            <value>The editor descriptor type.</value>
            <remarks>The settings for the editor types can be overridden with the specific attributes on <see cref="T:EPiServer.Shell.ObjectEditing.ClientEditorAttribute"/>.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider">
            <summary>
            Extracts metadata from attributes for any given class. This can be used to create user interfaces for editing any given object.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.#ctor(EPiServer.Framework.Localization.LocalizationService,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="httpContextBase">HttpContextBase</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="httpContext">Access to the current HTTP context</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Gets the metadata for the specified property.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="containerType">The type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">The type of the model.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The metadata for the property.</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider.CreateExtendedMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Internal creation of meta data that use the logic from the base MVC class and extends it with additional EPiServer specific attributes.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata">
            <summary>
            Provides metadata for a given type or property.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.#ctor(System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata"/> class.
            </summary>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.#ctor(System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute,EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata" /> class.
            </summary>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="displayColumnAttribute">The display column attribute.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.#ctor(System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute,EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata" /> class.
            </summary>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="displayColumnAttribute">The display column attribute.</param>
            <param name="provider">The provider.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.#ctor(System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute,EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider,EPiServer.Framework.Localization.LocalizationService,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata" /> class.
            </summary>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="displayColumnAttribute">The display column attribute.</param>
            <param name="provider">The provider.</param>
            <param name="localizationService">The localization service.</param>
            <param name="httpContextBase">HttpContextBase</param>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.Parent">
            <summary>
            Gets or sets the Parent metadata.
            </summary>
            <value>
            The Parent.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.UIHint">
            <summary>
            Gets or sets the hint which is used to find a specific metadata handler for this type and hint.
            </summary>
            <value>
            The hint.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.CustomMetadataProvider">
            <summary>
            Gets or sets the custom metadata provider.
            </summary>
            <value>The custom metadata provider.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.Properties">
            <summary>
            Gets a collection of model metadata objects that describe the properties of the model.
            </summary>
            <value></value>
            <returns>A collection of model metadata objects that describe the properties of the model.</returns>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.MappedProperties">
            <summary>
            Gets the mappings between property names.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ClientEditingClass">
            <summary>
            Gets or sets the client editing class.
            </summary>
            <value>
            The client editing class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ClientEditingPackage">
            <summary>
            Gets or sets the client editing package.
            </summary>
            <value>
            The client editing package.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.CustomEditorSettings">
            <summary>
            Gets or sets the custom editor settings.
            </summary>
            <value>The custom editor settings.</value>
            <remarks>This might include information about custom editor wrappers.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.LayoutClass">
            <summary>
            Gets or sets the layout class.
            </summary>
            <value>
            The layout class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
            <value>
            The initial value.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.SelectionFactoryType">
            <summary>
            Gets or sets the type of the selection factory.
            </summary>
            <value>
            The type of the selection factory.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.EditorConfiguration">
            <summary>
            Gets or sets the editor configuraion.
            </summary>
            <value>
            The editor configuraion.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.OverlayConfiguration">
            <summary>
            Gets or sets the configuration data for the overlay.
            </summary>
            <value>
            The overlay configuraion.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GroupSettings">
            <summary>
            Gets or sets the <see cref="P:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GroupSettings"/> information for the current property.
            </summary>
            <value>The group settings.</value>
            <remarks>This can only be defined on property level. If several properties specify group settings for the same group an exception will be thrown.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GetEditorSettings(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Generate widget setting string
            </summary>
            <returns>Widget setting string</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GetRequiredMessage(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Take error message from Required validator to assign to widget's missingMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GetInvalidMessage(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Concatenate invalid message from all validators
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GetValidationSettings">
            <summary>
            Try to convert MVC validation rules to dojo's regEx pattern
            </summary>
            <returns>A dictionary contains dojo settings</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.GetClientValidatorRule``1">
            <summary>
            Gets the client validator rule.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.InitializeFromAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Initializes metadata values from data annotation attributes.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromHiddenInputAttribute(System.Web.Mvc.HiddenInputAttribute)">
            <summary>
            Extracts the settings from hidden input attribute.
            </summary>
            <param name="hiddenInputAttribute">The hidden input attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromUIHintAttributes(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.UIHintAttribute})">
            <summary>
            Reads the settings from UI hint attribute.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromEditableAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Reads the settings from editable attribute.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromScaffoldColumnAttribute(System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute)">
            <summary>
            Reads the settings from scaffold column attribute.
            </summary>
            <param name="scaffoldColumnAttribute">The scaffold column attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromDisplayAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Reads the settings from display attribute.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromRequiredAttribute(System.ComponentModel.DataAnnotations.RequiredAttribute)">
            <summary>
            Reads the settings from required attribute.
            </summary>
            <param name="requiredAttribute">The required attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromClientSideEditorAttribute(EPiServer.Shell.ObjectEditing.ClientEditorAttribute)">
            <summary>
            Reads the settings from client side editor attribute.
            </summary>
            <param name="editorAttribute">The editor attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromGroupSettingsAttribute(EPiServer.Shell.ObjectEditing.GroupSettingsAttribute)">
            <summary>
            Reads the settings from group settings attribute.
            </summary>
            <param name="groupSettingsAttribute">The group settings attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromHintAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Reads the settings from data type override attribute.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromDataTypeAttribute(System.ComponentModel.DataAnnotations.DataTypeAttribute)">
            <summary>
            Reads the settings from data type attribute.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromDisplayFormatAttribute(System.ComponentModel.DataAnnotations.DisplayFormatAttribute,System.ComponentModel.DataAnnotations.DataTypeAttribute)">
            <summary>
            Reads the settings from display format attribute.
            </summary>
            <param name="displayFormatAttribute">The display format attribute.</param>
            <param name="dataTypeAttribute">The data type attribute.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtendedMetadata.ReadSettingsFromEditorDescriptorAttribute(EPiServer.Shell.ObjectEditing.EditorDescriptorAttribute)">
            <summary>
            Reads the settings from editor descriptor attribute.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider">
            <summary>
            Extracts metadata for classes and properties and applies information from
            system wide editor extenders registered in <see cref="P:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.MetadataHandlerRegistry"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.MetadataHandlerRegistry">
            <summary>
            Gets the metadata handler registry.
            </summary>
            <value>The metadata handler registry.</value>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider"/> class.
            </summary>
            <param name="metadataHandlerRegistry">The metadata registry.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider" /> class.
            </summary>
            <param name="metadataHandlerRegistry">The metadata registry.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry,EPiServer.Framework.Localization.LocalizationService,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider" /> class.
            </summary>
            <param name="metadataHandlerRegistry">The metadata registry.</param>
            <param name="localizationService">The localization service.</param>
            <param name="httpContextBase">HttpContextBase</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry,EPiServer.Framework.Localization.LocalizationService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider" /> class.
            </summary>
            <param name="metadataHandlerRegistry">The metadata registry.</param>
            <param name="localizationService">The localization service.</param>
            <param name="httpContext">Access to the current HTTP context</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Gets the metadata for the specified property.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="containerType">The type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">The type of the model.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The metadata for the property.</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider.GetMetadataForProperties(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Object,System.Type,EPiServer.Shell.ObjectEditing.IMetadataProvider)">
            <summary>
            Gets the metadata for properties.
            </summary>
            <param name="parent">The parent metadata.</param>
            <param name="container">The container.</param>
            <param name="containerType">Type of the container.</param>
            <param name="customProvider">The custom provider.</param>
            <returns>
            The metadata for the properties of a given object/type.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.GroupSettings">
            <summary>
            Provides information on how property groups should work. This can be used to sort and display property groups.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.GroupSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.GroupSettings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.GroupSettings.#ctor(System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.GroupSettings"/> class.
            </summary>
            <param name="name">Name that is used as an identifier for the group.</param>
            <param name="displayUI">States if a group will be shown on the UI.</param>
            <param name="clientLayoutClass">Client class used to layout the property group, usually a DOJO widget.</param>
            <param name="options">The options.</param>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.Title">
            <summary>
            Gets or sets the localized title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.Name">
            <summary>
            Gets or sets the name that is used as an identifier for the group.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.DisplayUI">
            <summary>
            States if a group will be shown on the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
            <value>
            The display order.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.ClientLayoutClass">
            <summary>
            Gets or sets the client class used to layout the property group, usually a DOJO widget.
            </summary>
            <value>The client side layout class.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettings.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.GroupSettingsAttribute">
            <summary>
            Used to define group settings for a property group on a class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettingsAttribute.Title">
            <summary>
            Gets or sets the localized title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettingsAttribute.Name">
            <summary>
            Gets or sets the name that is used as an identifier for the group.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.GroupSettingsAttribute.ClientLayoutClass">
            <summary>
            Gets or sets the client class used to layout the property group, usually a DOJO widget.
            </summary>
            <value>The client side layout class.</value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.IMetadataExtender">
            <summary>
            Implement this interface to be able to modify metadata.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.IMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Use to add change metadata for the editor before the UI is rendered.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.IMetadataHandler">
            <summary>
            Base interface for classes that want to provide or modify meta data.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.IMetadataPropertyMappingProvider">
            <summary>
            Provides property mappings between the name in the property collection, and the name on the interface.
            </summary>
            <remarks>Used internally by the UI. Should not need to be implemented by third party users.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.IMetadataPropertyMappingProvider.GetPropertyMappings(System.Object)">
            <summary>
            Gets the property mappings between the name in the property collection, and the name on the interface.
            </summary>
            <param name="container">The container that has the properties to get mappings for.</param>
            <returns>A dictionary containing mappings</returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.IMetadataProvider">
            <summary>
            Implement this interface to be able to provide metadata for an entire class and it's sub properties.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.IMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Gets the metadata for the specified property.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="containerType">The type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">The type of the model.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The metadata for the property.</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.IMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
            <summary>
            Gets the metadata for the properties of a given type.
            </summary>
            <param name="container">The container.</param>
            <param name="containerType">Type of the container.</param>
            <returns>The metadata for the properties of the type.</returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.IModelAccessorCreator">
            <summary>
            Interface to support creating metadata model accessor from set of arguments
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.IModelAccessorCreator.Create(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates the metadata model accessor.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ISelectionFactory">
            <summary>
            Creates a list of selection items for a specific property.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ISelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Creates a list of selection items for a specific property.
            </summary>
            <param name="metadata">The metadata for a property.</param>
            <returns>A list of selection items for a specific property.</returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.LocalizationServiceExtensions">
            <summary>
            Localization service extension
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.LocalizationServiceExtensions.GetTranslationIfNeeded(EPiServer.Framework.Localization.LocalizationService,System.String)">
            <summary>
            Gets the translation if needed.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="resourceKey">The resource key.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry">
            <summary>
            Registry that holds all metadataHandlers for entity types.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.#ctor(EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor[],EPiServer.Shell.ObjectEditing.IModelAccessorCreator[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry"/> class.
            </summary>
            <param name="descriptors">An array of <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor"/> objects to register target types for</param>
            <param name="modelAccessorCreators">An array of <see cref="T:EPiServer.Shell.ObjectEditing.IModelAccessorCreator"/> objects to register target type for</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.GetMetadataHandlers(System.Type)">
            <summary>
            Gets the metadata handlers.
            </summary>
            <param name="type">The type.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the registered handlers.</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.GetMetadataHandlers(System.Type,System.String)">
            <summary>
            Gets all object metadataHandlers for a type.
            </summary>
            <param name="type">The type.</param>
            <param name="uiHint">The type override.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the registered handlers.</returns>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.RegisterMetadataHandler(System.Type,EPiServer.Shell.ObjectEditing.IMetadataHandler)">
            <summary>
            Registers the metadata handler.
            </summary>
            <param name="type">The type.</param>
            <param name="metadataHandler">The metadata handler.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.RegisterMetadataHandler(System.Type,EPiServer.Shell.ObjectEditing.IMetadataHandler,System.String)">
            <summary>
            Registers a metadataHandler for a type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadataHandler">The metadataHandler.</param>
            <param name="typeOverride">The type override.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.RegisterMetadataHandler(System.Type,EPiServer.Shell.ObjectEditing.IMetadataHandler,System.String,EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior)">
            <summary>
            Registers a metadataHandler for a type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadataHandler">The metadataHandler.</param>
            <param name="uiHint">The type override.</param>
            <param name="editorDescriptorBehavior">If the base handlers should be applied before specific handlers.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.RegisterMetadataHandler(System.Type[],EPiServer.Shell.ObjectEditing.IMetadataHandler)">
            <summary>
            Registers a metadataHandler for several types.
            </summary>
            <param name="types">The types.</param>
            <param name="metadataHandler">The metadataHandler.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.RegisterModelAccessorCreator(System.Type,EPiServer.Shell.ObjectEditing.IModelAccessorCreator)">
            <summary>
            Register a model accessor for the given type.
            </summary>
            <param name="type">The type</param>
            <param name="accessorCreator">The accessor creator</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry.GetModelAccessor(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get model accessor for the given type
            </summary>
            <param name="type">The type</param>
            <param name="arguments">Arguments to be sent to the model accessor creator</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ModelAccessorCreatorRegistrationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.ModelAccessorCreatorRegistrationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.ModelAccessorCreatorRegistrationAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ModelAccessorCreatorRegistrationAttribute.TargetType">
            <summary>
            Gets or sets the editor descriptor type that you want to use.
            </summary>
            <value>The editor descriptor type.</value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.PropertyMapping">
            <summary>
            Represents a mapping between property names.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.PropertyMapping.From">
            <summary>
            Gets or sets the name of the from property.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.PropertyMapping.To">
            <summary>
            Gets or sets the name of the to property.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.PropertyMapping.op_Equality(EPiServer.Shell.ObjectEditing.PropertyMapping,EPiServer.Shell.ObjectEditing.PropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.PropertyMapping.op_Inequality(EPiServer.Shell.ObjectEditing.PropertyMapping,EPiServer.Shell.ObjectEditing.PropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.PropertyMapping.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.PropertyMapping.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.PropertyMapping.ToString">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.SelectionFactoryRegistrationAttribute">
            <summary>
            Register a <see cref="T:EPiServer.Shell.ObjectEditing.ISelectionFactory"/> instance to IOC container.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.SelectionFactoryRegistrationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.SelectionFactoryRegistrationAttribute"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.ISelectItem">
            <summary>
            Common interface for selections using on client object editing
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ISelectItem.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.ISelectItem.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.SelectItem">
            <summary>
            Default implementation of <see cref="T:EPiServer.Shell.ObjectEditing.ISelectItem"/>
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.SelectItem.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.SelectItem.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.BooleanEditorDescriptor">
            <summary>
            Editor descriptor that will create a checkbox to be able to edit boolean values.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.BooleanEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.BooleanEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DateTimeEditorDescriptor">
            <summary>
            Editor descriptor that will create date/time selector.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.DateTimeEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DateTimeEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DecimalEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit decimal type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.DecimalEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DecimalEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DoubleEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit double type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.DoubleEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.DoubleEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor">
            <summary>
            Used for holding registered client side editors in the <see cref="T:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata, adding any custom data the client needs.
            </summary>
            <remarks>
            This method should only be overriden when you need the entire metedata object to work with.
            Otherwise, metadata properties should be set by setting the corresponding properties in the editor concrete descriptors' constructor.
            Also be aware that modifying metadata object will overwrite all data annotation attributes used in model class.
            </remarks>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The custom attributes attached to the model class</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.SetEditorConfiguration(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Sets the initial configuration for the widget.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.SetOverlayConfiguration(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Sets the initial configuration for the widget.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.AllowedTypes">
            <summary>
            Gets or sets the allowed types.
            </summary>
            <value>
            The allowed types.
            </value>
            <remarks>This is used for setting dnd types to determine what can be dropped on an editor or overlay.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.AllowedTypesFormatSuffix">
            <summary>
            Gets or sets the specific format suffix if any. For instance "reference" or "light" for different content formats.
            </summary>
            <value>
            The allowed types format suffix.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.DndSourcePropertyName">
            <summary>
            Gets or sets the name of the inner property to extract data from in an drag and drop operation.
            </summary>
            <value>
            The name of the inner property to extract for drag and drop operations.
            </value>
            <remarks>For instance, you can set url to extract the url property from a link object.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.DndTargetPropertyName">
            <summary>
            Gets or sets the name of the child property that should accept drag and drop operations to the overlay.
            </summary>
            <value>
            The name of the child property that can accept drag and drop for the overlay.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.ClientEditingClass">
            <summary>
            Gets or sets the client editing class, usually a DOJO widget.
            </summary>
            <value>The client editing class.</value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.ClientEditingPackage">
            <summary>
            Gets or sets the client editing class package, which needs to be required, usually a dojo package. 
            Leave it empty if package name is the same to class name.
            </summary>
            <value>
            The client editing class package.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.LayoutClass">
            <summary>
            Gets or sets the layout class.
            </summary>
            <value>
            The layout class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.DefaultValue">
            <summary>
            Gets or sets the default binding value.
            </summary>
            <value>
            The default binding value.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.EditorConfiguration">
            <summary>
            Gets or sets the editor configuration. This will be passed to the editor class's constructor
            </summary>
            <value>
            The editor configuration.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.OverlayConfiguration">
            <summary>
            Gets or sets the configuration data for the overlay. This will be passed to the overlay class's contructor
            </summary>
            <value>
            The overlay configuraion.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptor.SelectionFactoryType">
            <summary>
            Gets or sets the type of the selection factory.
            </summary>
            <value>
            The type of the selection factory.
            </value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute">
            <summary>
            Provides default editor settings for a class or property. These settings are applied first so specific attributes will
            override the settings from the editor descriptor.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute.TargetType">
            <summary>
            Gets or sets the editor descriptor type that you want to use.
            </summary>
            <value>The editor descriptor type.</value>
            <remarks>The settings for the editor types can be overridden with the specific attributes on <see cref="T:EPiServer.Shell.ObjectEditing.ClientEditorAttribute"/>.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute.UIHint">
            <summary>
            Gets or sets the ui hint. It provides possibility to register different editors to a type with diffirent hints.
            </summary>
            <value>
            The ui hint.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorRegistrationAttribute.EditorDescriptorBehavior">
            <summary>
            Gets or sets a value indicating whether the descriptors should be applied before this descriptor.
            </summary>
            <value>
            <c>true</c> if the base descriptors should be applied before this descriptor; otherwise, <c>false</c>.
            </value>
            <remarks>This can be used if you want to have an editor descritor that only wants to change some of the default behaviour.
            Register an editor descriptor for a specific UI Hint and set this property to true and the default descriptors will be
            called before your descriptor.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior">
            <summary>
            Specifies how an editor descriptor should interact with other descriptors for the same type.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior.Default">
            <summary>
            Adds this descriptor to the list of descriptors for the given type and ui hint combination.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior.ExtendBase">
            <summary>
            Adds this descriptor to the list of descriptors for the given type and ui hint combination and
            makes sure that the descriptors registered without a ui hint for the type are called before this descriptor.
            </summary>
            <remarks>This is only valid in combination with a ui hint.</remarks>
        </member>
        <member name="F:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior.OverrideDefault">
            <summary>
            Removes any existing descriptors for the type/ui hint combination and then adds this descriptor.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ObjectEditing.EditorDescriptors.EditorDescriptorBehavior.PlaceLast">
            <summary>
            Adds this descriptor last in the list of descriptors for the given type and ui hint combination.
            </summary>
            <remarks>If several descriptors are defined this way the order of execution is undefined.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit float type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatingPointNumericEditorDescriptor">
            <summary>
            Base class for floating point numeric types' editor descriptor
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatingPointNumericEditorDescriptor.#ctor(System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.FloatingPointNumericEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.GuidEditorDescriptor">
            <summary>
            Editor descriptor that will create a hidden input to edit a Guid value.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.GuidEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.GuidEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.IntegerEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.IntegerEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.IntegerEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.LongEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit long integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.LongEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.LongEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor">
            <summary>
            Base class for all numeric type's editor descriptor
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor.#ctor(System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.NumericEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.ShortEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit short integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.ShortEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.ShortEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.StringEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input to edit strings.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.StringEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.StringEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor">
            <summary>
            Editor descriptor that will create a an textarea that changes size depending on the content.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor.SetEditorConfiguration(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Sets the initial configuration for the widget.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:EPiServer.Shell.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor.Style">
            <summary>
            Gets or sets the style settings for the textarea.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedIntegerEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit unsigned integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedIntegerEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedIntegerEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedLongEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit unsigned long integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedLongEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedLongEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedShortEditorDescriptor">
            <summary>
            Editor descriptor that will create a standard input with validation to be able to edit unsigned short integer type.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedShortEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ObjectEditing.EditorDescriptors.UnsignedShortEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Profile.IProfileRepository">
            <summary>
            Provides access to a user profile.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Profile.IProfileRepository.GetProfile(System.String)">
            <summary>
            Gets an existing user profile.
            </summary>
            <param name="userName">The username of the profile to get.</param>
            <returns>An existing profile or null if no profile exists.</returns>
        </member>
        <member name="M:EPiServer.Shell.Profile.IProfileRepository.GetOrCreateProfile(System.String)">
            <summary>
            Gets or creates a user profile.
            </summary>
            <param name="userName">The user name of the profile to get or create.</param>
            <returns>An existing user profile, or a newly created profile if no profile previously existed.</returns>
        </member>
        <member name="M:EPiServer.Shell.Profile.IProfileRepository.Save(EPiServer.Shell.Profile.ProfileData)">
            <summary>
            Saves the given profile to persistence medium.
            </summary>
            <param name="profile">The profile data to store.</param>
        </member>
        <member name="M:EPiServer.Shell.Profile.IProfileRepository.Delete(System.String)">
            <summary>
            Deletes the profile associated with a user name.
            </summary>
            <param name="userName">The user name of the profile to delete.</param>
        </member>
        <member name="E:EPiServer.Shell.Profile.IProfileRepository.ProfileCreated">
            <summary>
            Invoked when a profile is created for the first time.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Profile.ProfileData">
            <summary>
            Contains profile information for a user.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileData.#ctor">
            <summary>
            Creats an instance of the <see cref="T:EPiServer.Shell.Profile.ProfileData"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Profile.ProfileData.Id">
            <summary>
            Gets or sets the stored item identity.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Profile.ProfileData.UserName">
            <summary>
            Gets or sets the user name of the user.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Profile.ProfileData.Settings">
            <summary>
            Gets a dictionary of settings associated with the user.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Profile.ProfileEventArgs">
            <summary>
            Provides access to a newly created profile that can be modified before being sent to the client.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Profile.ProfileEventArgs.Profile">
            <summary>
            A newly created profile.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Profile.ProfileRepository">
            <summary>
            Provides access to a user profile.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileRepository.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Shell.Profile.ProfileRepository"/> class.
            </summary>
            <param name="storeFactory">The store factory to use for creating stores.</param>
            <param name="cache"></param>
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileRepository.GetProfile(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileRepository.GetOrCreateProfile(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileRepository.Save(EPiServer.Shell.Profile.ProfileData)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Shell.Profile.ProfileRepository.Delete(System.String)">
            <inheritdoc /> 
        </member>
        <member name="E:EPiServer.Shell.Profile.ProfileRepository.ProfileCreated">
            <inheritdoc /> 
        </member>
        <member name="T:EPiServer.Shell.Profile.ServiceLocationHelperExtensions">
            <summary>
            Makes the profile part of the public API.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Profile.ServiceLocationHelperExtensions.ProfileRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>
            Resolves the <see cref="T:EPiServer.Shell.Profile.IProfileRepository"/>.
            </summary>
            <param name="helper">The service helper.</param>
            <returns>The currently registered <see cref="T:EPiServer.Shell.Profile.IProfileRepository"/>.</returns>
        </member>
        <member name="T:EPiServer.Shell.Resources.JsonResourceSerializer">
            <summary>
            Provides convenient access to culture-specific client resources at run time
            Use GetResourcesAsJson to get the JSON object.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Resources.JsonResourceSerializer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Resources.JsonResourceSerializer"/> class.
            </summary>
            <param name="resourceType">A System.Type from which the System.Resources.ResourceManager derives all information for finding .resources files.</param>
        </member>
        <member name="M:EPiServer.Shell.Resources.JsonResourceSerializer.GetResourcesAsJson(System.Globalization.CultureInfo)">
            <summary>
            Gets the resources as a JSON object. The Resources for the cultre are merged with the
            neutral cultures for the type which resource manager were created for.
            This means that if you are asking for a resource in Swedish and it does not exist you will get the resource
            in the language which the assmbly has set as neutral.
            </summary>
            <param name="culture">The culture you want your resources in.</param>
            <returns>A string representing the JSON object. "{[ResourceKey]:[ResourceValue], [ResourceKey]:[ResourceValue]}" </returns>
            <remarks>
            Will only return resources that are of type <see cref="T:System.String"/>
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.Resources.JsonResourceSerializer.GetMergedResources(System.Globalization.CultureInfo)">
            <summary>
            Merges the resources for cultureInfo with the neutral resources
            </summary>
            <param name="culture">The culture you want your resources in</param>
            <returns>Dictionary containing the merged resources</returns>
            <remarks>
            Will only return resources that are of type <see cref="T:System.String"/>
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Resources.Resource">
            <summary>
            Provides methods for simplified resource handling.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Resources.Resource.GetValueWithFallback(System.String,System.Type,System.String[])">
            <summary>
            Gets the resource value with fallback.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="resourceType">Type of the resource.</param>
            <param name="fallbacks">Fallback values to use no resource key is set.</param>
            <returns></returns>
            <remarks>If <paramref name="resourceType"/> is <c>null</c>, <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>
            will be used to try to find a value for <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Resources.Resource.GetValueWithFallback(System.String,System.Type,EPiServer.Framework.Localization.LocalizationService,System.String[])">
            <summary>
            Gets the resource value with fallback.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="resourceType">Type of the resource.</param>
            <param name="localizationService">The service used for localization.</param>
            <param name="fallbacks">Fallback values to use no resource key is set.</param>
            <returns></returns>
            <remarks>If <paramref name="resourceType"/> is <c>null</c>, <paramref name="localizationService"/>
            will be used to try to find a value for <paramref name="resourceKey"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="localizationService"/> is <c>null</c>.</exception>
        </member>
        <member name="T:EPiServer.Shell.Rest.ClientContextBase">
            <summary>
            Base class for client context.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.Uri">
            <summary>
            Gets or sets the uniform resource identifier to this selectable item.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.PreviewUrl">
            <summary>
            Gest or sets the URL on which this item is displayed to users.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.Data">
            <summary>
            The data associated with this context. This data is provided by the context in order to reduce roundtrips.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.Name">
            <summary>
            Gets a friendly name that can be displayed to the user.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.DataType">
            <summary>
            Gets or sets the content class.
            </summary>
            <value>
            The content class.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.RequestedUri">
            <summary>
            Gets or sets the requested URI.
            </summary>
            <value>The requested URI.</value>
        </member>
        <member name="P:EPiServer.Shell.Rest.ClientContextBase.VersionAgnosticUri">
            <summary>
            Gets or sets the version agnostic URI.
            </summary>
            <value>The version agnostic URI.</value>
        </member>
        <member name="T:EPiServer.Shell.Rest.IQueryParameters">
            <summary>
            The interface which carries parameters to a query.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.IQueryParameters.AllParameters">
            <summary>
            All parameters (unparsed) from the original request.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.IQueryParameters.Range">
            <summary>
            Requested range.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Rest.IQueryProvider`1">
            <summary>
            Helps finding a IRestQuery which can execute the query.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Rest.IQueryProvider`1.GetQuery(System.String,EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
            Gets the query with the requested name with the
            highest rank that can handle the query parameters
            (as reported by the CanHandleQuery method).
            </summary>
            <param name="queryName">The query name.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A matching query, or null if none can be matched.</returns>
        </member>
        <member name="T:EPiServer.Shell.Rest.IRestQuery`1">
            <summary>
            Represents a query interface for a specific type againts the rest store
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.IRestQuery`1.Name">
            <summary>
            Gets the name of the query.
            </summary>
            <value>The name.</value>
            <remarks>This will be used to identify which query to call.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Rest.IRestQuery`1.Rank">
            <summary>
            Gets the rank (priority) of the Query.
            </summary>
            <remarks>This will be used to select which query to call in case several queries
            share the same <see cref="P:EPiServer.Shell.Rest.IRestQuery`1.Name"/>. A query with a higher rank is tried before
            one with a lower rank. This can be used to inject a different query
            which is used under certain circumstances (if <see cref="M:EPiServer.Shell.Rest.IRestQuery`1.CanHandleQuery(EPiServer.Shell.Rest.IQueryParameters)" />
            returns true.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Rest.IRestQuery`1.CanHandleQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
            Decides whether the implementation is capable to handle the current query
            parameters, for example based on the reference id or the content provider.
            </summary>
            <param name="parameters">The query parameters.</param>
            <returns>True to handle the query, false to let the next query (by sort
            order) decide if it wants to handle the query.</returns>
        </member>
        <member name="M:EPiServer.Shell.Rest.IRestQuery`1.ExecuteQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
            Apply your own getting, filtering, sorting and ranking (for example if you want to do sorting and paging
            in a database call to avoid querying for items that end up not being returned.
            </summary>
            <param name="parameters">The query parameters.</param>
        </member>
        <member name="T:EPiServer.Shell.Rest.IUriContextResolver">
            <summary>
            Resovles context given an instance URI.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Rest.IUriContextResolver.Name">
            <summary>
            Gets the name for this type of data.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Rest.IUriContextResolver.TryResolveUri(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Resolves the context for a given URI.
            </summary>
            <param name="uri">The URI uniquely identifying a specific data.</param>
            <param name="instance">Returns the context representing the given URI.</param>
            <returns>True if the context was loaded.</returns>
        </member>
        <member name="T:EPiServer.Shell.Rest.IUrlContextResolver">
            <summary>
            Resolves a context given a friendly URL.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Rest.IUrlContextResolver.TryResolveUrl(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Resolves the context for a given preview URL.
            </summary>
            <param name="url">The URL on which the given data is dispayed to users.</param>
            <param name="instance">Returns the context representing the given URL.</param>
            <returns>True if the context was loaded.</returns>
        </member>
        <member name="T:EPiServer.Shell.Rest.QueryRange`1">
            <summary>
            Container for items collection and a <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> instance
            describing how the collection was selected from the corresponding total collection.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Rest.QueryRange`1.#ctor(System.Collections.Generic.IEnumerable{`0},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Initializes a new instance and sets the items collection and the resulting range.
            </summary>
            <param name="items">The items collection</param>
            <param name="range">The resulting range</param>
        </member>
        <member name="P:EPiServer.Shell.Rest.QueryRange`1.Items">
            <summary>
            The collection items.
            </summary>
            <remarks>Can be null!</remarks>
        </member>
        <member name="P:EPiServer.Shell.Rest.QueryRange`1.Range">
            <summary>
            The resulting range
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Search.ISearchProvider">
            <summary>
            Definition of a search provider
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.ISearchProvider.Area">
            <summary>
            Area that the provider mapps to, used for spotlight searching
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.ISearchProvider.Category">
            <summary>
            The category that the provider returns hits in
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.ISearchProvider.Search(EPiServer.Shell.Search.Query)">
            <summary>
            Executes a Search on the provider
            </summary>
            <param name="query">The query to execute</param>
            <returns>A list of search results</returns>
        </member>
        <member name="T:EPiServer.Shell.Search.Query">
            <summary>
            Query object passed to the <see cref="T:EPiServer.Shell.Search.ISearchProvider"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.Query.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Shell.Search.Query"/>
            </summary>
            <param name="searchQuery">Search query</param>
        </member>
        <member name="M:EPiServer.Shell.Search.Query.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Shell.Search.Query"/>
            </summary>
            <param name="searchQuery">Search query</param>
            <param name="maxResults">Maximum number of hits that should be returned</param>
        </member>
        <member name="M:EPiServer.Shell.Search.Query.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Shell.Search.Query"/>
            </summary>
            <param name="searchQuery">Search query</param>
            <param name="parameters">A collection of query parameters</param>
        </member>
        <member name="M:EPiServer.Shell.Search.Query.#ctor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Shell.Search.Query"/>
            </summary>
            <param name="searchQuery">Search query</param>
            <param name="maxResults">Maximum number of hits that should be returned</param>
            <param name="parameters">A collection of query parameters</param>
        </member>
        <member name="P:EPiServer.Shell.Search.Query.MaxResults">
            <summary>
            Gets/Sets the maximum number of hits that should be returned
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.Query.SearchQuery">
            <summary>
            Gets/Sets the search query
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.Query.SearchRoots">
            <summary>
            Gets or sets the roots used when searching.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.Query.FilterOnCulture">
            <summary>
            Gets or sets a value indicating whether to filter on culture.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.Query.Parameters">
            <summary>
            Gets a collection of query parameters to be used by the search provider.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Search.SearchProviderAttribute">
            <summary>
            Search provider attribute. A wrapper for the MEF's Export attribute for ISearchProvider interface.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchProviderAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderAttribute.Lifecycle">
            <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Search.SearchProviderPair">
            <summary>
            Used to pass configurable information about a search provider.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProviderPair.#ctor(EPiServer.Shell.Search.SearchProviderSetting,EPiServer.Shell.Search.ISearchProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchProviderPair"/> class.
            </summary>
            <param name="setting">The setting.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderPair.ProviderKey">
            <summary>
            Gets the provider typename encoded for usage on the client.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderPair.Setting">
            <summary>
            Gets or sets the setting object stored in database or default.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderPair.Provider">
            <summary>
            Gets or sets the search provider.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Search.SearchProviderSetting">
            <summary>
            Object stored in the database with information about a search provider.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProviderSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchProviderSetting"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProviderSetting.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchProviderSetting"/> class.
            </summary>
            <param name="providerTypeName">Name of the provider type.</param>
            <param name="sortIndex">Index of the sort.</param>
            <param name="isEnabled">if set to <c>true</c> [is enabled].</param>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderSetting.FullName">
            <summary>
            Gets or sets the full type name of the search provider.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderSetting.SortIndex">
            <summary>
            Gets or sets the sort index of this search provider.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProviderSetting.IsEnabled">
            <summary>
            Gets or sets whether the search provider is enabled.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Search.SearchProvidersManager">
            <summary>
            Search providers manager class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.Search.ISearchProvider},EPiServer.Data.Dynamic.DynamicDataStoreFactory)">
            <summary>
            Initalizes a new instance of <see cref="T:EPiServer.Shell.Search.SearchProvidersManager"/>.
            </summary>
            <param name="searchProviders">All available providers</param>
            <param name="storeFactory">A repository used for the actual data reading and manipulation.</param>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchProvidersManager.Store">
            <summary>
            The dynamic data store used in search provider manager.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.GetEnabledProvidersByPriority(System.String,System.Boolean)">
            <summary>
            Use this method to get the available providers prioritizing those in the specified search area.
            </summary>
            <param name="searchArea">Area to search in</param>
            <param name="filterOnArea"></param>
            <returns>A list of search providers.</returns>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.TryGetProvider(System.String,EPiServer.Shell.Search.ISearchProvider@)">
            <summary>
            Tries to the get provider with the provided key (provider's type.FullName).
            </summary>
            <param name="providerFullName">The provider key.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.Save(System.Collections.Generic.IEnumerable{EPiServer.Shell.Search.SearchProviderSetting})">
            <summary>
            Saves the changes to the Database in the given order
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.Reset">
            <summary>
            Reset to default
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.GetSettings">
            <summary>
            Loads the settings from the database or create default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchProvidersManager.GetProviderPairs">
            <summary>
            Gets the provider pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Search.SearchResult">
            <summary>
            The model that is returned from from an <see cref="T:EPiServer.Shell.Search.ISearchProvider" />.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchResult"/> class.
            </summary>
            <param name="url">The URL to open when this result is selected.</param>
            <param name="title">The title of this search result.</param>
        </member>
        <member name="M:EPiServer.Shell.Search.SearchResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Search.SearchResult"/> class.
            </summary>
            <param name="url">The URL to open when this result is selected.</param>
            <param name="title">The title of this search result.</param>
            <param name="previewText">A preview text for this search result.</param>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.Url">
            <summary>
            The URL to this search result.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.Title">
            <summary>
            The title of this search result.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.IconCssClass">
            <summary>
            A css class used when rendering this search result.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.PreviewText">
            <summary>
            A preview text for this search result.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.Language">
            <summary>
            The language the this search result is in.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.ToolTipElements">
            <summary>
            A list of tooltip elements
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Search.SearchResult.Metadata">
            <summary>
            Custom Meta Data not rendered
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.CollectionExtensions">
            <summary>
            Implements sorting extesions for dynamic column names and sort order defined by the <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/> struct
            and ranging extensions for using the <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},EPiServer.Shell.Services.Rest.SortColumn)">
            <summary>
            Orders the <see cref="T:System.Linq.IQueryable`1"/> source by the directives in the sort parameter.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source containing the items to sort.</param>
            <param name="sortColumn">The sort column definition.</param>
            <returns>The <paramref name="source"/> with the sort expression appended</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="source"/> is <c>null</c></exception>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},EPiServer.Shell.Services.Rest.SortColumn,System.Boolean)">
            <summary>
            Orders the <see cref="T:System.Linq.IQueryable`1"/> source by the directives in the sort parameter.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source containing the items to sort.</param>
            <param name="sortColumn">The sort column definition.</param>
            <param name="first">if set to <c>true</c> the sort expression is treated as a primary sorting; otherwise secondary sorting is appended.</param>
            <returns>
            The <paramref name="source"/> with the sort expression appended
            </returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="source"/> is <c>null</c></exception>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <summary>
            Orders the <see cref="T:System.Linq.IQueryable`1"/> using a collection of <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/>s.
            </summary>
            <param name="source">The source.</param>
            <param name="sortColumns">The sort columns.</param>
            <returns>The <paramref name="source"/> with the sort expression(s) appended</returns> 
            <exception cref="T:System.ArgumentNullException">if <paramref name="source"/> or <paramref name="sortColumns"/> is <c>null</c></exception>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.ApplyRange``1(System.Collections.Generic.IEnumerable{``0},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Applies the specified range (start, end) and returns the items
            in the range together with the actual range (start, end, total).
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="requestedRange">The requested range with start and/or end set.
            Null or not defined (neither start nor end set) to return the full range.</param>
            <returns>A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/>
            instance describing the actual range (including total).</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.ApplyRange``1(System.Linq.IQueryable{``0},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Applies the specified range (start, end) and returns the items
            in the range together with the actual range (start, end, total).
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="requestedRange">The requested range with start and/or end set.
            Null or not defined (neither start nor end set) to return the full range.</param>
            <returns>A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/>
            instance describing the actual range (including total).</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.ApplyRange``1(System.Collections.Generic.IEnumerable{``0},EPiServer.Shell.Services.Rest.ItemRange,System.Nullable{System.Int32})">
            <summary>
            Applies the specified range (start, end) and returns the items
            in the range together with the actual range (start, end, total), using a
            supplied total count which means that <paramref name="items"/> don't have to
            be enumerated to get the count.
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="requestedRange">The requested range with start and/or end set.
            Null or not defined (neither start nor end set) to return the full range.</param>
            <param name="totalItemCount">The total item count, or null if it should be
            reported as unknown. To get the actual total count by enumerating <paramref name="items"/>,
            use the overload without the <paramref name="totalItemCount"/> parameter.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1" /> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange" />
            instance describing the actual range (including total).
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.CollectionExtensions.ApplyRange``1(System.Linq.IQueryable{``0},EPiServer.Shell.Services.Rest.ItemRange,System.Nullable{System.Int32})">
            <summary>
            Applies the specified range (start, end) and returns the items
            in the range together with the actual range (start, end, total), using a
            supplied total count which means that <paramref name="items"/> don't have to
            be enumerated to get the count.
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="requestedRange">The requested range with start and/or end set.
            Null or not defined (neither start nor end set) to return the full range.</param>
            <param name="totalItemCount">The total item count, or null if it should be
            reported as unknown. To get the actual total count by enumerating <paramref name="items"/>,
            use the overload without the <paramref name="totalItemCount"/> parameter.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1" /> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange" />
            instance describing the actual range (including total).
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.IRestControllerValueProvider">
            <summary>
            Interface for providing parameter values to the <see cref="T:EPiServer.Shell.Services.Rest.RestControllerActionInvoker"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.IRestControllerValueProvider.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Returns the value for a specific parameter.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>The parameter value if a match was made; otherwise false.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.ItemRange">
            <summary>
            A helper class for parsing the Range http header on incoming requests and writing the Content-Range http header on outgoing responses.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.ItemRange.Start">
            <summary>
            Gets or sets the start index of the requested or returned range of items.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.ItemRange.End">
            <summary>
            Gets or sets the index of the last item requested or returned.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.ItemRange.Total">
            <summary>
            Gets or sets the total number of items. Only used in the response. Null if unknown.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.ReadHeaderFrom(System.Web.HttpRequestBase)">
            <summary>
            Creates an <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> object from the headers in the specified http request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>
            An <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> with information about the requested range; or null if the no range information was found in the headers.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.AddHeaderTo(System.Web.HttpResponseBase)">
            <summary>
            Adds the range information to the specified http response.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.ApplyTo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Applies the range (start, end) and returns the items in the range together
            with the actual range (start, end, total).
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <returns>A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/>
            instance describing the actual range (including total).</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.ApplyTo``1(System.Linq.IQueryable{``0})">
            <summary>
            Applies the range (start, end) and returns the items in the range together
            with the actual range (start, end, total). Utilizes the query engine of the
            IQueryable to avoid fetching all items unless needed.
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <returns>A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/>
            instance describing the actual range (including total).</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.ApplyTo``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            Applies the range (start, end) and returns the items in the range together
            with the actual range (start, end, total), using a supplied total count
            which means that <paramref name="items"/> don't have to be enumerated to 
            get the count.
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="totalItemCount">The total item count, or null if it should be
            reported as unknown. To get the actual total count by enumerating <paramref name="items"/>,
            use the overload without the <paramref name="totalItemCount"/> parameter.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1" /> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange" />
            instance describing the actual range (including total).
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.ItemRange.ApplyTo``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32})">
            <summary>
            Applies the range (start, end) and returns the items in the range together
            with the actual range (start, end, total), using a supplied total count
            which means that <paramref name="items"/> don't have to be enumerated to 
            get the count.
            </summary>
            <typeparam name="T">The type of items to apply range to.</typeparam>
            <param name="items">The full item collection to get the range from.</param>
            <param name="totalItemCount">The total item count, or null if it should be
            reported as unknown. To get the actual total count by enumerating <paramref name="items"/>,
            use the overload without the <paramref name="totalItemCount"/> parameter.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1" /> instance containing the
            resulting range of items as well as a new <see cref="T:EPiServer.Shell.Services.Rest.ItemRange" />
            instance describing the actual range (including total).
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.JsonDictionary">
            <summary>
            A marker class implementation of <see cref="T:System.Collections.Generic.Dictionary`2"/> for handling serialization of JSON formatted
            dictionaries on requests to the REST stores.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/> class with serialized data.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure containing the source and destination of the serialized stream associated with the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>.</param>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder">
            <summary>
            A model binder for JSON formatted dictionaries.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder"/> class.
            </summary>
            <param name="serializerFactory">The object serializer factory to use to create a JSON serializer.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <returns>The bound value as a <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>.</returns>
            <param name="controllerContext">The controller context.</param>
            <param name="bindingContext">The binding context.</param>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinderProvider">
            <summary>
            Provides an <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder"/> for models of type <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinderProvider.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinderProvider"/> class.
            </summary>
            <param name="serviceLocator">The service locator to use to create the model binder.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinderProvider.GetBinder(System.Type)">
            <summary>
            Gets an instance of a <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder"/> if the requested type inherits from <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>.
            </summary>
            <param name="modelType">Type of the requested model.</param>
            <returns>An instance of <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionaryModelBinder"/> if the model type inherits <see cref="T:EPiServer.Shell.Services.Rest.JsonDictionary"/>; otherwise null.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RangedItems`1">
            <summary>
            Contains a collection of items and a description of the range of items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RangedItems`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RangedItems`1.#ctor(System.Collections.Generic.IEnumerable{`0},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RangedItems`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="range">The range describing the included items.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RangedItems`1.Items">
            <summary>
            Gets the included items.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RangedItems`1.Range">
            <summary>
            Gets the range describing the included items.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestControllerActionInvoker">
            <summary>
            A class for invoking action methods on controllers inheriting from <see cref="T:EPiServer.Shell.Services.Rest.RestControllerBase"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerActionInvoker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestControllerActionInvoker"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerActionInvoker.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.IRestControllerValueProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestControllerActionInvoker"/> class.
            </summary>
            <param name="restValueProviders">The rest value providers queried for rest specific parameter values. Will be resolved from the service locator if not passed.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Tries to get a specific value from the registered <see cref="T:EPiServer.Shell.Services.Rest.IRestControllerValueProvider"/>s before calling the base implementation.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>The value for a specific parameter; or null if no matching parameter value was found.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerActionInvoker.TryGetParameterValueFromRestProviders(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor,System.Object@)">
            <summary>
            Queries the registered <see cref="T:EPiServer.Shell.Services.Rest.IRestControllerValueProvider"/>s for a specific value.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <param name="value">The value returned; or null if no value was found.</param>
            <returns>true if a value was returned by any of the providers; otherwise false.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestControllerBase">
            <summary>
            Serves as base class for controller implementations adhering to a REST pattern.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestControllerBase"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.HttpContext">
            <summary>
            Gets the HTTP context in which the request is executed.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.User">
            <summary>
            Gets the security context of the user on whose behalf the code is running.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.RouteData">
            <summary>
            Gets the URL route data.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.ActionInvoker">
            <summary>
            Gets or sets the action invoker used when invoking the controller rest action.
            </summary>
            <value>By default of type <see cref="T:EPiServer.Shell.Services.Rest.RestControllerActionInvoker"/></value>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.DisableAsyncSupport">
            <summary>
            Derived classes can override this flag and set to true if they need the pre-MVC 4 ExecuteCore to be called.
            </summary>
            <value>Returns <c>true</c> when <see cref="P:EPiServer.Shell.Services.Rest.RestControllerBase.ActionInvoker"/> is <see cref="T:System.Web.Mvc.Async.IAsyncActionInvoker"/></value>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.ExecuteCore">
            <summary>
            Executes the action corresponding to the http method in the request.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.GetActionName">
            <summary>
            Get the action method to process
            </summary>
            <returns>The action method by checking both HTTP method and special header "X-Http-Method-Override"</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.Rest(System.Object)">
            <summary>
            Helper method creating a <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> with the specified data.
            </summary>
            <param name="data">The data to return for the request.</param>
            <returns>A Rest Action result with the supplied data.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.Rest(System.Collections.Generic.IEnumerable{System.Object},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Helper method creating a <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> with the specified data filtered to a given range.
            </summary>
            <param name="data">The data to be filtered and then return in the response.</param>
            <param name="range">The item range to apply to the given data and apply to the response header.</param>
            <returns>A Rest Action result with the filtered data and Content-Range header.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
            <summary>
            Executes the specified request context.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="callback">The asynchronous callback method.</param>
            <param name="state">The state.</param>
            <returns>The status of the asynchronous operation.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestControllerBase.EndExecute(System.IAsyncResult)">
            <summary>
             Ends the asynchronous operation.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestControllerBase.AsyncManager">
            <summary>
            Gets the asynchronous manager object.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestHeaderValuesProvider">
            <summary>
            Tries to create the <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> information parameter from the http request headers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHeaderValuesProvider.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Returns the value for the Range http header.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>
            The parameter value if a match was made; otherwise false.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestHttpHandler">
            <summary>
            A http handler that implements Rest Controllers
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestHttpHandler.RequestContext">
            <summary>
            The context in which the request is executed.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestHttpHandler.Controller">
            <summary>
            The controller in which the request is executed.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestHttpHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.#ctor(System.Web.Routing.RequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestHttpHandler"/> class.
            </summary>
            <param name="requestContext">The request context in which the request is processed.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the request by calling into the unit testable overload.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Performs the actual request processing.
            </summary>
            <param name="httpContext">The HTTP context.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Registers handler for async notification
            </summary>
            <param name="context">The context</param>
            <param name="cb">The callback</param>
            <param name="extraData">The extra data</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
            <summary>
            Registers handler for async notification
            </summary>
            <param name="context">The context</param>
            <param name="callback">The callback</param>
            <param name="extraData">The extra data</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.EndProcessRequest(System.IAsyncResult)">
            <summary>
            Ends the request
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.ValidateAntiForgeryToken(System.Web.HttpContextBase)">
            <summary>
            Validates the Cross site request anti forgery token sent in the header with the token stored in a cookie.
            </summary>
            <remarks>Throws an <see cref="T:System.Exception"/> if validation fails.</remarks>
            <param name="httpContext">The HTTP context.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestHttpHandler.ParseRequestUrl(System.String,System.String@,System.String@)">
            <summary>
            Parses the app relative request URL to find store name and an optional id parameter.
            </summary>
            <param name="url">The incoming application relative URL.</param>
            <param name="storeName">Name of the store.</param>
            <param name="id">An optional id parameter.</param>
            <returns><c>true</c> if parsing succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestPostDataProvider">
            <summary>
            Uses an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializerFactory"/> to get a serializer that can deserialize the post data.
            </summary>
            <remarks>Currently only supports the JSON format.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestPostDataProvider.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestPostDataProvider"/> class.
            </summary>
            <param name="serializerFactory">The serializer.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestPostDataProvider.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Returns the post data if the requested parameter name is <c>entity</c>.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>
            The parameter value if a match was made; otherwise false.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestPostDataProvider.GetDeserializedPostData(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Gets the post data deserialized into an object using Newtonsoft JSON serializer.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="descriptor">The descriptor.</param>
            <returns>An object if the request contains json post data.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestResult">
            <summary>
            Encapsulates the result of a successful REST request
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestResult.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> class.
            </summary>
            <param name="serializerFactory">The serializer factory.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestResult.Range">
            <summary>
            Gets or sets information about the data range returned for the request.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestResult.StatusCode">
            <summary>
            Gets or sets the http status code.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Processes the result and writes the resulting data to the http output stream.
            </summary>
            <param name="context">The context in which the result is executed.</param>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestResultBase">
            <summary>
            Serves as a base class for encapsulating REST responses. 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestResultBase.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestResultBase" /> class.
            </summary>
            <param name="serializerFactory">The serializer factory. If <c>null</c> is passed it will be resolved from using service location.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestResultBase.ContentEncoding">
            <summary>
            Gets or sets the content encoding.
            </summary>
            <value>The content encoding.</value>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestResultBase.Data">
            <summary>
            Gets or sets the data returned to the client as a result of the request.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Processes the result and writes the resulting data to the http output stream.
            </summary>
            <param name="context">The context in which the result is executed.</param>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestRoute">
            <summary>
            Defines a route for a collection of REST stores.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestRoute.RouteHandler">
            <summary>
            Gets or sets the route handler.
            </summary>
            <value>The route handler.</value>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestRoute.Url">
            <summary>
            Gets or sets the URL for which this route is registered.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestRoute.AppRelativeUrl">
            <summary>
            The <see cref="P:EPiServer.Shell.Services.Rest.RestRoute.Url"/> mapped to the application root.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestRoute.Stores">
            <summary>
            A collection of registered stores mapped to the route path.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.#ctor(System.String,System.Web.Routing.IRouteHandler,EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestRoute"/> class.
            </summary>
            <param name="url">The base url for the contained stores.</param>
            <param name="routeHandler">The route handler handling requests mapped to this route.</param>
            <param name="serviceLocator">The service locator providing controller instances.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.#ctor(System.String,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestRoute"/> class.
            </summary>
            <param name="url">The base url for the contained stores.</param>
            <param name="routeHandler">The route handler handling requests mapped to this route.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.TryCreateController(System.String,System.Web.Mvc.IController@)">
            <summary>
            Try to create a controller mapped to a store by the registered store name.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="controller">The created controller controller.</param>
            <returns>true if a controller was found and successfully created; otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            When overridden in a derived class, returns route information about the request.
            </summary>
            <param name="httpContext">An object that encapsulates information about the HTTP request.</param>
            <returns>
            An object that contains the values from the route definition if the route matches the current request, or null if the route does not match the request.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Checks whether the route matches the specified values, and if so, generates a URL and retrieves information about the route.
            </summary>
            <param name="requestContext">An object that encapsulates information about the requested route.</param>
            <param name="values">An object that contains the parameters for a route.</param>
            <returns>
            This implementation always returns null
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>A hash code based on the route url.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRoute.Equals(System.Object)">
            <summary>
            Compares against another route.
            </summary>
            <param name="obj">The route to compare.</param>
            <returns>true if the compared object has the same url.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestRouteHandler">
            <summary>
            Cretes the handler implementing <see cref="T:System.Web.IHttpHandler"/> for serving requests mapped to a <see cref="T:EPiServer.Shell.Services.Rest.RestRoute"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the http handler for request processing.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>An object that processes the request.</returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestStatusCodeResult">
            <summary>
            Provides a way to return a status code and description along with custom pay-load from a REST store
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestStatusCodeResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestStatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestStatusCodeResult.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestStatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="statusDescription">The status description.</param>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestStatusCodeResult.#ctor(System.Int32,System.String,EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Services.Rest.RestStatusCodeResult" /> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="statusDescription">The status description.</param>
            <param name="serializerFactory">The serializer factory.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestStatusCodeResult.StatusCode">
            <summary>
            The HTTP status code returned in the response.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestStatusCodeResult.StatusDescription">
            <summary>
            A description of the HTTP status returned in the response.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestStatusCodeResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.RestStoreAttribute">
            <summary>
            Added to <see cref="T:EPiServer.Shell.Services.Rest.RestControllerBase"/> in order to register them as rest controllers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.RestStoreAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Shell.Services.Rest.RestStoreAttribute"/> with store name.
            </summary>
            <param name="storeName">The store name.</param>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.RestStoreAttribute.StoreName">
            <summary>
            The store name is used as url segment when accessing this store.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.SortColumn">
            <summary>
            Defines a sort directive, column sort order, as received from a dojo.store.JsonRest instance
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.SortColumn.ColumnName">
            <summary>
            Name of the column to perform sorting on.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Services.Rest.SortColumn.SortDescending">
            <summary>
            A flag indicating whether to sort ascending or descending.
            </summary>
            <value><c>true</c> if sorting should be performed in descending order; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.op_Equality(EPiServer.Shell.Services.Rest.SortColumn,EPiServer.Shell.Services.Rest.SortColumn)">
            <summary>
            Implements the operator == using the <see cref="M:EPiServer.Shell.Services.Rest.SortColumn.Equals(System.Object)"/> method.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns><c>true</c> if the instances are equal. See <see cref="M:EPiServer.Shell.Services.Rest.SortColumn.Equals(System.Object)"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.op_Inequality(EPiServer.Shell.Services.Rest.SortColumn,EPiServer.Shell.Services.Rest.SortColumn)">
            <summary>
            Implements the operator != using the <see cref="M:EPiServer.Shell.Services.Rest.SortColumn.Equals(System.Object)"/> method.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns><c>true</c> if the instances are not equal. See <see cref="M:EPiServer.Shell.Services.Rest.SortColumn.Equals(System.Object)"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the <see name="ColumnName"/> and <see cref="P:EPiServer.Shell.Services.Rest.SortColumn.SortDescending"/> properties of the instances are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.GetHashCode">
            <summary>
            Calculates Returns a hash code by adding the hash code of the <see name="ColumnName"/> and the <see cref="P:EPiServer.Shell.Services.Rest.SortColumn.SortDescending"/>.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.ParseSortList(System.String)">
            <summary>
            Parses a string with comma-separated sort column and order information.
            </summary>
            <param name="sortQuery">The string containing sort information.</param>
            <example>Parse the string representation of sort information to a collection of <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/>
            <code>
                var sortColumns = SortColumn.ParseSortList("+name,-title");
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumn.Parse(System.String)">
            <summary>
            Tries to parse a string as a list of sort directives.
            </summary>
            <param name="sortRules">The query param containing the sort information.</param>
            <returns>
            	<c>true</c> if the sort information in <paramref name="sortRules"/> was successfully parsed; otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Services.Rest.SortColumnsValueProvider">
            <summary>
            Represents a value provider for sort directives sent in the query string on the format sort(&lt;+/-&gt;&lt;columnName&gt;).
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Services.Rest.SortColumnsValueProvider.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Parses sorting information found in the query string into collection of <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/> instance.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> object if sorting information was found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Storage.ComponentData">
            <summary>
            Class used for storing component configuration to database.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Storage.ComponentData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Storage.ComponentData"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Storage.ComponentData.Id">
            <summary>
            Gets or sets the unique id of the component instance.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Storage.ComponentData.DefinitionName">
            <summary>
            Name of the <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/> this component is instantiated from.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Storage.ComponentData.PlugInArea">
            <summary>
            Gets or sets the plug in area where this container appears.
            </summary>
            <value>The plug in path.</value>
        </member>
        <member name="P:EPiServer.Shell.Storage.ComponentData.Settings">
            <summary>
            The generic settings collection persisted for each component.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:EPiServer.Shell.Storage.ComponentData.Components">
            <summary>
            The components configured in this container.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Storage.ContainerData">
            <summary>
            Used for storing configured containers.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage">
            <summary>
            Class that is used to store personalized settings.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <remarks>This class converts <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> and <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> to <see cref="T:EPiServer.Shell.Storage.ContainerData"/> and <see cref="T:EPiServer.Shell.Storage.ComponentData"/> to be able to store just the data needed.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.#ctor(EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/> class.
            </summary>
            <param name="componentManager">The component manager.</param>
        </member>
        <member name="P:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.Id">
            <summary>
            Id for the personalized settings.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.UserName">
            <summary>
            Gets or sets the username for these settings.
            </summary>
            <value>The username for these settings.</value>
        </member>
        <member name="P:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.CustomizedContainers">
            <summary>
            Gets or sets the internal collection that is used for storage.
            </summary>
            <value>The internal collection that is used for storage.</value>
        </member>
        <member name="M:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.CreateFromPersonalizedViewSettings(EPiServer.Shell.ViewComposition.PersonalizedViewSettings,EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Creates from new instance of <see cref="T:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage"/> with the settings from the personalized view settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="manager">The <see cref="T:EPiServer.Shell.ViewComposition.IComponentManager"/> that is responsible for creating components.</param>
            <returns>A new instance of <see cref="T:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage"/>.</returns>
        </member>
        <member name="M:EPiServer.Shell.Storage.PersonalizedViewSettingsStorage.ConvertToPersonalizedViewSettings(System.Security.Principal.IPrincipal)">
            <summary>
            Converts this instance to the public format (<see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/>).
            </summary>
            <returns>A <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/> instance with the settings from this instance.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.AttributedComponentProvider">
            <summary>
            Provides components that are defined in a <see cref="T:EPiServer.Shell.ViewComposition.ComponentAttribute"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.AttributedComponentProvider.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.AttributedComponentProvider"/> class.
            </summary>
            <param name="typeLookup">The type repository providing types scanned for attributes.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.AttributedComponentProvider.SortOrder">
            <summary>
            Used to select the order of execution of the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.
            </summary>
            <value><see cref="T:EPiServer.Shell.ViewComposition.AttributedComponentProvider"/> has a sort order of 150.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.AttributedComponentProvider.GetComponentDefinitions">
            <summary>
            Returns all components provided by this provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.AttributedComponentProvider.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Try creating a component instance corresponding to an <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.
            </summary>
            <param name="definition">The component definition to create a component for.</param>
            <returns>A component instance if the definition is provided by this provider; otherwise <c>null</c></returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentAttribute">
            <summary>
            Defines a user interface component.
            </summary>
            <remarks>
            This attribute will create a new instance of <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/> with the settings provided in the attribute properties.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentAttribute"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentAttribute.SelfTypedComponentDefinition">
            <summary>
            Uses the <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> type as base for the <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentAttribute.CreateComponentDefinition(System.Type)">
            <summary>
            Creates the component definition.
            </summary>
            <param name="attributedType">The <see cref="T:System.Type"/> of the component.</param>
            <returns>A new instance of a <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition"/>.</returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.AllowedRoles">
            <summary>
            Gets or sets the list of roles that are allowed to use this component.
            </summary>
            <value>The role list .</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.WidgetType">
            <summary>
            Name of the widget type to use for displaying the component.
            </summary>
            <value>The name of the widget type to use for displaying the component.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.Title">
            <summary>
            Title used in the UI both for listings and as default for component instances. Should be localized.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.Description">
            <summary>
            Description of the component. Should be localized.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.Categories">
            <summary>
            A comma separated string of categories for the component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.SortOrder">
            <summary>
            Gets or sets the sort order for this component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.IsAvailableForUserSelection">
            <summary>
            Gets or sets a value indicating whether this component can be added in the ui by a user.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.PlugInAreas">
            <summary>
            Gets or sets the plug in areas that the component should automatically plug into.
            </summary>
            <value>The plug in areas.</value>
            <remarks>The input should be in the format of a comma separated string if you want to
            plug into several areas.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.LanguagePath">
            <summary>
            Path to node in language files where translation can be found.
            </summary>
            <remarks>
            Set this property to the path of the XML element that contains the 
            displayname and description elements in one of your localization providers.
            (for instance an xml file in the /lang directory.) 
            </remarks>
            <example>
            <para>
            For a LanguagePath with the value "/myshop/plugin/ShopPluginTree/" the 
            XML should look something like this: 
            </para>
            <code source="../CodeSamples/ViewComposition/ComponentTranslationSamples.xml" region="XML" lang="xml" />
            </example>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentAttribute.Settings">
            <summary>
            Gets or sets the initial settings for components of this type.
            </summary>
            <value>The initial settings for components.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentBase">
            <summary>
            Serves as a base for layout containers
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentBase.#ctor(System.String)">
            <summary>
            Initializes and sets as active new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentBase"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentBase.#ctor(System.String,EPiServer.Shell.ViewComposition.ISettingsDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentBase"/> class.
            </summary>
            <param name="widgetType">Type of the widget.</param>
            <param name="settings">The initial settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentBase.#ctor(System.String,System.Guid,EPiServer.Shell.ViewComposition.ISettingsDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentBase"/> class.
            </summary>
            <param name="widgetType">Type of the widget.</param>
            <param name="id">The id.</param>
            <param name="settings">The initial settings.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.Id">
            <summary>
            The <see cref="T:System.Guid"/> of the item
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.Heading">
            <summary>
            Gets or sets a heading used client side for the component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.DefinitionName">
            <summary>
            Unique name of the component type.
            </summary>
            <value>The unique name that is used to create new <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s from the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.WidgetType">
            <summary>
            Name of the widget type to use for displaying the component.
            </summary>
            <value>The name of the widget type to use for displaying the component.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.ModuleName">
            <inheritdoc /> 
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.SortOrder">
            <summary>
            Gets or sets the sort order for this component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentBase.Settings">
            <summary>
            Gets the settings collection for this component. Used for client activation and persisted on the server.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentBase.GetModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentBase.GetModuleName(System.Type)">
            <summary>
            Returns a ShellModule to which a specified Type belongs.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentDefinitionBase">
            <summary>
            Helper base class for component definitions
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.Settings">
            <summary>
            Gets or sets the initial settings for components of this type.
            </summary>
            <value>The initial settings for components.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ComponentDefinitionBase class.
            </summary>
            <param name="widgetType">The type of the widget used for displaying the component.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.#ctor(System.String,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the ComponentDefinitionBase class using a <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
            <param name="widgetType">The type of the widget used for displaying the component.</param>
            <param name="localizationService">The service used for localization.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ComponentDefinitionBase class with a title and description
            </summary>
            <param name="widgetType">The type of the widget used for displaying the component.</param>
            <param name="title">The title</param>
            <param name="description">The description</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LocalizationService">
            <summary>
            The service used for localization.
            </summary>
            <remarks>If this is not set the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.DefinitionName">
            <summary>
            Unique name of the definition.
            </summary>
            <value>The unique name that is used to create new <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s from the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.WidgetType">
            <summary>
            Name of the widget type to use for displaying the component.
            </summary>
            <value>The name of the widget type to use for displaying the component.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.Title">
            <summary>
            The title for the component. 
            </summary>
            <returns>A string with the title.</returns>
            <remarks>
            If a <see cref="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LanguagePath"/> has been defined, the return value for DisplayName will be the translated 
            text from <see cref="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LanguagePath"/> + "/title".
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.Description">
            <summary>
            Description of the component.
            </summary>
            <value>The description.</value>
            <remarks>
            If the <see cref="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LanguagePath"/> property has been defined, the return value for Description will be the 
            translated text from <see cref="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LanguagePath"/> + "/description". 
            </remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.LanguagePath">
            <summary>
            Path to node in language files where translation can be found.
            </summary>
            <remarks>
            Set this property to the path of the XML element that contains the 
            displayname and description elements in one of your localization providers.
            (for instance an xml file in the /lang directory.) 
            </remarks>
            <example>
            <para>
            For a LanguagePath with the value "/myshop/plugin/ShopPluginTree/" the 
            XML should look something like this: 
            </para>
            <code source="../CodeSamples/ViewComposition/ComponentTranslationSamples.xml" region="XML" lang="xml" />
            </example>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.Categories">
            <summary>
            Gets or sets the category for this component. Default implementation returns an empty string;
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.CreateComponent">
            <summary>
            Creates the component corresponding to this component definition.
            </summary>
            <returns>
            A new instance of an <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </returns>
            <remarks>This method does not perform any access control validation.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.CreateComponent(System.Type)">
            <summary>
            Creates a <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponent"/> instance.
            </summary>
            <param name="attributedType">Type of the attributed component.</param>
            <returns>A <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponent"/> instance</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentDefinitionBase.Equals(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Compares this instance to another <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/> instanse.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if both instances are have the same name</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentManager">
            <summary>
            Implements functionality for managing and creating components from component providers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IComponentProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentManager"/> class.
            </summary>
            <param name="componentProviders">The component providers.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IComponentProvider},EPiServer.Shell.Configuration.EPiServerShellSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ComponentManager"/> class.
            </summary>
            <param name="componentProviders">The component providers.</param>
            <param name="shellSection">The shell section containing configuration settings for components.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.ListAll">
            <summary>
            Lists all registrered components.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all components.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition,System.Security.Principal.IPrincipal)">
            <summary>
            Validates that the user has access to the component definition and creates a component from it.
            </summary>
            <param name="definition">The definition to create a component for.</param>
            <param name="principal">The principal.</param>
            <returns>A component instance.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.CreateComponent(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Creates a component from a component definition name.
            </summary>
            <param name="componentDefinitionName">Name of the component definition.</param>
            <param name="principal">The principal.</param>
            <returns>A <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> instance</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.GetComponentDefinition(System.String)">
            <summary>
            Gets a component defintion by its name.
            </summary>
            <param name="name">The name of the definition to get.</param>
            <returns>
            The component definition having the supplied name, or null if none was found.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.List(System.Security.Principal.IPrincipal,System.String,System.Boolean)">
            <summary>
            Lists all registrered components that matches the given criteria.
            </summary>
            <param name="principal">The principal.</param>
            <param name="category">The category to match.</param>
            <param name="onlyShowComponentsAvailableForUserSelection">if set to <c>true</c> only shows components that has <see cref="P:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.IsAvailableForUserSelection"/> set to true.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all components that matches the given criteria.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentManager.GetCategories(System.Security.Principal.IPrincipal)">
            <summary>
            Gets a list of all categories for the components.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
            <value>The categories.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ComponentProviderAttribute">
            <summary>
            Defines a <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/> for the system. The type using this attribute
            must implement <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ComponentProviderAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Shell.ViewComposition.ComponentProviderAttribute"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.CompositeViewAttribute">
            <summary>
            Defines a <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/> for the system. The type using this attribute
            must implement <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.CompositeViewAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Shell.ViewComposition.CompositeViewAttribute"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer">
            <summary>
            ConfigurationViewTransformer is used to alter the default behaviour and components for a given view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer.#ctor(EPiServer.Shell.Configuration.EPiServerShellSection,EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer"/> class.
            </summary>
            <param name="shellSection">The configuration section.</param>
            <param name="componentManager">The component manager.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the given settings.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer.LoadSettingsFromConfiguration(EPiServer.Shell.Configuration.ViewElement)">
            <summary>
            Loads the settings from configuration.
            </summary>
            <param name="settingsElement">The settings element.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer.Settings">
            <summary>
            Gets a collection of <see cref="T:EPiServer.Shell.ViewComposition.ViewTransformationSettingsCollection"/> for each view that has settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ConfigurationViewTransformer.SortOrder">
            <summary>
            Used to select the order of execution when there are several <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/>s.
            </summary>
            <value>ConfigurationViewTransformer has 100.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ContainerBase">
            <summary>
            Serves as a base for layout containers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ContainerBase"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase.#ctor(System.String,EPiServer.Shell.ViewComposition.ISettingsDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ContainerBase"/> class.
            </summary>
            <param name="widgetType">Type of the widget.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase.Add(EPiServer.Shell.ViewComposition.IComponent)">
            <summary>
            Adds a component to the collection.
            </summary>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ContainerBase.Components">
            <summary>
            Gets or sets the components.
            </summary>
            <value>The components.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase.SortComponents(System.Comparison{EPiServer.Shell.ViewComposition.IComponent})">
            <summary>
            Sort the components using the specified comparison delegate.
            </summary>
            <param name="comparison">The comparison delegate determining the new component order.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ContainerBase.ContainerType">
            <summary>
            Gets or sets the type of the container.
            </summary>
            <value>The type of the container.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ContainerBase.PlugInArea">
            <summary>
            The plug-in area that is used to plug-in components automatically.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ContainerBase`1">
            <summary>
            Inherit ContainerBase to create a container that needs it's children to have a specific kind of settings added to them
            </summary>
            <typeparam name="TSettings">The type of the setting.</typeparam>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ContainerBase`1"/> class.
            </summary>
            <param name="widgetType"></param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase`1.Add(EPiServer.Shell.ViewComposition.IComponent)">
            <summary>
            Adds the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ContainerBase`1.Add(EPiServer.Shell.ViewComposition.IComponent,`0)">
            <summary>
            Adds the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="requiredSettings">The required settings.</param>
            <returns>Itself</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.DefaultComponent">
            <summary>
            Default <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> used for components not having any special requirements for client side state transfer.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponent.#ctor(EPiServer.Shell.ViewComposition.IComponentDefinition,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponent"/> class.
            </summary>
            <param name="definition">The definition of the component.</param>
            <param name="attributedComponentType">The attributed type, used for resolving owner module name.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponent.#ctor(EPiServer.Shell.ViewComposition.IComponentDefinition,System.Type,EPiServer.Shell.ViewComposition.ISettingsDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponent"/> class.
            </summary>
            <param name="definition">The definition of the component.</param>
            <param name="attributedComponentType">The attributed type, used for resolving owner module name.</param>
            <param name="settings">The initial settings.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.DefaultComponent.DefinitionName">
            <summary>
            Unique name of the component definition.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponent.GetModuleName">
            <inheritdoc /> 
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition">
            <summary>
            A component with settings that is defined elsewhere, for instance in a <see cref="T:EPiServer.Shell.ViewComposition.ComponentAttribute"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponentDefinition.#ctor(System.Type,System.String,System.String,System.String[],System.String,System.String,System.String[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition"/> class.
            </summary>
            <param name="attributedComponentType">Type of the attributed component.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="categories">The categories.</param>
            <param name="widgetType">Type of the widget.</param>
            <param name="languagePath">The path to the node in the localization resources.</param>
            <param name="plugInAreas">The plug in areas that the components should auto plug into.</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponentDefinition.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition"/> class.
            </summary>
            <param name="attributedComponentType">Type of the attributed component.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="widgetType">Type of the widget.</param>
            <param name="languagePath">The path to the node in the localization resources.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.DefaultComponentDefinition.DefinitionName">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultComponentDefinition.CreateComponent">
            <summary>
            Creates the component corresponding to this component definition.
            </summary>
            <returns>
            A new instance of an <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </returns>
            <remarks>This method does not perform any access control validation.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.DefaultViewManager">
            <summary>
            Handles the finding and composing of <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/> with <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultViewManager.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IViewProvider},System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IViewTransformer},EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultViewManager"/> class.
            </summary>
            <param name="viewProviders">The view providers.</param>
            <param name="viewTransformers">The view transformers used when transforming the views returned.</param>
            <param name="componentManager">The component manager providing components for populating the views.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultViewManager.GetView(EPiServer.Shell.Modules.ShellModule,System.String)">
            <summary>
            Gets the view name.
            </summary>
            <param name="shellModule">the module</param>
            <param name="urlSegment">the segment to match</param>
            <returns>The view name if exist, otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultViewManager.CreateView(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Gets the view.
            </summary>
            <param name="viewName">The name of the view.</param>
            <param name="principal">The principal.</param>
            <returns>An <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/> populated with <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.DefaultViewProvider">
            <summary>
            Returns all <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/> found.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultViewProvider.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.ICompositeView})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.DefaultViewProvider"/> class.
            </summary>
            <param name="views">The views for the provider to return.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DefaultViewProvider.GetViews">
            <summary>
            Gets the views.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.DeterministicGuidTransformer">
            <summary>
            Responsible to create a deterministic <see cref="T:System.Guid"/> for all containers and components for a view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DeterministicGuidTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the rules for the transformer.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.DeterministicGuidTransformer.GetDeterministicGuid(System.String,System.Guid,EPiServer.Shell.ViewComposition.IComponent,System.String,System.Int32)">
            <summary>
            Creates a deterministic GUID based on the unique "search path" to a component.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="parentId">The parents id.</param>
            <param name="component">The component.</param>
            <param name="username">The username.</param>
            <param name="numberOfExistingComponentsOfType">Type of the number of existing components of.</param>
            <returns>
            A deterministic GUID based on the unique "search path" to a component.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.DeterministicGuidTransformer.SortOrder">
            <summary>
            Used to select the order of execution when there are several <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/>s.
            </summary>
            <value><see cref="T:EPiServer.Shell.ViewComposition.DeterministicGuidTransformer"/> return 9000.</value>
            <remarks>This should be placed late in the view transformers list, just before <see cref="T:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer"/>. This means that any other transformers except <see cref="T:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer"/> should have a lower value.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponent">
            <summary>
            Defines the settings for a component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.Settings">
            <summary>
            Gets the settings collection for this component. Used for client activation and persisted on the server.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.DefinitionName">
            <summary>
            Unique name of the component type.  
            </summary>
            <value>The unique name that is used to create new <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s from the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.WidgetType">
            <summary>
            Gets the widget type used when displaying the component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.ModuleName">
            <summary>
            Gets the name of the Shell module to which the component belongs to.
            </summary>
            <value>
            The name of the Shell module.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponent.SortOrder">
            <summary>
            Gets or sets the sort order for this component.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponentDefinition">
            <summary>
            Defines information about a component. This can be used when creating lists of selectable components for a user.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponentDefinition.DefinitionName">
            <summary>
            Unique name of the component definition.
            </summary>
            <value>The unique name of the component definition.</value>
            <remarks>This is used when creating component from a <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>. For instance, it can use the <see cref="P:System.Type.FullName"/> of the type of the <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponentDefinition.WidgetType">
            <summary>
            Name of the widget type to use for displaying the component.
            </summary>
            <value>The name of the widget type to use for displaying the component.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponentDefinition.Title">
            <summary>
            Title used in the UI both for listings and as default for component instances. Should be localized.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponentDefinition.Description">
            <summary>
            Description of the component. Should be localized.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IComponentDefinition.Categories">
            <summary>
            Gets or sets the category for this component. For example "cms".
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponentManager">
            <summary>
            Interface to list components and component categories.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.GetCategories(System.Security.Principal.IPrincipal)">
            <summary>
            Gets a list of all categories for the components.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
            <value>The categories.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.List(System.Security.Principal.IPrincipal,System.String,System.Boolean)">
            <summary>
            Lists all registrered components that matches the given criteria.
            </summary>
            <param name="principal">The principal.</param>
            <param name="category">The category to match.</param>
            <param name="onlyShowComponentsAvailableForUserSelection">if set to <c>true</c> only shows components that has <see cref="P:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.IsAvailableForUserSelection"/> set to true.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all components that matches the given criteria.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.ListAll">
            <summary>
            Lists all registrered components.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all components.</returns>
            <remarks>This method does not filter components for function access rights.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition,System.Security.Principal.IPrincipal)">
            <summary>
            Creates a component from the component definition.
            </summary>
            <param name="definition">The definition to create a component for.</param>
            <param name="principal">The principal.</param>
            <returns>A component instance.</returns>
            <remarks>Will perform access control validation for the component definition and throw a <see cref="T:System.UnauthorizedAccessException"/> if the user does not have access to the component definition.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.CreateComponent(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Creates a component from a component definition name.
            </summary>
            <param name="componentDefinitionName">Name of the component definition.</param>
            <param name="principal">The principal.</param>
            <returns>A <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> instance</returns>
            <remarks>If no component definition exists with the given name null will be returned.
            Will perform access control validation for the component definition and throw a <see cref="T:System.UnauthorizedAccessException"/> if the user does not have access to the component definition.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentManager.GetComponentDefinition(System.String)">
            <summary>
            Gets a component defintion by its name.
            </summary>
            <param name="name">The name of the definition to get.</param>
            <returns>The component definition having the supplied name, or null if none was found.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponentMatcher">
            <summary>
            Used to match components in a hierarchy. Both <see cref="M:EPiServer.Shell.ViewComposition.IComponentMatcher.MatchesComponent(EPiServer.Shell.ViewComposition.IComponent)"/> for the <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> and <see cref="M:EPiServer.Shell.ViewComposition.IContainerMatcher.MatchesContainer(EPiServer.Shell.ViewComposition.IContainer)"/> 
            for the parent <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> must match in order to get a match.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentMatcher.MatchesComponent(EPiServer.Shell.ViewComposition.IComponent)">
            <summary>
            Answers if the given component is a match.
            </summary>
            <param name="component">The component to match.</param>
            <returns><c>true</c> if the component is a match; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponentNotify">
            <summary>
            Should be implemented if you want to receive event notifications.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentNotify.OnDeleted(System.Guid)">
            <summary>
            Will be called when the component is deleted.
            </summary>
            <param name="id">The id of the component.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IComponentProvider">
            <summary>
            Definition of a provider for <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s. Provides a list of <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>s 
            and the functionality to create <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s from the definitions.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentProvider.GetComponentDefinitions">
            <summary>
            Gets the components that this provider provides.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the component definitions that this provider handles.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IComponentProvider.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Creates component instance corresponding to an <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.
            </summary>
            <param name="definition">The component definition to create a component for.</param>
            <returns>A component instance if one could be created; otherwise <c>null</c>.</returns>
            <remarks>This method should not perform any access control validation.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ICompositeView">
            <summary>
            Defines the view
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ICompositeView.Name">
            <summary>
            Gets the name of the view. Used or finding views.
            </summary>
            <value>The name.</value>
            <remarks>The name of the name should be unique. For instance "/episerver/dashboard" or "/partnername/customview".</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ICompositeView.Title">
            <summary>
            Gets a localized title for this view
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ICompositeView.DefaultContext">
            <summary>
            Defines a default context for the view, for instance the start page for the CMS home view.
            </summary>
            <remarks>Set to null if the view should not have a default context.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ICompositeView.RootContainer">
            <summary>
            Gets the root <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> for the view.
            </summary>
            <value>The container.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ICompositeView.CreateView">
            <summary>
            Creates a new instance of the view.
            </summary>
            <returns>A new instance of the view.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IContainer">
            <summary>
            Defines that a component might have child components.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainer.Add(EPiServer.Shell.ViewComposition.IComponent)">
            <summary>
            Adds a component to the collection and returns the container to allow chaining.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainer.SortComponents(System.Comparison{EPiServer.Shell.ViewComposition.IComponent})">
            <summary>
            Sort the components using the specified comparison delegate.
            </summary>
            <param name="comparison">The comparison delegate determining the new component order.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IContainer.Components">
            <summary>
            Gets the child components.
            </summary>
            <value>The child components.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IContainer.ContainerType">
            <summary>
            Gets or sets the <see cref="P:EPiServer.Shell.ViewComposition.IContainer.ContainerType"/> indicating if it should be handled as  
            shared system instances or saved per user.
            </summary>
            <value>The type of the container.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IContainer.PlugInArea">
            <summary>
            The plug-in path that is used to plug-in components automatically.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ContainerType">
            <summary>
            Defines the type of a container.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.ContainerType.None">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.ContainerType.System">
            <summary>
            A system container is composed by the system and a user may not add components.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.ContainerType.User">
            <summary>
            A user container can be modified by the user.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IContainerExtensions">
            <summary>
            Contains extension methods for <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.GetComponentList(EPiServer.Shell.ViewComposition.IContainer)">
            <summary>
            Gets a list with all widget types currently in the containers component structure.
            </summary>
            <param name="container">The container.</param>
            <returns>
            A list with all widget types currently in the containers component structure.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.AddComponentsRecursive(EPiServer.Shell.ViewComposition.IContainer,System.String,System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IPluggableComponentDefinition},System.Security.Principal.IPrincipal)">
            <summary>
            Tries to add the components to one of the containers in the given root container.
            </summary>
            <param name="container">The container.</param>
            <param name="viewName">The name of the view.</param>
            <param name="pluggableComponents">The components.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.ReplaceContainersRecursive(EPiServer.Shell.ViewComposition.IContainer,System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IContainer},EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Replaces all containers in the container tree with any container in the replacementContainer list that matches the plug-in path.
            </summary>
            <param name="container">The container to alter.</param>
            <param name="replacementContainers">The replacement containers.</param>
            <param name="componentManager">The component manager suppling components from component definitions.</param>
            <remarks>This method will never replace the root container, only children in the container tree.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.ReplaceContainersRecursiveInternal(EPiServer.Shell.ViewComposition.IContainer,System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IContainer},EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Replaces all containers in the container tree with any container in the replacementContainer list that matches the plug in path.
            </summary>
            <param name="container">The container to alter.</param>
            <param name="replacementContainers">The replacement containers.</param>
            <param name="componentManager">The component manager.</param>
            <returns>
            A replacement container that matches the plug in path of the given container.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.RemoveComponentsRecursive(EPiServer.Shell.ViewComposition.IContainer,System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IComponentMatcher},System.Boolean)">
            <summary>
            Tries to remove any components in any of the containers in the given root container structure that matches the components plug-in path and type.
            </summary>
            <param name="container">The container.</param>
            <param name="componentMatchers">The component matchers.</param>
            <param name="notifyComponentOnRemoval">if set to <c>true</c> any component that implement <see cref="T:EPiServer.Shell.ViewComposition.IComponentNotify"/> are notified when removed.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.NotifyComponentsRecursive(EPiServer.Shell.ViewComposition.IComponent)">
            <summary>
            Notifies the component and any child components that implement recursive.
            </summary>
            <param name="componentToRemove">The component to remove.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.FindContainerByPlugInArea(EPiServer.Shell.ViewComposition.IContainer,System.String)">
            <summary>
            Gets the first container in the container hierarchy that matches plug in path.
            </summary>
            <param name="container">The container.</param>
            <param name="plugInArea">The plug in area.</param>
            <returns>The first container in the container hierarchy that matches plug in path.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.FindComponentById(EPiServer.Shell.ViewComposition.IContainer,System.Guid)">
            <summary>
            Finds the component that matches the given id or null if no matching component exists.
            </summary>
            <param name="container">The container to search in.</param>
            <param name="id">The id to match.</param>
            <returns>
            The component that matches the given id or null if no matching container exists.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerExtensions.FindComponentById(EPiServer.Shell.ViewComposition.IContainer,System.Guid,EPiServer.Shell.ViewComposition.IContainer@)">
            <summary>
            Finds the component that matches the given id or null if no matching component exists.
            </summary>
            <param name="container">The container to search in.</param>
            <param name="id">The id to match.</param>
            <param name="personalizationContainer">The personalization container.</param>
            <returns>
            The component that matches the given id or null if no matching container exists.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IContainerMatcher">
            <summary>
            Used to match objects to a container. For instance when pluggin in an <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>s to an <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainerMatcher.MatchesContainer(EPiServer.Shell.ViewComposition.IContainer)">
            <summary>
            Answers if the given container is a match.
            </summary>
            <param name="container">The container to match.</param>
            <returns><c>true</c> if the container is a match; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IContainer`1">
            <summary>
            Defines that a component might have child components.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IContainer`1.Add(EPiServer.Shell.ViewComposition.IComponent,`0)">
            <summary>
            Adds a component to the collection.
            </summary>
            <param name="component">The component.</param>
            <param name="requiredSettings">The required setting.</param>
            <returns>Itself</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ICustomRenderer">
            <summary>
            Interface that enables you to take over generation of html for your <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ICustomRenderer.RenderComponent(EPiServer.Shell.ViewComposition.IComponent,System.String)">
            <summary>
            Renders the html for the component.
            </summary>
            <param name="component">The component.</param>
            <param name="innerHtml">The inner HTML.</param>
            <returns>An <see cref="T:System.Web.Mvc.MvcHtmlString"/> with the html for the component.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IFrameComponentAttribute">
            <summary>
            Defines a component that will load a page inside an iframe with a defined source location.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.IFrameComponentAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.WidgetType">
            <summary>
            Gets the type of Widget that is used for the IFrameComponent
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.CreateComponentDefinition(System.Type)">
            <summary>
            Creates the component definition from the settings provided in the attribute properties.
            </summary>
            <returns>
            A new instance of a <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition"/>.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.Url">
            <summary>
            Gets or sets the source URL for the iframe to load.
            </summary>
            <value>The source URL.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.ReloadOnContextChange">
            <summary>
            Gets or sets if the iFrame should be reloaded when the context is changed. The default value is true.
            </summary>
            <value>If the iFrame should be reloaded when the context is changed.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.KeepUrlOnContextChange">
            <summary>
            Gets or sets if the iFrame should keep the current url when the context is changed and the iFrame is reloaded. 
            The default value is false.
            </summary>
            <value>If the iFrame should keep the url when context is changed.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.MinHeight">
            <summary>
            The minimum height of the iFrame. This is set as a stylesheet attribute. The default value is 100.
            </summary>
            <value>The minimum height of the iFrame.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.MaxHeight">
            <summary>
            The maximum height of the iFrame. This is set as a stylesheet attribute. The default value is 500.
            </summary>
            <value>The maximum height of the iFrame.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IFrameComponentAttribute.ControlUri">
            <summary>
            If a wrapper is used to encapsulate a UserControl, this property can be set to access its URI used when loading the control. The default value is null.
            </summary>
            <value>The URI to the ascx of the control.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ILocalizedHeadingComponent">
            <summary>
            Defines a component that has a localization key for the heading.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ILocalizedHeadingComponent.Heading">
            <summary>
            Gets or sets the heading for the component.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ILocalizedHeadingComponent.HeadingLocalizationKey">
            <summary>
            Gets or sets the localization key for the heading.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository.Load(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Load settings for a specific view owned by the supplied user..
            </summary>
            <param name="principal">The principal to load settings for.</param>
            <param name="viewName">Name of the view to load settings for.</param>
            <returns>Settings for a specific view</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository.Load(System.Security.Principal.IPrincipal)">
            <summary>
            Loads all settings owned by a specific user.
            </summary>
            <param name="principal">The principal to load settings for.</param>
            <returns>A collection of settings for the supplied principal</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository.Save(EPiServer.Shell.ViewComposition.PersonalizedViewSettings)">
            <summary>
            Save the specified settings to the backing store.
            </summary>
            <param name="settings">The settings to persist.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository.Delete(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Deletes the settings object for the specified user and view thus restoring the view settings to system default.
            </summary>
            <param name="principal">The principal to load settings for.</param>
            <param name="viewName">Name of the view to load settings for.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition">
            <summary>
            Defines a component that can be added or removed automatically in a view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.CreateComponent">
            <summary>
            Creates the component corresponding to this component definition.
            </summary>
            <returns>A new instance of an <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.</returns>
            <remarks>This method should not perform any access control validation.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.SupportsAutomaticRegistration">
            <summary>
            Gets a value indicating whether this definition can be plugged in automatically to an <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>.
            </summary>
            <value>
            	<c>true</c> if this definition can be plugged in automatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.IsAvailableForUserSelection">
            <summary>
            Gets a value indicating whether this component should be selectable by a user when customizing a panel.
            </summary>
            <value>If this component should be selectable by a user when customizing a panel.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.AllowedRoles">
            <summary>
            Gets the list of roles that are allowed to use this component.
            </summary>
            <value>The role list .</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IPluggableComponentDefinition.HasAccess(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the specified principal has access to this component.
            </summary>
            <param name="principal">The principal.</param>
            <returns>
            	<c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IRestrictedComponentCategoryDefinition">
            <summary>
            Used to define a restricted range of component types, for instance for a view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IRestrictedComponentCategoryDefinition.GetComponentCategories">
            <summary>
            The component categories.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ISettingsDictionary">
            <summary>
            A dictionary of settings used for adding configuration aspects to children of containers.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ISettingsDictionary.GetPersonalizableSettings">
            <summary>
            Gets the settings that are to be persisted to storage.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionary"/> with the settings that can be personalized.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ISettingsDictionary.AddSettings(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the settings specified in <para>values</para> to the settings collection.
            </summary>
            <param name="values">The values.</param>
            <param name="personalizable">if the settings should be personalizable.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ISettingsDictionary.Add(EPiServer.Shell.ViewComposition.Setting)">
            <summary>
            Adds the specified <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> object containing persistance information.
            </summary>
            <param name="setting">The setting object to add.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ISettingsDictionary.MergeRange(EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Merges a range of settings, overwriting current values if existing.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ISettingsDictionary.Copy">
            <summary>
            Creates a deep copy of the settings dictionary.
            </summary>
            <value>The copied dictionary.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IViewManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IViewManager.CreateView(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Creates the view.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="principal">The user principal.</param>
            <returns>a view if found and allowed, otherwise null</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IViewManager.GetView(EPiServer.Shell.Modules.ShellModule,System.String)">
            <summary>
            Gets the view name.
            </summary>
            <param name="shellModule">the module</param>
            <param name="urlSegment">the segment to match</param>
            <returns>The view name if exist, otherwise null.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IViewProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IViewProvider.GetViews">
            <summary>
            Gets the views.
            </summary>
            <returns>A collection of views</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.IViewTransformer">
            <summary>
            Interface that is used to modify the plug-ins and settings for a view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.IViewTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the rules for the transformer.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.LocalizedHeadingViewTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.LocalizedHeadingViewTransformer.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.LocalizedHeadingViewTransformer"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.LocalizedHeadingViewTransformer.SortOrder">
            <summary>
            Used to determine the execution order when there are several <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/> classes.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.LocalizedHeadingViewTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the rules for the transformer.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PersonalizableSetting">
            <summary>
            Creates a new <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> that will always be persisted.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizableSetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizableSetting"/> class.
            </summary>
            <param name="key">The key for the setting.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizableSetting.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizableSetting"/> class.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="value">The value for the setting.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer">
            <summary>
            Transforms a view according to a users settings.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer.#ctor(EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository,EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer"/> class.
            </summary>
            <param name="settingsRepository">The settings repository.</param>
            <param name="componentManager">The component manager.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the rules for the transformer.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer.SortOrder">
            <summary>
            Used to select the order of execution when there are several <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/>s.
            </summary>
            <value><see cref="T:EPiServer.Shell.ViewComposition.PersonalizationViewTransformer"/> has a sort order of 10000.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings">
            <summary>
            Contains personalized settings for a view for a certain user.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.GetComponent(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.IComponent},System.Guid)">
            <summary>
            Returns a <see cref="T:EPiServer.Shell.Storage.ComponentData"/> of a component with <paramref name="storedComponentId"/> from the <paramref name="containers"/> collection
            </summary>
            <param name="containers">The containers.</param>
            <param name="storedComponentId">The stored component id to search for</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.FindComponentById(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.PersonalizedViewSettings},System.Guid)">
            <summary>
            Locates a <see cref="T:EPiServer.Shell.Storage.ComponentData"/> by its id within a collection of <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/>.
            </summary>
            <param name="viewSettings">The collection of view settings in which to search for the component.</param>
            <param name="componentId">The id of the component to locate.</param>
            <returns>A <see cref="T:EPiServer.Shell.Storage.ComponentData"/> settings object if a natch was found; otherwies <c>null</c></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.FindComponentById(System.Collections.Generic.IEnumerable{EPiServer.Shell.ViewComposition.PersonalizedViewSettings},System.Guid,EPiServer.Shell.ViewComposition.PersonalizedViewSettings@)">
            <summary>
            Locates a <see cref="T:EPiServer.Shell.Storage.ComponentData"/> by its id within a collection of <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/>.
            </summary>
            <param name="viewSettings">The collection of view settings in which to search for the component.</param>
            <param name="componentId">The id of the component to locate.</param>
            <param name="settings">The view settings in which the component was found.</param>
            <returns>A <see cref="T:EPiServer.Shell.Storage.ComponentData"/> settings object if a natch was found; otherwies <c>null</c></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.FindComponentById(System.Guid,EPiServer.Shell.ViewComposition.IContainer@)">
            <summary>
            Finds the container that matches the given id or null if no matching container exists.
            </summary>
            <param name="id">The id to match.</param>
            <param name="personalizationContainer">The personalization container that the component exists in if one exists.</param>
            <returns>
            The component that matches the given id or null if no matching container exists.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.Id">
            <summary>
            Id for the personalized settings.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.UserName">
            <summary>
            Gets or sets the username for these settings.
            </summary>
            <value>The username for these settings.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizedViewSettings.CustomizedContainers">
            <summary>
            Gets or sets the containers that has been customized by the user.
            </summary>
            <value>The containers that has been customized by the user.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager">
            <summary>
            Provides methods to work with a user's view settings.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.#ctor(EPiServer.Shell.ViewComposition.IPersonalizedViewSettingsRepository,EPiServer.Shell.ViewComposition.IViewManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager"/> class.
            </summary>
            <param name="repository">The personalized view settings repository.</param>
            <param name="viewManager">The view manager.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.GetOrCreateCustomizedComponent(System.Security.Principal.IPrincipal,System.String,System.Guid)">
            <summary>
            Either get's an already existing personalized component or personalizes the component hierarchy and adds it to the personalized view settings object.
            </summary>
            <param name="principal">The principal.</param>
            <param name="viewName">Name of the view.</param>
            <param name="containerId">The container's id.</param>
            <returns>
            A personalized <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> object.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.GetOrCreatePersonalizedComponent(System.Security.Principal.IPrincipal,System.String,System.Guid,EPiServer.Shell.ViewComposition.PersonalizedViewSettings@,EPiServer.Shell.ViewComposition.IContainer@)">
            <summary>
            Either get's an already existing personalized component or creates a new one and adds it to the personalized view settings object.
            </summary>
            <param name="principal">The principal.</param>
            <param name="viewName">Name of the view.</param>
            <param name="componentId">The components's id.</param>
            <param name="personalizedViewSettings">A reference to the personalized view settings object that the component is placed in or null.</param>
            <param name="personalizationContainer">The personalization container is one exists or null.</param>
            <returns>
            A personalized <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> object.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.GetUserSettings(System.String,System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Get the persolized settings for the user.
            </summary>
            <param name="viewName">The view to get the settings of.</param>
            <param name="principal">The user.</param>
            <param name="createIfItemDoesNotExist">if set to <c>true</c> a new item will be returned if there is no matching item in the backing repository.</param>
            <returns>
            The <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettings"/> for the specified user and view.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.DeleteComponent(System.Security.Principal.IPrincipal,System.String,System.Guid)">
            <summary>
            Deletes a component with a given id for a specific user and view.
            </summary>
            <param name="principal">The principal.</param>
            <param name="viewName">Name of the view.</param>
            <param name="id">The id of the component.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsManager.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository">
            <summary>
            Repository for PersonalizedViewSettings objects
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Shell.ViewComposition.IComponentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository"/> class.
            </summary>
            <param name="dynamicDataStoreFactory">The dynamic data store factory.</param>
            <param name="componentManager">The component manager that is used to create components.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository.Save(EPiServer.Shell.ViewComposition.PersonalizedViewSettings)">
            <summary>
            Saves the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository.Delete(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Deletes the settings object for the specified user and view thus restoring the view settings to system default.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository.Load(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Loads settings given specified view name.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PersonalizedViewSettingsRepository.Load(System.Security.Principal.IPrincipal)">
            <summary>
            Loads the specified principal.
            </summary>
            <param name="principal">The principal.</param>
            <returns>All view settings for the specified user.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase">
            <summary>
            Base implementation of a component that can be added or removed automatically in a view.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.PlugInAreas">
            <summary>
            Gets or sets the plug in areas that the component should automatically plug into.
            </summary>
            <value>The plug in areas.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.IsAvailableForUserSelection">
            <summary>
            Gets or sets if this component should be selectable by a user when customizing a panel.
            </summary>
            <value>
            If this component should be selectable by a user when customizing a panel.
            </value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.SupportsAutomaticRegistration">
            <summary>
            Gets a value indicating whether this definition can be plugged in automatically to an <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>.
            </summary>
            <value>
            	<c>true</c> if this definition can be plugged in automatically; otherwise, <c>false</c>.
            </value>
            <remarks>This should only be set to true for components that use the auto plug-in-feature for performance reasons.</remarks>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.AllowedRoles">
            <summary>
            Gets or sets the list of roles that are allowed to use this component.
            </summary>
            <value>The role list .</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.MatchesContainer(EPiServer.Shell.ViewComposition.IContainer)">
            <summary>
            Defines if the component should be added automatically to an <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>.
            </summary>
            <param name="container">The container to match.</param>
            <returns>
            	<c>true</c> if the component should be added to the <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.HasAccess(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the specified principal has access to this component.
            </summary>
            <param name="principal">The principal.</param>
            <returns>
            	<c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.PluggableComponentDefinitionBase.CreateComponent">
            <summary>
            Creates the component corresponding to this component definition.
            </summary>
            <returns>
            A new instance of an <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </returns>
            <remarks>This method does not perform any access control validation.</remarks>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider">
            <summary>
            Provider that makes it possible to register a custom <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/> for a <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/> through the global <see cref="T:EPiServer.ServiceLocation.IServiceLocator"/>.
            </summary>
            <remarks>Configuration is done by registering a type for the service type <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> with a specific name that matches the <see cref="P:EPiServer.Shell.ViewComposition.IComponentDefinition.DefinitionName"/>.</remarks>
            <example>
            Example of how to replace component creation for the definition "FakeComponentDefinition" with the class "AnotherFakeComponent" in an initialization module:
            
            context.Container.Configure(ce =>
            {
               ce.For&lt;IComponent&gt;().Add&lt;AnotherFakeComponent&gt;().Named(new FakeComponentDefinition().DefinitionName);
            });
            </example>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider.GetComponentDefinitions">
            <summary>
            Gets the components that this provider provides.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the component definitions that this provider handles.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider.SortOrder">
            <summary>
            Used to select the order of execution of the <see cref="T:EPiServer.Shell.ViewComposition.IComponentProvider"/>s.
            </summary>
            <value>The sort order for this provider.</value>
            <remarks>This provider has a sort order of 50.</remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ServiceLocatorComponentProvider.CreateComponent(EPiServer.Shell.ViewComposition.IComponentDefinition)">
            <summary>
            Try creating a component instance corresponding to an <see cref="T:EPiServer.Shell.ViewComposition.IComponentDefinition"/>.
            </summary>
            <param name="definition">The component definition to create a component for.</param>
            <returns>
            	<c>true</c> if a component instance was created; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Setting">
            <summary>
            Used for adding not commonly used settings for <see cref="T:EPiServer.Shell.ViewComposition.IComponent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> class with the <see cref="P:EPiServer.Shell.ViewComposition.Setting.Personalizable"/> property set to <c>false</c>.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="value">The value for the setting.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> class.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="personalizable">if set to <c>true</c> the value can be personalized.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> class with information if the setting can be personalized.
            </summary>
            <param name="key">The key for the setting.</param>
            <param name="value">The value for the setting.</param>
            <param name="personalizable">if set to <c>true</c> the value can be personalized.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Setting.Value">
            <summary>
            The value to insert into the settings collection
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Setting.Key">
            <summary>
            The key to use in the settings collection
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Setting.Personalizable">
            <summary>
            Gets a value indicating whether this <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> can be personalized.
            </summary>
            <value><c>true</c> if this setting is personalizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.op_Equality(EPiServer.Shell.ViewComposition.Setting,EPiServer.Shell.ViewComposition.Setting)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">A Setting to compare.</param>
            <param name="right">A Setting to compare.</param>
            <returns>True if Key and Value of left and right are equal.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.op_Inequality(EPiServer.Shell.ViewComposition.Setting,EPiServer.Shell.ViewComposition.Setting)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">A Setting to compare.</param>
            <param name="right">A Setting to compare.</param>
            <returns>True if key and Value of left and right differs.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Setting.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>A new instance with the values from the current settings object.</returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.SettingsDictionary">
            <summary>
            A collection of settings used for adding configuration aspects for children of containers. 
            Inherit to create implementations matching specific containers to declare the necessy settings. 
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.SettingsDictionary.MergeableSettings">
            <summary>
            Specifies what Settings that should be merged in some fashion instead of being replaced.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Add(EPiServer.Shell.ViewComposition.Setting)">
            <summary>
            Adds the specified <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> object containing persistance information. Will override any previous
            setting with the same key.
            </summary>
            <param name="setting">The setting object to add.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.MergeRange(EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Adds a range of <see cref="T:EPiServer.Shell.ViewComposition.Setting"/> objects.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.GetPersonalizableSettings">
            <summary>
            Gets the settings that can be personalized.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionary"/> with the settings that can be personalized.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.AddSettings(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Adds the settings specified in <para>values</para> to the settings collection.
            </summary>
            <param name="values">The values.</param>
            <param name="personalizable">if the settings should be personalizable.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Copy">
            <summary>
            Creates a deep copy of the settings dictionary.
            </summary>
            <returns>A new settings dictionary with the same values as this object.</returns>
            <value>The copied dictionary.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <remarks>
            The value will not be persisted. 
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key exists in the dictionary.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>
            	<c>true</c> if the dictionary contains the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Keys">
            <summary>
            Gets the keys in the dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">Name of the key to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">Contains the value associated with the specified key if the key exists in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="item">The KeyValuePair to add</param>
            <remarks>
            The value will not be persisted.
            </remarks>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Clear">
            <summary>
            Remove all elements from the dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether this dictionary contains the specified key value combination.
            </summary>
            <param name="item">The KeyValuePair to test.</param>
            <returns>
            	<c>true</c> if the dictionary contains the specified KeyValuePair; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The array which the elements are copied to.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Count">
            <summary>
            Gets the number of elements contained in this dictionary.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found and successfully removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.GetEnumerator">
            <summary>
            Gets the enumerator for iterating thhrough the collection.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator">
            <summary>
            Enumerator implementation
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.#ctor(System.Collections.Generic.Dictionary{System.String,EPiServer.Shell.ViewComposition.Setting})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator"/> class.
            </summary>
            <param name="dictionary">The dictionary to enumerate.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.CreateCurrent(System.Collections.Generic.KeyValuePair{System.String,EPiServer.Shell.ViewComposition.Setting})">
            <summary>
            Creates the current.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.Current">
            <summary>
            Gets the current entry.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current entry.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SettingsDictionary.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.SortComponentTransformer">
            <summary>
                Sorts all components according to their sort order.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.SortComponentTransformer.SortOrder">
            <summary>
            Used to select the order of execution when there are several <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.SortComponentTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Transforms the view according to the rules for the transformer.
            </summary>
            <param name="view">The view.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ViewCompositionException">
            <summary>
            Exception thrown when the application fails to assemble an <see cref="T:EPiServer.Shell.ViewComposition.ICompositeView"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewCompositionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ViewCompositionException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewCompositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ViewCompositionException"/> class.
            </summary>
            <param name="message">The error message explaining the reason for the exception.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewCompositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ViewCompositionException"/> class.
            </summary>
            <param name="message">The error message explaining the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of this exception, or null.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewCompositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.ViewCompositionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ViewProviderAttribute">
            <summary>
            Defines a <see cref="T:EPiServer.Shell.ViewComposition.IViewProvider"/> for the system. The type using this attribute
            must implement <see cref="T:EPiServer.Shell.ViewComposition.IViewProvider"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewProviderAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Shell.ViewComposition.ViewProviderAttribute"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.TransformationType">
            <summary>
            The type of the modification.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.TransformationType.None">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.TransformationType.Add">
            <summary>
            Add a component.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.TransformationType.Remove">
            <summary>
            Removes a component.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ViewTransformationSetting">
            <summary>
            Contains settings to be able to alter which components should be contained in a view.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ViewTransformationSetting.PlugInArea">
            <summary>
            Gets or sets the plug in area.
            </summary>
            <value>The plug in area to match.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ViewTransformationSetting.TransformationType">
            <summary>
            Gets or sets the <see cref="P:EPiServer.Shell.ViewComposition.ViewTransformationSetting.TransformationType"/> of the modification.
            </summary>
            <value>The <see cref="P:EPiServer.Shell.ViewComposition.ViewTransformationSetting.TransformationType"/> of the modification.</value>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ViewTransformationSetting.DefinitionName">
            <summary>
            Gets or sets the definition name for the component.
            </summary>
            <value>The definition name for the component.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ViewTransformationSettingsCollection">
            <summary>
            Defines settings that can be used to modify the default behaviour and plug-ins for a view.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.ViewTransformationSettingsCollection.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.ViewTransformerAttribute">
            <summary>
            Defines a <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/> for the system. The type using this attribute
            must implement <see cref="T:EPiServer.Shell.ViewComposition.IViewTransformer"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.ViewTransformerAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Shell.ViewComposition.ViewTransformerAttribute"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion">
            <summary>
            Specifies in what region a component should be placed when in a <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/>
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion.Top">
            <summary>
            Top location
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion.Bottom">
            <summary>
            Bottom location
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion.Leading">
            <summary>
            Leading location
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion.Trailing">
            <summary>
            Trailing location
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion.Center">
            <summary>
            Center location
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer">
            <summary>
            A layout container with the possibility of having up to five regions. Top, Bottom, Leading and Center
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderContainer.#ctor(EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/> class.
            </summary>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderContainer.#ctor(System.String,EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/> class.
            </summary>
            <param name="style">The css style.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderContainer.#ctor(System.String,System.Boolean,System.Boolean,EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/> class.
            </summary>
            <param name="style">The style.</param>
            <param name="liveSplitters">if set to <c>true</c> containers will change layout live when resize.</param>
            <param name="gutters">if set to <c>true</c> containers will have borders even if they're not draggable.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary">
            <summary>
            Settings needed for children of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/>
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary.#ctor(EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion,EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary"/> class.
            </summary>
            <param name="region">The region.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary.#ctor(EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion,System.Boolean,System.Int32,EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary"/> class.
            </summary>
            <param name="region">The region.</param>
            <param name="resizable">if set to <c>true</c> [resizable].</param>
            <param name="size">The size.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary.#ctor(EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary"/> class.
            </summary>
            <param name="region">The region.</param>
            <param name="size">The size.</param>
            <param name="minSize">Size of the min.</param>
            <param name="maxSize">Size of the max.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary.#ctor(EPiServer.Shell.ViewComposition.Containers.BorderContainerRegion,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderSettingsDictionary"/> class.
            </summary>
            <param name="region">The region.</param>
            <param name="resizable">if set to <c>true</c> the region will have a splitter and be resizable.</param>
            <param name="size">The size.</param>
            <param name="minSize">Min size of the region.</param>
            <param name="maxSize">Max size of the region.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.ComponentContainer">
            <summary>
            An extension of the grid container providing component management
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ComponentContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ComponentContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Containers.ComponentContainer.ComponentCategory">
            <summary>
            Gets or sets the categories that should be suggested for users for this container.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.ComponentGroup">
            <summary>
            A tab container that is used within a <see cref="T:EPiServer.Shell.ViewComposition.Containers.ComponentContainer"/> to group components.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ComponentGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ComponentGroup"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Containers.ComponentGroup.HeadingLocalizationKey">
            <summary>
            Gets or sets the localization key for the heading.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.ComponentPaneContainer">
            <summary>
            An extension of the grid container providing component management.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ComponentPaneContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ComponentPaneContainer"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.ContentPane">
            <summary>
            A general purpose pane capable of loading external data from a url
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ContentPane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ContentPane"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ContentPane.#ctor(EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ContentPane"/> class with the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.ContentPane.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,EPiServer.Shell.ViewComposition.Setting[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.ContentPane"/> class.
            </summary>
            <param name="href">The href.</param>
            <param name="extractContent">if set to <c>true</c> extracts content from the body of what is loaded from href.</param>
            <param name="parseOnLoad">if set to <c>true</c> parses the content loaded for additional widgets.</param>
            <param name="preventCache">if set to <c>true</c> prevents clientside cahce of requests from the href.</param>
            <param name="preload">if set to <c>true</c> loads content from the href even if it is not visible.</param>
            <param name="refreshOnShow">if set to <c>true</c> refreshes content from the href when it becomes visible.</param>
            <param name="loadingMessage">A message to display while loading.</param>
            <param name="errorMessage">a message to display when loading fails.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.CustomContainer">
            <summary>
            Represents a container that can be easily customized.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.CustomContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.CustomContainer"/> class.
            </summary>
            <param name="widgetType">Client side widget identifier</param>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.GridContainer">
            <summary>
            A container thas provides several layout areas where child components can be placed.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.GridContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.GridContainer"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.PinnablePane">
            <summary>
            A floating pane which can be pinned to be used inside the <see cref="T:EPiServer.Shell.ViewComposition.Containers.BorderContainer"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.PinnablePane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.PinnablePane"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.TabPosition">
            <summary>
            Specifies where tabs should be placed in comparison with the children
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.TabPosition.Top">
            <summary>
            Positioned on top
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.TabPosition.Bottom">
            <summary>
            Positioned below
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.TabPosition.Left">
            <summary>
            Positioned to the left
            </summary>
        </member>
        <member name="F:EPiServer.Shell.ViewComposition.Containers.TabPosition.Right">
            <summary>
            Positioned to the right
            </summary>
        </member>
        <member name="T:EPiServer.Shell.ViewComposition.Containers.TabContainer">
            <summary>
            A tabbed layout container. The tabs can be positioned Top, Bottom, Leading and Center
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.TabContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.TabContainer"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.ViewComposition.Containers.TabContainer.#ctor(EPiServer.Shell.ViewComposition.Containers.TabPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.ViewComposition.Containers.TabContainer"/> class.
            </summary>
            <param name="tabPosition">The tab position.</param>
        </member>
        <member name="P:EPiServer.Shell.ViewComposition.Containers.TabContainer.ContainersPlugInArea">
            <summary>
            Gets or sets the path used for calculating where to put the component in the UI
            for every tab on the tab container.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.ClientResourceAttribute">
            <summary>
            Abstract base class for attributes concerning required client resources
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.ClientResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.ClientResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.ClientResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.ClientResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL.</param>
            <param name="moduleName">The module were the resource can be found.</param>
        </member>
        <member name="P:EPiServer.Shell.Web.ClientResourceAttribute.ResourceUrl">
            <summary>
            Relative URL
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.ClientResourceAttribute.ModuleName">
            <summary>
            The module were the resource can be found
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.ClientResourceAttribute.SortIndex">
            <summary>
            Gets or sets the sort index, use this if you have dependencies between your resources.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.CssResourceAttribute">
            <summary>
            Declares a required client css resource
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.CssResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.CssResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL</param>
        </member>
        <member name="M:EPiServer.Shell.Web.CssResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.CssResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL.</param>
            <param name="moduleName">The module were the resource can be found.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.DateTimeExtensions">
            <summary>
            Extension methods for the DateTime class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateString(System.Nullable{System.DateTime})">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <returns>A text representation of the date.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateString(System.DateTime)">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <returns>A text representation of the date.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateString(System.DateTime,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <param name="localizationService">The service used for localization.</param>
            <returns>A text representation of the date.</returns>
            <remarks>If <paramref name="localizationService"/> is <c>null</c>, 
            the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <returns>A text representation of the date.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateTimeString(System.DateTime)">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <returns>A text representation of the date.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.DateTimeExtensions.ToFriendlyDateTimeString(System.DateTime,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Returns Today, Yesterday or <see cref="M:System.DateTime.ToShortDateString"/>.
            </summary>
            <param name="date">The date to transform.</param>
            <param name="localizationService">The service used for localization.</param>
            <returns>A text representation of the date.</returns>
            <remarks>If <paramref name="localizationService"/> is <c>null</c>, 
            the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="T:EPiServer.Shell.Web.HttpContextExtensions">
            <summary>
            Extension methods for the HttpContext class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.HttpContextExtensions.GetRequestContext(System.Web.HttpContext)">
            <summary>
            Returns the current request context, or wraps the HttpContext and
            creates a new RequestContext.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.HttpContextExtensions.GetHttpContextBase(System.Web.HttpContext)">
            <summary>
            Returns the current http context base, or wraps the HttpContext.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.HttpContextExtensions.GetControllerPath(System.Web.HttpContext,System.Type,System.String)">
            <summary>
            Gets the path to a controller action
            </summary>
            <param name="context">The current http context</param>
            <param name="controllerType">The type of controller to link</param>
            <param name="action">The action name on the controller</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.HttpContextExtensions.GetControllerPath(System.Web.HttpContextBase,System.Type,System.String)">
            <summary>
            Gets the path to a controller action
            </summary>
            <param name="context">The current http context</param>
            <param name="controllerType">The type of controller to link</param>
            <param name="action">The action name on the controller</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.InitializationTagBuilder">
            <summary>
            Creates a shell script initiailzation html element.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.LocalizationResourceAttribute">
            <summary>
            Declares a required client localization resources
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.LocalizationResourceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.LocalizationResourceAttribute"/> class.
            </summary>
            <param name="localizationType">Relative URL</param>
        </member>
        <member name="P:EPiServer.Shell.Web.LocalizationResourceAttribute.RouteValues">
            <summary>
            RouteValues for the localized resource
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.LocalizationResourceAttribute.LocalizationType">
            <summary>
            Type used for created RouteValues localization
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.LogOnExtensions">
            <summary>
            Extensions for validating log-on via ajax requests
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.LogOnExtensions.ValidateAjaxLogOn(System.Web.HttpContextBase,EPiServer.Shell.Web.ValidateUserNamePassword)">
            <summary>
            Validates an a log-on submitted via ajax.
            </summary>
            <param name="httpContext">The http context.</param>
            <param name="validationMethod">The method that will validate the user.</param>
            <returns>True if the user was sucessfully validated.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.LogOnExtensions.IsLogOnRequest(System.Web.HttpContextBase)">
            <summary>
            Checks whether the request contains log-on information.
            </summary>
            <param name="httpContext">The http context containing the request.</param>
            <returns>true if the request is a log on request.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.LogOnExtensions.SendAjaxLogOnStatus(System.Web.HttpContextBase,System.Boolean)">
            <summary>
            Sends authentication status via json to the client.
            </summary>
            <param name="httpContext">The http context.</param>
            <param name="authenticationSuccessful">True if the authentication was successful and the client may continue it's business.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.LogOnExtensions.AddAjaxLogOnHeaders(System.Web.HttpContextBase)">
            <summary>
            Adds validation headers to the response. This is used in 
            ajax scenarios to display a log-on screen without redirecting.
            </summary>
            <param name="httpContext">The http context.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.PlugInArea">
            <summary>
            Shell plug-in areas
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.PlugInArea.DashboardDefaultTab">
            <summary>
            The default tab for the dashboard view.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.PlugInArea.DashboardRoot">
            <summary>
            The root node for the dashboard. Use this node to plug in new tabs.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.ScriptResourceAttribute">
            <summary>
            Declares a required client script resource
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.ScriptResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.ScriptResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL</param>
        </member>
        <member name="M:EPiServer.Shell.Web.ScriptResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.ScriptResourceAttribute"/> class.
            </summary>
            <param name="resourceUrl">Relative URL.</param>
            <param name="moduleName">The module were the resource can be found.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.StringExtensions">
            <summary>
            Extension methods for the String class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Removes one instance of a text from the end of a string.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.StringExtensions.Ellipsis(System.String,System.Int32)">
            <summary>
            Trims excessivly long strings replacing it's end with ...
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.StringExtensions.ToKeyValueString``2(System.Collections.Generic.IDictionary{``0,``1},System.String)">
            <summary>
            Flattens a dictionary into a string that can be used for debugging purposes
            </summary>
            <typeparam name="TK">Ignored</typeparam>
            <typeparam name="TV">Ignored</typeparam>
            <param name="map">The dictionary to flatten out</param>
            <param name="separator">The separator between key-value paris in the dictionary</param>
            <returns>A string representing the dictionary values</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.StringExtensions.TrimControllerSuffix(System.String)">
            <summary>
            Removes the "Controller" suffix from the given controller name.
            </summary>
            <param name="controllerName">A string representing a controller.</param>
            <returns>A trimmed name without the controller ending.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.ValidateUserNamePassword">
            <summary>
            A username and password validation function.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password</param>
            <returns>True if the user was sucessfully authenticated.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.BootstrapperViewModel">
            <summary>
            Used to start a shell client side view
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.BootstrapperViewModel"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.ViewTitle">
            <summary>
            Title of the loaded view
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.ViewName">
            <summary>
            The name of the view to load.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.Modules">
            <summary>
            All modules available in the system.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.ModuleName">
            <summary>
            Gets or sets the name of the shell module to start.
            </summary>
            <value>
            The name of the shell module.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.GlobalNavigationMenuType">
            <summary>
            Gets or sets how to render the global navigation menu
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.UseContainers">
            <summary>
            Gets or sets whether to use a bordercontainer for the layout
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.DefaultContext">
            <summary>
            Defines a default context for the view, for instance the start page for the CMS home view.
            </summary>
            <remarks>Set to null if the view should not have a default context.</remarks>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.ComponentCategories">
            <summary>
            Gets or sets the component categories that filters what component can be added to the view.
            </summary>
            <value>
            The component categories.
            </value>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.BootstrapperViewModel.ViewSettings">
            <summary>
            Gets or sets the view settings.
            </summary>
            <value>
            The view settings.
            </value>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.CacheControlAttribute">
            <summary>
            Provides caching settings for the controller / action 
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.CacheControlAttribute.#ctor(System.Web.HttpCacheability)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.CacheControlAttribute"/> class.
            </summary>
            <param name="cacheability">The cacheability value</param>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.CacheControlAttribute.Cacheability">
            <summary>
            Gets the cacheability value.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.CacheControlAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called by the ASP.NET MVC framework after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.CompressFilterAttribute">
            <summary>
            A filter to gzip the result of an action.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.CompressFilterAttribute.Enabled">
            <summary>
            Support testing without using static setting
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.CompressFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Called when the action is executing. Will filter make sure that the result is zipped.
            </summary>
            <param name="filterContext">The context for the action.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ControllerNameRouteConstraint">
            <summary>
            Constrains the valid routes to the controllers defined in a specific module
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ControllerNameRouteConstraint.#ctor(EPiServer.Shell.Modules.ShellModule)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.ControllerNameRouteConstraint"/> class.
            </summary>
            <param name="module">The module searched for controllers.</param>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.ControllerNameRouteConstraint.ViewManager">
            <summary>
            The view manager service
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ControllerNameRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Determines whether the route values contains a controller parameter matching a controller in the module.
            </summary>
            <param name="httpContext">An object that encapsulates information about the HTTP request.</param>
            <param name="route">The object that this constraint belongs to.</param>
            <param name="parameterName">The name of the parameter that is being checked.</param>
            <param name="values">An object that contains the parameters for the URL.</param>
            <param name="routeDirection">An object that indicates whether the constraint check is being performed when an incoming request is being handled or when a URL is being generated.</param>
            <returns>
            true if a matiching controller is found; otherwise, false.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.DojoResourceResult">
            <summary>
            Mvc <see cref="T:System.Web.Mvc.ActionResult"/> outputting JavaScript formatted Dojo resource files using a json serializer.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.DojoResourceResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.DojoResourceResult"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.DojoResourceResult.WriteDataToResponse(System.Web.HttpResponseBase)">
            <summary>
            Serializes and writes the Data property value to the response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.FileCollectionModelBinder">
            <summary>
            Provides binder for the files collection.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.FileCollectionModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <returns>
            The bound value.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="bindingContext">The binding context.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.HttpContextBaseExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.HttpContextBase"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.HttpContextBaseExtensions.SetCulture(System.Web.HttpContextBase)">
            <summary>
            Reads the Language property of the profile and sets current thread culture
            </summary>
            <param name="httpContext">The HTTP context.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.IBootstrapper">
            <summary>
            Provides bootstrapper view name
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.IBootstrapper.BootstrapperViewName">
            <summary>
            Gets the name of the bootstrapper view.
            </summary>
            <value>
            The name of the bootstrapper view.
            </value>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.IBootstrapper.CreateViewModel(System.String,System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            Creates the view model.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="context">The context.</param>
            <param name="moduleName">The name of the shell module to startup</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.IModuleControllerFactory">
            <summary>
            Defines the methods that are required for a module controller factory.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.JsonDataResult">
            <summary>
            Mvc <see cref="T:System.Web.Mvc.ActionResult"/> outputting JSON using a json serializer.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonDataResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonDataResult.#ctor(EPiServer.Framework.Serialization.IObjectSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonDataResult.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> class.
            </summary>
            <param name="serializerFactory">The serializer factory to get the registered json serializer from.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonDataResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context within which the result is executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> parameter is null.</exception>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonDataResult.WriteDataToResponse(System.Web.HttpResponseBase)">
            <summary>
            Serializes and writes the <see cref="N:EPiServer.Data"/> property value to the response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.JsonDataResult.Serializer">
            <summary>
            Gets or sets the serializer used when serializing data to the response stream.
            </summary>
            <remarks>
            If no serializer is set the serializer factory <see cref="T:EPiServer.Framework.Serialization.IObjectSerializerFactory"/> registered in
            <see cref="P:EPiServer.ServiceLocation.ServiceLocator.Current"/> is queried for a serializer handling <see cref="F:EPiServer.Framework.Serialization.KnownContentTypes.Json"/>.
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.JsonExtensions">
            <summary>
            Controller extensions for json serialization using <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonExtensions.JsonData(System.Web.Mvc.Controller,System.Object)">
            <summary>
            Returns a <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> for converting the data object to its json representation.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="data">The object to convert to json.</param>
            <returns>A <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> containing the data that can be used to execute the results of the controller.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonExtensions.JsonData(System.Web.Mvc.Controller,System.Object,System.Web.Mvc.JsonRequestBehavior)">
            <summary>
            Returns a <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> for converting the data object to its json representation.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="data">The object to convert to json.</param>
            <param name="behavior">Any specific behavior for the json serialization.</param>
            <returns>A <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> containing the data that can be used to execute the results of the controller.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonExtensions.JsonData(System.Web.Mvc.Controller,System.Object,System.Web.Mvc.JsonRequestBehavior,EPiServer.Framework.Serialization.IObjectSerializerFactory)">
            <summary>
            Returns a <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> for converting the data object to its json representation.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="data">The object to convert to json.</param>
            <param name="behavior">Any specific behavior for the json serialization.</param>
            <param name="serializerFactory">The serializer factory used to get the appropriate serializer.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Web.Mvc.JsonDataResult"/> containing the data that can be used to execute the results of the controller.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.JsonExtensions.WrappedJsonData(System.Web.Mvc.Controller,System.Object)">
            <summary>
            Returns a <see cref="T:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults"/> for converting the data object to its json representation and wrapping it in a textarea tag.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="data">The object to convert to json.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ModuleControllerFactory">
            <summary>
            Creates controllers defined by a module.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleControllerFactory.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.ModuleControllerFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates an MVC controller based on the module passed with route data tokens.
            </summary>
            <param name="requestContext">The current request</param>
            <param name="controllerName">The controller name extracted from the requests</param>
            <returns>A controller instance</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets the controller's session behavior.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="controllerName">The name of the controller whose session behavior you want to get.</param>
            <returns>The controller's session behavior.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ModuleMvcHandler">
            <summary>
            Controls the execution of a module's controllers.
            We use our own mvc handler in order not to interfere with users using MVC.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleMvcHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processes the request synchronously.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleMvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
            <summary>
            Processes both async and non-async controllers synchronously.
            </summary>
            <param name="httpContext"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ModuleMvcRouteHandler">
            <summary>
            Creates the module mvc handler when using module routes.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ModulesViewLocationCache">
            <summary>
            Implements a view location cache per module
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModulesViewLocationCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.ModulesViewLocationCache"/> class.
            </summary>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModulesViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
            <summary>
            Gets the view location by using the specified HTTP context and the cache key.
            </summary>
            <returns>
            The view location.
            </returns>
            <param name="httpContext">The HTTP context.</param><param name="key">The cache key.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModulesViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
            <summary>
            Inserts the specified view location into the cache by using the specified HTTP context and the cache key.
            </summary>
            <param name="httpContext">The HTTP context.</param><param name="key">The cache key.</param><param name="virtualPath">The virtual path.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection">
            <summary>
            A view engine composed of module view engines. The view engine will defer work to
            a contained view engine belonging to the requesting module.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.Add(System.String,System.Web.Mvc.IViewEngine)">
            <summary>
            Adds a view engine to the internal view engine collection
            </summary>
            <param name="name"></param>
            <param name="viewEngine"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            Finds a partial view when the route data tokens contains a module.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="partialViewName">Partial name of the view.</param>
            <param name="useCache">if set to <c>true</c> [use cache].</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
            <summary>
            Finds a view when the route data tokens contains a module.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="viewName">Name of the view.</param>
            <param name="masterName">Name of the master.</param>
            <param name="useCache">if set to <c>true</c> [use cache].</param>
            <returns>A decorated result or empty list when not one of our modules.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
            <summary>
            Releases the view if the route data tokens contains a module.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the view engines.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ModuleViewEngineCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ProfileBaseExtensions">
            <summary>
            Extension methods for the ProfileBase class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.ProfileBaseExtensions.TryGetPropertyValue``1(System.Web.Profile.ProfileBase,System.String,``0@)">
            <summary>
            Try to get a specific property from the profile
            </summary>
            <typeparam name="T">The type of the property to get</typeparam>
            <param name="profile">The actual profile instance to get the property from</param>
            <param name="propertyName">The name of the property to get</param>
            <param name="value">The returned value if succeeded (otherwise default)</param>
            <returns>If operation succeeded</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.ShellWebFormViewEngine">
            <summary>
            A view engine for WebForm that works around 2 known bugs in MVC 5
            </summary>
            <remarks>
            See https://aspnetwebstack.codeplex.com/workitem/1362 and https://aspnetwebstack.codeplex.com/workitem/1366
            </remarks>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults">
            <summary>
            Reperesents Json data results wrapped in TextArea tag.
            That wrapping is required if results are used in dojo.io.iframe http://dojotoolkit.org/reference-guide/dojo/io/iframe.html#additional-information
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults.#ctor(EPiServer.Framework.Serialization.IObjectSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults.WriteDataToResponse(System.Web.HttpResponseBase)">
            <summary>
            Serializes and writes the Data property value wrapped in TextArea to the response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.WrappedJsonDataResults.StringResponse.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.CssExtensions">
            <summary>
            CSS related html helper extensions
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.CssExtensions.ShellCssLink(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a CSS link tag from a site center relative css file path.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="shellRelativePath">A path relative from the shell base ui path.</param>
            <returns>A link html tag.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.CssExtensions.ThemeClass(System.Web.Mvc.HtmlHelper)">
            <summary>
            Returns the the theme class supposed to be used in the documents body tag for based on the dojo theming model
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <returns>The configured theme class string.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.DojoConfigurationHelper">
            <summary>
            Html helper for writing the dojo configuration to the html page
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoConfigurationHelper.ConfigureDojo(System.Web.UI.Page,EPiServer.Shell.UI.DojoConfig)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoConfigurationHelper.ConfigureDojo(System.Web.UI.Page,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
            <param name="page">Refere</param>
            <param name="parseOnLoad">indicate if dojo should parse the DOM on load</param>
            <param name="registerModulePaths">if set to <c>true</c> include configured module paths.</param>
            <param name="async">if set to <c>true</c> [async].</param>
            <returns>
            A string containing dojoConfig object. var dojoConfig =  { ... };
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoConfigurationHelper.ConfigureDojo(System.Web.UI.Page,EPiServer.Shell.UI.DojoConfig,System.Boolean)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.DojoExtensions">
            <summary>
            Extension methods to facilitate dojo development
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoExtensions.DojoConfig(System.Web.UI.Page)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
            <param name="page">Refere</param>
            <returns>A string containing dojoConfig object. var dojoConfig =  { ... };</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoExtensions.DojoConfig(System.Web.UI.Page,System.Boolean)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
            <param name="page">Refere</param>
            <param name="parseOnLoad">indicate if dojo should parse the DOM on load</param>
            <returns>A string containing dojoConfig object. var dojoConfig =  { ... };</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoExtensions.DojoConfig(System.Web.UI.Page,System.Boolean,System.Boolean)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
            <param name="page">Refere</param>
            <param name="parseOnLoad">indicate if dojo should parse the DOM on load</param>
            /// <param name="registerModulePaths">if set to <c>true</c> include configured module paths.</param>
            <returns>A string containing dojoConfig object. var dojoConfig =  { ... };</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.DojoExtensions.DojoConfig(System.Web.UI.Page,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a script tag containing a dojoConfig object.
            </summary>
            <param name="page">Refere</param>
            <param name="parseOnLoad">indicate if dojo should parse the DOM on load</param>
            <param name="registerModulePaths">if set to <c>true</c> include configured module paths.</param>
            <param name="async">if set to <c>true</c> [async].</param>
            <returns>
            A string containing dojoConfig object. var dojoConfig =  { ... };
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Mvc.HtmlHelper" />. Used by the gadget framework.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.BeginGadgetForm(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders a form tag with the class attribute "epi-gadgetform".
            </summary>
            <param name="helper">The HtmlHelper to attach this method to.</param>
            <param name="actionName">Name of the action the form should post to.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.BeginGadgetForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
            <summary>
            Renders a form tag with the class attribute "epi-gadgetform".
            </summary>
            <param name="helper">The HtmlHelper to attach this method to.</param>
            <param name="actionName">Name of the action the form should post to.</param>
            <param name="routeValues">Any extra route values that should be sent in the form POST</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.GetGadgetId(System.Web.Mvc.HtmlHelper)">
            <summary>
            Gets the gadget id from the querystring or Route values.
            </summary>
            <param name="helper">The Html helper.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.AcceptButton(System.Web.Mvc.HtmlHelper)">
            <summary>
            Returns markup for save button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.AcceptButton(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Returns markup for save button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="htmlAttributes">Any attributes that should be added to the input tag. </param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.AcceptButton(System.Web.Mvc.HtmlHelper,System.Object,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Returns markup for save button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="htmlAttributes">Any attributes that should be added to the input tag. </param>
            <param name="localizationService">The service used for localization.</param>
            <remarks>If <paramref name="localizationService"/> is <c>null</c>, 
            the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag. </param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the link.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns markup for loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the link.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <param name="routeValues">Any extra route parameters to send to the controller</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLinkButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for a Link Button loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLinkButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for a Link Button loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the link.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewLinkButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns markup for a Link Button loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the link.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <param name="routeValues">Any extra route parameters to send to the controller</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewInputButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for Input Button loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewInputButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns markup for loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the input.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ViewInputButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns markup for loading a gadget view through it's action.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="text">The text of the link</param>
            <param name="title">The title for the link.</param>
            <param name="actionName">The name of the action on the executing controller</param>
            <param name="cssClass">Any extra css class that should be added to the input.</param>
            <param name="htmlAttributes">Any attributes that should be added to the a tag.</param>
            <param name="routeValues">Any extra route parameters to send to the controller</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.CancelButton(System.Web.Mvc.HtmlHelper)">
            <summary>
            Returns markup for cancel button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.CancelButton(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Returns markup for cancel button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="htmlAttributes">The attributes that will be added to the input tag.</param>
            <returns>The html for a cancel button.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.CancelButton(System.Web.Mvc.HtmlHelper,System.Object,System.Object)">
            <summary>
            Returns markup for cancel button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="htmlAttributes">The attributes that will be added to the input tag.</param>
            <param name="routeValues">Extra route paramaters.</param>
            <returns>The html for a cancel button.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.CancelButton(System.Web.Mvc.HtmlHelper,System.Object,System.Object,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Returns markup for cancel button of a gadget.
            </summary>
            <param name="helper">The HTML helper.</param>
            <param name="htmlAttributes">The attributes that will be added to the input tag.</param>
            <param name="routeValues">Extra route paramaters.</param>
            <param name="localizationService">The service used for localization.</param>
            <returns>The html for a cancel button.</returns>
            <remarks>If <paramref name="localizationService"/> is <c>null</c>, 
            the static instance <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/> will be used.</remarks>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.SetGadgetFeedback(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Sets the gadget feedback.
            </summary>
            <param name="helper">The helper.</param>
            <param name="feedbackMessage">The feedback message.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.SetGadgetFeedback(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.TimeSpan,System.Boolean)">
            <summary>
            Sets the gadget feedback.
            </summary>
            <param name="helper">The helper.</param>
            <param name="feedbackMessage">The feedback message.</param>
            <param name="showAjaxLoader">if set to <c>true</c> [show ajax loader].</param>
            <param name="hideAfter">The hide after.</param>
            <param name="fadeout">if set to <c>true</c> [fade out].</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.ClearGadgetFeedback(System.Web.Mvc.HtmlHelper)">
            <summary>
            Clears the gadget feedback.
            </summary>
            <param name="helper">The helper.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.GadgetHtmlHelperExtensions.GenerateLoadViewScript(System.String,System.Object)">
            <summary>
            Generates a load view client javascript
            </summary>
            <param name="action">The action to load.</param>
            <param name="routeValues">Extra route paramaters.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions">
            <summary>
            Uncategorized html helper extensions
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.AutoUpdate(System.Web.Mvc.HtmlHelper,System.Int32,System.String)">
            <summary>
            Adds autoupdate feature on the gadget.
            </summary>
            <param name="html">The HTML</param>
            <param name="delay">Delay in milliseconds</param>
            <param name="actionName">The name of the action to call on autoupdate</param>
            <returns>Span which saves value for autoupdate</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.AutoUpdate(System.Web.Mvc.HtmlHelper,System.Int32)">
            <summary>
            Adds autoupdate feature on the gadget (also is possible from the gadget js options)
            </summary>
            <param name="html">The HTML.</param>
            <param name="delay">Delay in milliseconds</param>
            <returns>Span which saves value for autoupdate</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.AutoUpdate(System.Web.Mvc.HtmlHelper,System.TimeSpan)">
            <summary>
            Adds autoupdate feature on the gadget (also is possible from the gadget js options)
            </summary>
            <param name="html">The HTML.</param>
            <param name="delay">Time span for delay</param>
            <returns>Span which saves value for autoupdate</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.AutoUpdate(System.Web.Mvc.HtmlHelper,System.TimeSpan,System.String)">
            <summary>
            Adds autoupdate feature on the gadget (also is possible from the gadget js options)
            </summary>
            <param name="html">The HTML.</param>
            <param name="delay">Time span for delay</param>
            <param name="actionName">The name of the action to call on autoupdate</param>
            <returns>Span which saves value for autoupdate</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.ShellLinkButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a anchor with surrounding spans to emulate the look of ShellButtons.
            </summary>
            <param name="html">The HTML.</param>
            <param name="href">The href.</param>
            <param name="target">The target.</param>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="cssClass">The CSS class.</param>
            <returns>An html string representing the anchor.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.ShellLinkButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates a anchor with surrounding spans to emulate the look of ShellButtons.
            </summary>
            <param name="html">The HTML.</param>
            <param name="href">The href.</param>
            <param name="target">The target.</param>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">Any extra html attribute that should be added to the tag.</param>
            <returns>An html string representing the anchor.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.RenderTableRows(System.Web.Mvc.HtmlHelper,System.Collections.IEnumerable,System.String[])">
            <summary>
            Renders the given data objects into a table row elements.
            </summary>
            <param name="html">The HTML.</param>
            <param name="tableRows">The table rows.</param>
            <param name="tableProperties">The table properties.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.Paging(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.Pager,System.String)">
            <summary>
            Creates paging html elements.
            </summary>
            <param name="html">The object this method is attached to</param>
            <param name="status">The paging status.</param>
            <param name="action">The action that should be executed when a paging item is selected.</param>
            <returns>Html containing paging elements.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.Paging(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.Pager,System.String,System.Object)">
            <summary>
            Creates paging html elements.
            </summary>
            <param name="html">The object this method is attached to</param>
            <param name="status">The paging status.</param>
            <param name="action">The action that should be executed when a paging item is selected.</param>
            <param name="routeValues">The route values.</param>
            <returns>Html containing paging elements.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.Anchor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates an anchor with the given attributes.
            </summary>
            <param name="html">The html helper to append the extension method to.</param>
            <param name="href">The url to link to.</param>
            <param name="target">The target frame.</param>
            <param name="title">The title/tool tip.</param>
            <param name="text">The link text.</param>
            <param name="maxTextLength">The maximum length of the link.</param>
            <returns>A loaded tag builder.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.Anchor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an anchor with the given attributes.
            </summary>
            <param name="html">The html helper to append the extension method to.</param>
            <param name="href">The url to link to.</param>
            <param name="target">The target frame.</param>
            <param name="title">The title/tool tip.</param>
            <param name="text">The link text.</param>
            <returns>A loaded tag builder.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.Tag(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Creates a tag builder with a css class.
            </summary>
            <param name="htmlHelper"></param>
            <param name="tagName">The html tag name</param>
            <param name="cssClass">The css class to assign the tag</param>
            <returns>A tag builder</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperExtensions.ShellValidationSummary(System.Web.Mvc.HtmlHelper)">
            <summary>
            Will wrap the standard asp.net validation summary with a div with the css class .epi-gadgetFeedback.
            </summary>
            <param name="htmlHelper">The HTML helper this method is attached to.</param>
            <returns>
            The standard asp.net validation summary surrounded by a div with the css class .epi-gadgetFeedback.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.Mvc.HtmlHelper" /> class that handles translation scenarios.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslatedLabel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Creates a HTML label using the supplied lang key
            </summary>
            <param name="html">The html helper to hook the method to</param>
            <param name="targetID">The label's for attribute value</param>
            <param name="translationKey">The lang file xpath from where to get label contents</param>
            <returns>A HTML label</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslatedTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Creates a HTML input text with an associated translated label
            </summary>
            <param name="htmlHelper">The html helper to hook the method to</param>
            <param name="name">The name of the input text</param>
            <param name="translationKey">The lang file xpath from where to get label contents</param>
            <param name="value">The text box's value</param>
            <param name="htmlAttributes">Html attributes to decorate the input text</param>
            <returns>Two HTML elements, a label and an input text</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslatedButton(System.Web.Mvc.HtmlHelper,System.String,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.Object)">
            <summary>
            Creates an input with the appropriate styles and a translated button text
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.Translate(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Translates using the current <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
            <param name="html"></param>
            <param name="translationKey">The xpath to the translated text</param>
            <returns>A translated string or a warning text if no translation was found</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslateFormat(System.Web.Mvc.HtmlHelper,System.String,System.Object[])">
            <summary>
            Translates using the current <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
            <param name="html"></param>
            <param name="translationKey">The xpath to the translated text</param>
            <param name="values">An array of objects passed to the string.Format method</param>
            <returns>A translated string or a warning text if no translation was found</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslateForScript(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Translates using the current <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
            <param name="html"></param>
            <param name="translationKey">The xpath to the translated text</param>
            <returns>A translated string or a warning text if no translation was found</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.HtmlHelperTranslationExtensions.TranslateFallback(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Translate the given string to the current language. Will return supplied fallback string if no match is found.
            </summary>
            <param name="htmlHelper">The html helper to hook the method to</param>
            <param name="translationKey">A string to translate</param>
            <param name="fallback">The string to return if no match was found for key.</param>
            <returns>
            The translated string.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions">
            <summary>
            Html helpers form input tags
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.SelectList(System.Web.Mvc.HtmlHelper,System.Object,System.Object[])">
            <summary>
            Creates a select list for usage in a drop down list.
            </summary>
            <param name="html">The object which this method extends</param>
            <param name="selectedValue">The selected value in the select list</param>
            <param name="values">The values of the select list</param>
            <returns>A loaded list of select list items</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.SelectList(System.Web.Mvc.HtmlHelper,System.Object,System.String,System.String,System.Object[])">
            <summary>
            Creates a select list for usage in a drop down list.
            </summary>
            <param name="html">The object which this method extends</param>
            <param name="selectedValue">The selected value in the select list</param>
            <param name="dataValueField">Name of the field used as the value attribute.</param>
            <param name="dataTextField">Name of the field used as the text value.</param>
            <param name="values">The values of the select list</param>
            <returns>A loaded list of select list items</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellButton(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="inputType">Type of the input.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellResetButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellResetButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellResetButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellResetButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellSubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellSubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellSubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellSubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input button of submit type with the appropriate styles.
            To be used when an EPiServer styled button is desired.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellInput(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.String,System.Object)">
            <summary>
            Creates an input with the appropriate styles.
            </summary>
            <param name="html">The HTML.</param>
            <param name="inputType">Type of the input.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellInput(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an input with the appropriate styles.
            </summary>
            <param name="html">The HTML.</param>
            <param name="inputType">Type of the input.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellInput(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input with the appropriate styles.
            </summary>
            <param name="html">The HTML.</param>
            <param name="inputType">Type of the input.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.ShellInput(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ShellInputType,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an input with the appropriate styles.
            </summary>
            <param name="html">The HTML.</param>
            <param name="name">The name.</param>
            <param name="inputType">Type of the input.</param>
            <param name="value">The value.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean)">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <param name="isChecked">Set to <c>true</c> if the checkbox should be checked.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.Object,System.Object)">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <param name="isChecked">Set to <c>true</c> if the checkbox should be checked.</param>
            <param name="htmlAttributes">The HTML attributes for the input.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing the input.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a checkbox with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledCheckBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a checkbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The text of the label text.</param>
            <param name="isChecked">Set to <c>true</c> if the checkbox should be checked.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a checkbox with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="optionLabel">Provides the text for a default empty valued option, if it is not null.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <param name="htmlAttributes">The HTML attributes for the drop-down.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object,System.Object)">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <param name="htmlAttributes">The HTML attributes for the drop-down.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <param name="optionLabel">Provides the text for a default empty valued option, if it is not null.</param>
            <returns>
            An html string representing a drop-down list with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object,System.Object)">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <param name="optionLabel">Provides the text for a default empty valued option, if it is not null.</param>
            <param name="htmlAttributes">The HTML attributes for the drop-down.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a drop-down list with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledDropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a drop-down with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the drop-down.</param>
            <param name="labelText">The label text.</param>
            <param name="selectList">The list of values used to populate the drop-down.</param>
            <param name="optionLabel">Provides the text for a default empty valued option, if it is not null.</param>
            <param name="htmlAttributes">The HTML attributes for the drop-down.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a drop-down list with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Returns a textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The label text.</param>
            <returns>
            An html string representing a textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns a textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <returns>
            An html string representing a textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Returns a textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the checkbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>
            An html string representing a textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <returns>
            An html string representing a textarea with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>
            An html string representing a textarea with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>
            An html string representing a textarea with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <returns>
            An html string representing a textarea with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a textarea with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledTextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a textarea with an associated label.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The HTML attributes for the label.</param>
            <returns>An html string representing a textarea with an associated label.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledPassword(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Returns a password textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the password textbox.</param>
            <param name="labelText">The label text.</param>
            <returns>
            An html string representing a  password textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledPassword(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns a password textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the password textbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <returns>
            An html string representing a  password textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledPassword(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Returns a password textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the password textbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a  password textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledPassword(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a password textbox with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the password textbox.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a  password textbox with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledRadioButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the radiobutton.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <returns>
            An html string representing a radiobutton with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledRadioButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the radiobutton.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="isChecked">Set to <c>true</c> if the radiobutton should be checked.</param>
            <returns>
            An html string representing a radiobutton with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledRadioButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the radiobutton.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a radiobutton with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledRadioButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Boolean,System.Object,System.Object)">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the radiobutton.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="isChecked">Set to <c>true</c> if the radiobutton should be checked.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a radiobutton with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.LabeledRadioButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="name">The name of the radiobutton.</param>
            <param name="labelText">The label text.</param>
            <param name="value">The value.</param>
            <param name="isChecked">Set to <c>true</c> if the radiobutton should be checked.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="labelHtmlAttributes">The label HTML attributes.</param>
            <returns>
            An html string representing a radiobutton with an associated label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="labelText">The label text.</param>
            <param name="inputId">The input id.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>
            An html string representing a label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a radiobutton with an associated label
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="labelText">The label text.</param>
            <param name="inputId">The input id.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns>
            An html string representing a label.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.InputHelperExtensions.GetId(System.Web.Mvc.HtmlHelper)">
            <summary>
            Gets the next unique id.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.Pageable`1">
            <summary>
            A generic pageable list used as a view data model.
            </summary>
            <typeparam name="T">The type of objects that will be contained in the Items collection</typeparam>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pageable`1.Items">
            <summary>
            A list of items.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pageable`1.Pages">
            <summary>
            The <see cref="T:EPiServer.Shell.Web.Mvc.Html.Pager" /> responsible for handling the paging.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.Pager">
            <summary>
            Conveys information about the current page index, and helps iterating
            pages to display in a UI.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.Pager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.Html.Pager"/> class. Default value for PageSize is 10.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.CurrentPageIndex">
            <summary>
            The current page index.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.PageSize">
            <summary>
            The number of items per page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.TotalItemsCount">
            <summary>
            The total number of items in the set.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.SkipCount">
            <summary>
            Calculated value, number of items skipped before the first is relevant.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.TotalPageCount">
            <summary>
            Calculated value, the number of pages for this set of items based on
            number of items and page size.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.Pager.VisiblePages">
            <summary>
            Enumerates relevant pages depending on page size and current page index.
            </summary>
            <returns>En enumeration of pages that should be displayed.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.PagerPosition">
            <summary>
            Used by the <see cref="T:EPiServer.Shell.Web.Mvc.Html.Pager"/> to handle UI pageing. This class is responsible for handling the position of the pager.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.PagerPosition.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Mvc.Html.PagerPosition"/> class.
            </summary>
            <param name="index">The index for this pag.</param>
            <param name="name">The name that will be displayed when rendered.</param>
            <param name="isCurrent">Indicates if this is the currently active page</param>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.PagerPosition.Index">
            <summary>
            The index for this page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.PagerPosition.Name">
            <summary>
            The name that will be displayed when rendered.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.PagerPosition.IsCurrent">
            <summary>
            Indicates if this is the currently active page.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions">
            <summary>
            Client script related html helper extensions
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.ShellScriptResource(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Returns a script tag for a resource relative to the shell root.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="shellRelativeSourcePath">The path to the script resource.</param>
            <returns>A script html tag.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.ShellScriptBase(System.Web.Mvc.HtmlHelper)">
            <summary>
            Returns a script tags used throughout the EPiServer Shell.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <returns>A script html tag.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.ShellInitializationScript(System.Web.Mvc.HtmlHelper)">
            <summary>
            Creates a script element for client side initialization of the shell.
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.ShellAsyncInitializationScript(System.Web.Mvc.HtmlHelper)">
            <summary>
            Creates a script element for client side initialization of the shell.
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.SerializeAsJson(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Serializes an object as json.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="value">The object that should be serialized.</param>
            <returns>A string containing a serialized json object.</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ScriptExtensions.SerializeObject(System.Web.Mvc.HtmlHelper,System.Object,System.String)">
            <summary>
            Serializes the object using the registered serializer for the target content type.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="value">The object that should be serialized.</param>
            <param name="contentType">The type of serializer to use.</param>
            <returns>A string containing the serialized objct</returns>
            <exception cref="T:System.ArgumentException">when no serializer is registered for <paramref name="contentType"/></exception>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.ShellInputType">
            <summary>
            Used to define what input type to use.
            </summary>
            <remarks>
            Used by the ShellInput and ShellButton helper method.
            </remarks>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Button">
            <summary>
            Standard button input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.CheckBox">
            <summary>
            Checkbox type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.File">
            <summary>
            file type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Hidden">
            <summary>
            hidden type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Image">
            <summary>
             image type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Password">
            <summary>
            password type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Radio">
            <summary>
            radiobutton type input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Reset">
            <summary>
            reset button input
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Submit">
            <summary>
            Submit type button
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.Mvc.Html.ShellInputType.Text">
            <summary>
            text type input
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.TagBuilderExtensions.Attr(System.Web.Mvc.TagBuilder,System.String,System.String)">
            <summary>
            Adds an attribute to the tag builder.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.ToolTipElement">
            <summary>
            Conveys information about a row in a tool tip
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.#ctor">
            <summary>
            Constructs an empty tool tip element
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.#ctor(System.String,System.String)">
            <summary>
            Constructs a tool tip with required values
            </summary>
            <param name="label">Used for <see cref="P:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.Label"/></param>
            <param name="value">Used for <see cref="P:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.Value"/></param>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.Label">
            <summary>
            The label portion
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.Value">
            <summary>
            The value portion
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> on the form [label]: [value].
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:EPiServer.Shell.Web.Mvc.Html.ToolTipElement"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Mvc.Html.ToolTipExtensions">
            <summary>
            Html helper extensions associated to shell tool tips
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipExtensions.RenderToolTip(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{EPiServer.Shell.Web.Mvc.Html.ToolTipElement})">
            <summary>
            Renders the html used for tool tips. Use the jquery widget epiToolTip to wire this html to an associated element
            </summary>
            <param name="html">The html helper to put the extension on</param>
            <param name="elements">The set of elements to show in the tool tip</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipExtensions.RenderToolTip(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Mvc.Html.ToolTipElement[])">
            <summary>
            Renders the html used for tool tips. Use the jquery widget epiToolTip to wire this html to an associated element
            </summary>
            <param name="html">The html helper to put the extension on</param>
            <param name="elements">The set of elements to show in the tool tip</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Mvc.Html.ToolTipExtensions.RenderToolTip(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Renders the html used for tool tips. Use the jquery widget epiToolTip to wire this html to an associated element
            </summary>
            <param name="html">The html helper to put the extension on</param>
            <param name="elements">The set of elements to show in the tool tip</param>
        </member>
        <member name="T:EPiServer.Shell.Web.GlobalNavigationMenuType">
            <summary>
            How to present the global navigation menu.
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.GlobalNavigationMenuType.None">
            <summary>
            No menu rendered
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.GlobalNavigationMenuType.Static">
            <summary>
            Menu displayed statically on top
            </summary>
        </member>
        <member name="F:EPiServer.Shell.Web.GlobalNavigationMenuType.PullDown">
            <summary>
            Menu displayed but hidden, accessible via pulldown
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.ICustomGlobalNavigationMenuBehavior">
            <summary>
            Specifies how the global menu should behave.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.ICustomGlobalNavigationMenuBehavior.MenuType">
            <summary>
            Gets the type of the menu.
            </summary>
            <value>
            The type of the menu.
            </value>
        </member>
        <member name="T:EPiServer.Shell.Web.Resources.ClientResourceAggregator">
            <summary>
            Class use to aggregate all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider"/> in the system
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Resources.ClientResourceAggregator.#ctor(EPiServer.Framework.Web.Resources.IClientResourceService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Resources.ClientResourceAggregator"/> class.
            </summary>
            <param name="clientResourceService">The client resource service.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Resources.ClientResourceAggregator.GetClientResources(System.String)">
            <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider"/> in the system.
            </summary>
            <param name="location">Only get resources for this location.</param>
            <returns>All available resources for the specified location</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Resources.ClientResourceAggregator.GetClientResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
            <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider"/> in the system.
            </summary>
            <param name="location">Only get resources for this location.</param>
            <param name="resourceTypes">Only get resources for these types.</param>
            <returns>All available resources for the specified location</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.ModuleRouteCollection">
            <summary>
            A route that composed of sub-routes. The route will defer work to the contained routes
            when the url matches a base path defiend for the route chainer.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Routing.ModuleRouteCollection.RoutePath">
            <summary>
            The base path that constrains routes within this collection. Other paths will be ignored without processing.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.#ctor(System.String)">
            <summary>
            Creates the <see cref="T:EPiServer.Shell.Web.Routing.ModuleRouteCollection"/> instance
            </summary>
            <param name="routePath">The top-level path this route is restricted to</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            Gets route data from contained routes
            </summary>
            <param name="httpContext">The http context</param>
            <returns>A route or null if non was found</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Gets the virtual path for routes within this collection
            </summary>
            <param name="requestContext"></param>
            <param name="values"></param>
            <returns>A path data or null if no matching route</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.Add(System.String,System.Web.Routing.RouteBase)">
            <summary>
            Adds a route and associates it with the module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="route">The route base.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the routes.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ModuleRouteCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.PartialHttpContext">
            <summary>
            Used to pass fake context during partial request execution.
            </summary>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.PartialHttpRequest">
            <summary>
            Used to pass fake context during partial request execution.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.PartialHttpRequest.ModifyUrl(System.String)">
            <summary>
            Modifies request url with the url parameter
            </summary>
            <param name="url">The modifier.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.PartialRequestHelper">
            <summary>
            Class used to process partial requests to subcontrollers
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.PartialRequestHelper.#ctor(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Routing.PartialRequestHelper"/> class.
            </summary>
            <param name="routeValues">A dictionary of route values.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.PartialRequestHelper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Web.Routing.PartialRequestHelper"/> class.
            </summary>
            <param name="routeValues">An object containing the needed route values.</param>
        </member>
        <member name="P:EPiServer.Shell.Web.Routing.PartialRequestHelper.RouteValues">
            <summary>
            Gets the route values for this partial request.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.Routing.PartialRequestHelper.PreferredNamespace">
            <summary>
            The preferred namespace where to look for the controller for this partial request.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.PartialRequestHelper.Invoke(System.Web.Mvc.ControllerContext)">
            <summary>
            Invokes the partial request.
            </summary>
            <param name="context">The controller context for this partial request.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.RenderPartialRequestExtensions">
            <summary>
            Extension methods used to render partial MVC requests.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.RenderPartialRequestExtensions.RenderPartialRequest(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Renders a specific action on a controller
            </summary>
            <param name="html"></param>
            <param name="routeValues"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.RenderPartialRequestExtensions.RenderPartialRequest(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Renders a specific action on a controller
            </summary>
            <param name="html"></param>
            <param name="routeValues"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.RenderPartialRequestExtensions.RenderPartialRequest(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Invokes a partial request that is stored inside the ViewData
            </summary>
            <param name="html"></param>
            <param name="viewDataKey"></param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.RenderPartialRequestExtensions.RenderPartialRequest(System.Web.Mvc.HtmlHelper,EPiServer.Shell.Web.Routing.PartialRequestHelper)">
            <summary>
            Renders the partial request.
            </summary>
            <param name="html">The HTML.</param>
            <param name="partialRequest">The partial request.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.Routing.ShellRoutingModule">
            <summary>
            This class extens <see cref="T:System.Web.Routing.UrlRoutingModule"/> with custom behaviour for the dashboard route.
            The reason is to allow the presence of a folder with the same name as the configured secure folder location.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ShellRoutingModule.PostResolveRequestCache(System.Web.HttpContextBase)">
            <summary>
            Matches the HTTP request to a route, retrieves the handler for that route, and sets the handler as the HTTP handler for the current request.
            </summary>
            <param name="context">Encapsulates all HTTP-specific information about an individual HTTP request.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.Routing.ShellRoutingModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="application">An object that provides access to the methods, properties, and events common to all application objects in an ASP.NET application.</param>
        </member>
        <member name="T:EPiServer.Shell.Web.UI.MasterPageBase">
            <summary>
            A master page base class mimicking <see cref="T:System.Web.Mvc.ViewMasterPage"/>.
            If the master page is used on an <see cref="T:System.Web.Mvc.ViewPage"/> that page is used as context, 
            otherwise the ViewPage context is mocked.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.Ajax">
            <summary>
            Gets the ajax helper from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.Html">
            <summary>
            Gets the html helper from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.Model">
            <summary>
            Gets the model from the view data.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.TempData">
            <summary>
            Gets the temp data from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.Url">
            <summary>
            Gets the Url from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.ViewContext">
            <summary>
            Gets the view context from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.ViewData">
            <summary>
            Gets the view data from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.Writer">
            <summary>
            Gets the html writer from the view page.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.MasterPageBase.ViewPage">
            <summary>
            Gets the view page. If the master page is used on an MVC view page then that page is used, 
            otherwise a mock view page is created.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.MasterPageBase.CreateViewPage">
            <summary>
            Creates a view page mock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Shell.Web.UI.PageExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.UI.Page" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.PageExtensions.ActionUrl(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            Creates an url to an action.
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page" /> to add this method to.</param>
            <param name="moduleName">Name of the module.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="action">The action to execute.</param>
            <returns>The html for a link to the specified action</returns>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.PageExtensions.ActionUrl(System.Web.UI.Page,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an url to an action.
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/> to add this method to.</param>
            <param name="moduleName">Name of the module.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="action">The action to execute.</param>
            <param name="protocol">The protocol that should be used for the url.</param>
            <param name="host">The host that should be used for the url.</param>
            <returns>
            The html for a link to the specified action
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.PageExtensions.ActionUrl(System.Web.UI.Page,System.String,System.String,System.String,System.Uri)">
            <summary>
            Creates an url to an action.
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/> to add this method to.</param>
            <param name="moduleName">Name of the module.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="action">The action to execute.</param>
            <param name="baseUri">The base URL.</param>
            <returns>
            The html for a link to the specified action
            </returns>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.PageExtensions.ActionUrl(System.Web.UI.Page,System.Object)">
            <summary>
            Creates an url to an action.
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page" /> to add this method to.</param>
            <param name="routeValues">The route values needed to identify the route to the action.</param>
            <returns>The html for a link to the specified action</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.UI.UrlHelperExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.Mvc.UrlHelper" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.UrlHelperExtensions.Action(System.Web.Mvc.UrlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Uri)">
            <summary>
            Generates a fully qualified URL for an action method by using the specified action name, controller name, route values and base URL.
            </summary>
            <param name="urlHelper">The URL helper.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">An object that contains the parameters for a route.</param>
            <param name="baseUri">The base URI.</param>
            <returns>The fully qualified URL to an action method.</returns>
        </member>
        <member name="T:EPiServer.Shell.Web.UI.WebControls.ShellMenu">
            <summary>
            Renders the shell menu with containing stylable elements.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.WebControls.ShellMenu.SelectionPath">
            <summary>
            The menu path currently selected in the menu
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.WebControls.ShellMenu.Area">
            <summary>
            The shell area to put in context.
            </summary>
        </member>
        <member name="P:EPiServer.Shell.Web.UI.WebControls.ShellMenu.Async">
            <summary>
            Enable async mode for javascript or not.
            </summary>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.WebControls.ShellMenu.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:EPiServer.Shell.Web.UI.WebControls.ShellMenu.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the shell menu.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
    </members>
</doc>

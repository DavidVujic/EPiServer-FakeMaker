<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Framework</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Framework.AsyncResult">
            <summary>
            Dummy async result which uses in the noop processing, It uses internally 
            </summary>
        </member>
        <member name="M:EPiServer.Framework.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Create and keep yje callback and extra data from async caller
            </summary>
            <param name="cb"></param>
            <param name="extraData"></param>
        </member>
        <member name="P:EPiServer.Framework.AsyncResult.AsyncState">
            <summary>
            The AsyncData
            </summary>
        </member>
        <member name="P:EPiServer.Framework.AsyncResult.CompletedSynchronously">
            <summary>
            Indicate if the operation does Synchronously
            </summary>
        </member>
        <member name="P:EPiServer.Framework.AsyncResult.IsCompleted">
            <summary>
            Indicate if it is competed or nott
            </summary>
        </member>
        <member name="M:EPiServer.Framework.AsyncResult.SetCompleted">
            <summary>
            Calls callback and sets it has been completed
            </summary>
        </member>
        <member name="T:EPiServer.Framework.ContextCache">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <exclude />
        </member>
        <member name="P:EPiServer.Framework.ContextCache.Current">
            <summary>
            Get the current <see cref="T:EPiServer.Framework.ContextCache"/> instance.
            </summary>
            <remarks>
            Avoid whenever possible and inject <see cref="T:EPiServer.Framework.ContextCache"/> in constructor instead.
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.FrameworkInitialization">
            <summary>
            Initializes framework features
            </summary>
        </member>
        <member name="M:EPiServer.Framework.FrameworkInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initialize
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="M:EPiServer.Framework.FrameworkInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Uninitialize
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="T:EPiServer.Framework.IInitializableHttpModule">
            <summary>
            Interface that you can implement to be part of the EPiServer Framework initialization chain with support for HTTP events.
            </summary>
            <remarks>
            You should set the attribute [InitializableModule] on the class implementing this interface, or if
            you want to control dependencies (making sure that other modules are initialized before your module gets called)
            use the attribute [ModuleDependency(typeof(ClassThatIDependOn), ...)].
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.IInitializableHttpModule.InitializeHttpEvents(System.Web.HttpApplication)">
            <summary>
            Initialize any events on <see c="System.Web.HttpApplication" /> instances created by ASP.NET
            </summary>
            <param name="application">The instance to initialize</param>
            <remarks>
            <para>This method may be called either after or before the Initialize-method so make sure you do not have any dependencies between these methods. The beaviour that is guaranteed
            is that your event handlers will not be called before the Initialize-method. If EPiServer is being initialized outside ASP.NET this method will never get called.</para>
            <para>When the ASP.NET runtime initializes it will create many instances of the <see c="System.Web.HttpApplication" /> class so make sure you only add
            logic to initialize events in this method, and not any one-time configuration which should be placed in the Initialize-method.</para>
            <para>Since a <see c="System.Web.HttpApplication" /> can be disposed at any time make sure you never store references to this class since that could create a memory leak.</para>
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.IInitializableModule">
            <summary>
            Interface that you can implement to be part of the EPiServer Framework initialization chain.
            </summary>
            <remarks>
            You should set the attribute [InitializableModule] on the class implementing this interface, or if
            you want to control dependencies (making sure that other modules are initialized before your module gets called)
            use the attribute [ModuleDependency(typeof(ClassThatIDependOn), ...)].
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeadetly for each request reaching the site until the method succeeds.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.IInitializableModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the module into an uninitialized state.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
            <para>
            Any work done by <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)"/> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete"/> should be reversed.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.Initialization.IInitializationEngine">
            <summary>
            Used internally by EPiServer to initialize a set of modules
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.HostType">
            <summary>
            The <see cref="P:EPiServer.Framework.Initialization.IInitializationEngine.HostType"/> of the current application
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.InitializationState">
            <summary>
            Gets or sets the state of the initialization.
            </summary>
            <value>The state of the initialization.</value>
        </member>
        <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.Modules">
            <summary>
            The list of modules that should be initialized
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Initialization.IInitializationEngine.InitComplete">
            <summary>
            InitComplete is raised when initialization is complete.
            </summary>
            <remarks>
            Initialization is complete when all intializable modules have executed successfully (without throwing
            any exception).
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Configure">
            <summary>
            Calls all <see cref="!:IConfigurableModule"/> instances.
            </summary>
            <remarks>Calling this method is optional, it must be called before <see cref="M:EPiServer.Framework.Initialization.IInitializationEngine.Initialize"/></remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Initialize">
            <summary>
            Initializes all initializable modules.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Uninitialize">
            <summary>
            Un-initialize all initializable modules.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.AssemblyExtension">
            <summary>
            Extension methods to simplify working with assemblies
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.NormalizedName(System.Reflection.Assembly)">
            <summary>
            Normalizes the assembly name.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A normalized version of the assembly display name.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsScanAllowed(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is allowed for type/attribute scanning.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>
              <c>true</c> if scan is allowed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Any dynamic or .NET Framework assembly will be excluded, as well as any assembly that contains the [PreventAssemblyScan] attribute.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsNetFrameworkAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is a .NET Framework assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>
              <c>true</c> if it is a .NET Framework assembly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsDynamicAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is a dynamically generated assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>
              <c>true</c> if it is a dynamic assembly; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This extension method checks more than just the IsDynamic property, which does not cover all relevant cases
            of dynamic assemblies.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsEPiServerSignedAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is signed by EPiServer. This method is used to determine if an assembly is a part of EPiServer products family.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
              <c>true</c> if the specified assembly is signed by EPiServer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsSameAssemblyName(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Compares assembly names based on name and public key token.
            Returns true if name and public key token of this assembly are equal.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="assemblyName2">The assembly name for comparison.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Initialization.AssemblyList">
            <summary>
            Provides a list of assemblies that should be used when scanning for plugins / modules etc.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList"/> class.
            </summary>
            <remarks>
            Initializes the AllowedAssemblies with all assemblies in the app domain, except .NET Framework
            assemblies and assemblies with the PreventAssemblyScan attribute.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList"/> class.
            </summary>
            <param name="forceBinFolderScan">if set to <c>true</c> the bin folder will be scanned for loading assemblies.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList"/> class.
            </summary>
            <param name="forceBinFolderScan">if set to <c>true</c> the bin and probing folders will be scanned for loading assemblies.</param>
            <param name="relativeProbingPath">The relative probing path where framework should scan assemblies.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor(EPiServer.Framework.Configuration.AssemblyElementCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList"/> class.
            </summary>
            <param name="assemblyConfiguration">The assembly configuration.</param>
            <remarks>
            Does the same thing as the default constructor, but also filters the list of allowed assemblies
            based on the &lt;scanAssembly&gt; configuration section.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Initialization.AssemblyList.AllowedAssemblies">
            <summary>
            Gets or sets the allowed assemblies.
            </summary>
            <value>The allowed assemblies.</value>
            <remarks>
            <para>
            See the constructors for details on how the AllowedAssemblies gets populated.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.AllScannableAssemblies(System.Boolean,System.String)">
            <summary>
            Loads and returns the list of alls the scannable assemblies.
            </summary>
            <param name="forceBinFolderScan">if set to <c>true</c> then bin and probing folders will be scanned for loading assemblies.</param>
            <param name="relativeProbingPath">The relative probing path.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.AssemblyList.LoadAllAssembliesInFolder(System.String)">
            <summary>
            Loads all assemblies in specified folder.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="T:EPiServer.Framework.Initialization.HostType">
            <summary>
            The type of host application that is being initialized
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.InitializationEngine">
            <summary>
            Used internally by EPiServer to initialize a set of modules
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule},EPiServer.Framework.Initialization.HostType)">
            <summary>
            Constructor used for testing and outside-the-web purposes.
            </summary>
            <param name="modules">The list of modules to initialize using this engine.</param>
            <param name="hostType">The type of host this engine initializes.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule},EPiServer.Framework.Initialization.HostType,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Constructor used for testing and outside-the-web purposes.
            </summary>
            <param name="modules">The list of modules to initialize using this engine.</param>
            <param name="hostType">The type of host this engine initializes.</param>
            <param name="assemblies">A list of assemblies that can be scanned as part of initialization</param>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Assemblies">
            <summary>
            A list of assemblies that should participate in the initialization
            </summary>
            <remarks>
            <para>This list will be the base for different scanning operations done within the initialization such
            as plug-in systems and services configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute"/>, it is also
            used if <see cref="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies"/> is called to automatically populate the list of assemblies.</para>
            <para>By default when EPiServer initializes this will be set to a list of allowed assemblies configured
            in <see cref="P:EPiServer.Framework.Initialization.InitializationModule.Assemblies"/></para>
            
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Modules">
            <summary>
            The list of modules that should be initialized
            </summary>
            <remarks>You can automatically populate this list by calling <see cref="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies"/></remarks>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Container">
            <summary>
            The default inversion of control container used by episerver modules.
            </summary>
            <remarks>To configure the IoC container use <see cref="T:EPiServer.ServiceLocation.IConfigurableModule"/> interface on the initialization module and do configuration in the ConfigureContainer method.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Services">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Information of an mapped identity.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Locate">
            <summary>
            Gets the object used to resolve services part of the public API.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.GetDependencySortedModules">
            <summary>
            Gets the list of initialization modules sorted by dependencies.
            </summary>
            <returns>A list of IInitializableModule.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies">
            <summary>
            Scans the list of assemblies for initialization modules
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Initialize">
            <summary>
            Initializes all initializable modules.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Initialize(EPiServer.Framework.Initialization.HostType)">
            <summary>
            Initializes all initializable modules.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Configure">
            <summary>
            Calls all <see cref="T:EPiServer.ServiceLocation.IConfigurableModule"/> instances.
            </summary>
            <param name="hostType"></param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.ConfigureContainer(EPiServer.Framework.Initialization.HostType)">
            <summary>
            Does a first pass to configure the IoC container so services are configured before we initialize
            </summary>
            <param name="hostType">Type of the host.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.InitializeModules">
            <summary>
            Initializes the modules.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Uninitialize">
            <summary>
            Un-initialize all initializable modules.
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete">
            <summary>
            InitComplete is raised when initialization is complete.
            </summary>
            <remarks>
            Initialization is complete when all intializable modules have executed successfully (without throwing
            any exception).
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.OnInitComplete">
            <summary>
            Called when initialization is complete to raise the InitComplete event.
            </summary>
            <remarks>
            The invocation of the InitComplete event is a bit special. In order to support the same kind of "retry on
            exception" semantics as for the <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> method, we simply remove the
            delegate from the event handler once it has executed successfully (i.e. without throwing an exception).
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.InitializationState">
            <summary>
            Gets or sets the state of the initialization.
            </summary>
            <value>The state of the initialization.</value>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationEngine.IsInitialized(EPiServer.Framework.IInitializableModule)">
            <summary>
            Determines whether the specified module is initialized.
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is initialized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationEngine.HostType">
            <summary>
            The <see cref="P:EPiServer.Framework.Initialization.InitializationEngine.HostType"/> of the current application
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.InitializationEngineTypeScanner">
            <summary>
            Type scanning logic for <see cref="T:EPiServer.Framework.Initialization.InitializationEngine"/>
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.InitializationException">
            <summary>
            Thrown by the initialization engine and contains references to one or more initialization modules causing the exception
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationException.ModuleTypes">
            <summary>
            List of initialization modules
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.InitializationExceptionHelper">
            <summary>
            Helper class to throw developer friendly exceptions during initialization
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationExceptionHelper.ThrowIfAddonSystemIsOld(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            In 7.5 the add-on system itself was an add-on and customers will not get the updated version unless we force them to install via NuGet
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationExceptionHelper.ThrowIfMirroringSystemIsOld(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Mirroring have to be manually upgraded, avoid that people are running using the old version.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationExceptionHelper.ThrowIfLegacyDllIsPresent(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            The DLLs removed in 9 are  left behind if you do a install rather than an upgrade of the NuGet packages. Make a friendly error.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationExceptionHelper.ThrowFriendlyAddonException(System.Exception,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Wrap exception to present information on how to disable add-ons or convert to NuGet add-ons
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationExceptionHelper.ThrowFriendlyTypeScannerException(System.Collections.Generic.IEnumerable{EPiServer.Framework.TypeScanner.TypeScannerReflectionException},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Rethrow reflection errors in a more readable approach with support on how to disable add-ons
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.InitializationModule.FrameworkInitialization(EPiServer.Framework.Initialization.HostType)">
            <summary>
            Called to initialize the application.
            </summary>
            <remarks>
            If <see cref="!:FrameworkConfiguration(HostType)"/> has not been called explicitly a configuration step will be called before initialization.
            </remarks>
            <param name="hostType">The type of host for the application</param>
        </member>
        <member name="P:EPiServer.Framework.Initialization.InitializationModule.Engine">
            <summary>
            Exposed for (shady) unit test reasons
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.ShutdownTracker">
            <summary>
            Purpose of this class is just to log shutdown reason right now, but could be expanded to do more.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.TimeMeters">
            <summary>
            hold stopowatch for each registered key in memory, 
            The class is not thread safe. It is used only internally
            to see result from time meters you can navigate to ~/siteurl/shell/Debug/ShowTimeMeters with administrator permission has access to the result
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.TimeMeters"/> class.
            </summary>
            <param name="owner">The t.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.Start(System.String)">
            <summary>
            Stops measuring elapsed time for an interval for the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.Stop(System.String)">
            <summary>
            Stops measuring elapsed time for an interval for the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.Restart(System.String)">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts 
            measuring elapsed time for the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.ToString(System.String)">
            <summary>
            Returns elapsed time in friendly format for the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            Elapsed time in friendly format for the key.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.Log">
            <summary>
            Logs elapsed time in friendly format for all registered keys.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.ToString">
            <summary>
             Returns elapsed time in friendly format for all registered keys.
            </summary>
            <returns>
            Returns elapsed time in friendly format for all registered keys.
            </returns>
        </member>
        <member name="P:EPiServer.Framework.Initialization.TimeMeters.Counters">
            <summary>
            Gets the counters.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.TimeMeters.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.Register(System.Type)">
            <summary>
            Registers a timeMeter for the specified type.
            </summary>
            <param name="owner">The requested type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.TimeMeters.GetAllRegistered">
            <summary>
            Gets all registered TimeMeters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Framework.Initialization.TimeMeters.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.Initialization.TimeMeters"/> is enabled and 
            the TimeMeters can be registered as global in the system
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Framework.Initialization.ApplicationDomainInitializer">
            <summary>
            Initializes current application domain.
            </summary>
            <remarks>
            Since we have a subscription to the AppDomain.CurrentDomain.AssemblyResolve event this class will never be garbage collected.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Initialization.ApplicationDomainInitializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.ApplicationDomainInitializer"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.ApplicationDomainInitializer.Instance">
            <summary>
            A convenient accessor to the singleton instance.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.ApplicationDomainInitializer.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.ApplicationDomainInitializer"/> class.
            </summary>
            <param name="relativeProbingPath">The relative probing path.</param>
            <param name="applicationBase">The application base path.</param>
            <param name="shadowCopyDirectories">The shadow copy directories.</param>
            <param name="runtimeProbingPaths">The runtime probing paths.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.ApplicationDomainInitializer.SetupAppDomain(EPiServer.Framework.Initialization.HostType)">
            <summary>
            Setups the current app domain.
            Verifies probing path configuration in Framework and runtime.
            Adds Framework probing path to ShadowCopyDirectory of the current AppDomain
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Initialization.ApplicationDomainInitializer.PreApplicationStart">
            <summary>
            This method should only be called by ASP.NET via the <see cref="T:System.Web.PreApplicationStartMethodAttribute"/> attribute defined in EPiServer.Framework
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Initialization.SiteMappingConfiguration">
            <summary>
            Handles mapping from host names on incoming requests to the correct site id.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Initialization.SiteMappingConfiguration.WildcardHostName">
            <summary>
            The host name that is used for the fallback SiteId
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Initialization.SiteMappingConfiguration.WildcardSiteId">
            <summary>
            The SiteId reported in case of missing config
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Initialization.SiteMappingConfiguration.Instance">
            <summary>
            Gets or sets the singleton instance of the ISiteMapping implementation.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:EPiServer.Framework.Initialization.SiteMappingConfiguration.CurrentHostNameResolver">
            <summary>
            Gets or sets the resolver used to resolve the current executing hostname
            </summary>
            <value>The current host name resolver.</value>
        </member>
        <member name="P:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteId">
            <summary>
            Gets or sets the site id.
            </summary>
            <value>The site id.</value>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteIdForHost(System.String)">
            <summary>
            Gets the SiteId that corresponds to host.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns>The site id.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteIdForDefinedHost(System.String)">
            <summary>
            Gets the SiteId that corresponds to host.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns>The site id or null if the host name does not exist.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.LanguageForHost(System.String)">
            <summary>
            Gets the language to use for host.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns>The language name.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.HostToLanguageMapForSite(System.String)">
            <summary>
            Gets a dictionary with mappings from host name to language that are valid for the given site.
            </summary>
            <param name="siteId">The site id.</param>
            <returns>A dictionary with the host name as the key and the language as the value. If language is not defined, then value is null.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteIdFromRequest">
            <summary>
            Gets the Site ID for the site that should service the current HTTP request.
            </summary>
            <returns>The Site ID if we have a valid HttpContex; otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.VerifySiteId">
            <summary>
            Verifies that the current Site ID matches the host name as present in the current request.
            </summary>
            <exception cref="T:ConfigurationErrorsException">Thrown if there is a mismatch between expected and actual site mapping</exception>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.InitializeFromConfig(EPiServer.Framework.Configuration.SiteHostsCollection)">
            <summary>
            Initializes the instance from config data
            </summary>
            <param name="siteHosts">The site hosts.</param>
        </member>
        <member name="M:EPiServer.Framework.Initialization.SiteMappingConfiguration.AddSiteHostMapping(System.String,System.String,System.String)">
            <summary>
            Adds a new host name to site id mapping in the in-memory lookup
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="siteId">The site id.</param>
            <param name="language">The language. Can be null if no language defined.</param>
        </member>
        <member name="T:EPiServer.Framework.InitializableModuleAttribute">
            <summary>
            Used to decorate a class that should be called as part of the initialization process
            </summary>
            <remarks>The class also has to implement the interface <see cref="T:EPiServer.Framework.IInitializableModule"/></remarks>
        </member>
        <member name="M:EPiServer.Framework.InitializableModuleAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.InitializableModuleAttribute"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.InitializationState">
            <summary>
            The various states for the initialization process
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.PreInitialize">
            <summary>
            Before initialization has started.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.Initializing">
            <summary>
            Executing then list of initializable modules.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.InitializeFailed">
            <summary>
            Exception was thrown by one of the initialization modules.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.InitializeDelayed">
            <summary>
            One of the initialization modules requested the processing to delay until a later point in time.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.InitializeComplete">
            <summary>
            The InitComplete event is in progress.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.WaitingBeginRequest">
            <summary>
            The InitComplete event has finished processing and is now waiting for the first BeginRequest event
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.Initialized">
            <summary>
            All initialization processing has completed.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.Uninitializing">
            <summary>
            Uninitializing the list of initializable modules
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.UninitializeFailed">
            <summary>
            Exception was thrown by one of the initialization modules during uninitialization.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.InitializationState.Uninitialized">
            <summary>
            Uninitialization complete.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.ISortable">
            <summary>
            Used to be able to sort items of a type implementing the interface.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.ISortable.SortOrder">
            <summary>
            Used to sort items that implements this interface.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.SortableComparer">
            <summary>
            Used to compare sort two instances that implements <see cref="T:EPiServer.Framework.ISortable"/>. 
            </summary>
        </member>
        <member name="M:EPiServer.Framework.SortableComparer.Compare(EPiServer.Framework.ISortable,EPiServer.Framework.ISortable)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.ModuleDependencyAttribute">
            <summary>
            Attribute to define that an <see cref="T:IInitializableModule" /> depends on another module to be initialized first.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.ModuleDependencyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ModuleDependencyAttribute"/> class.
            </summary>
            <param name="dependency">The type that you are depending on.</param>
        </member>
        <member name="M:EPiServer.Framework.ModuleDependencyAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ModuleDependencyAttribute"/> class.
            </summary>
            <param name="dependencies">The types that you are depending on.</param>
        </member>
        <member name="P:EPiServer.Framework.ModuleDependencyAttribute.Dependencies">
            <summary>
            Gets the dependencies defined by this attribute.
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="T:EPiServer.Framework.PreventAssemblyScanAttribute">
            <summary>
            Attribute to prevent using the assembly in plugin / module / composition scenarios.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.PreventAssemblyScanAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.PreventAssemblyScanAttribute"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.ITimeProvider">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <exclude />
        </member>
        <member name="P:EPiServer.Framework.ITimeProvider.RequestTime">
            <summary>
            Gets the time of the current request.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.ITimeProvider.UtcNow">
            <summary>
            Gets the current time in universal format.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.ITimeProvider.Now">
            <summary>
            Gets the current local time.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.TimeProvider">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <exclude />
        </member>
        <member name="P:EPiServer.Framework.TimeProvider.Current">
            <summary>
            Get the current <see cref="T:EPiServer.Framework.ITimeProvider"/> instance.
            </summary>
            <remarks>
            Avoid whenever possible and inject <see cref="T:EPiServer.Framework.ITimeProvider"/> in constructor instead.
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.UniqueNameGenerator">
            <summary>
            Used to generate unique names for items, for instance when copying an item.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateUniqueName(System.String,System.String,System.Int32,System.Func{System.String,System.Boolean})">
            <summary>
            Generates an unique name of an item.
            </summary>
            <param name="intendedName">The intended name.</param>
            <param name="suffixPattern">The pattern used to generate an unique suffix, in which {0} is preserved for the counter</param>
            <param name="startCounter">Start value of the counter</param>
            <param name="nameExists">The name exists test function</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateUniqueName(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Generates an unique name of an item.
            </summary>
            <param name="intendedName">The intended name.</param>
            <param name="nameExists">The name exists test function</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateCopyName(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Generates a copy name of an item.
            </summary>
            <param name="originalName">The original name</param>
            <param name="nameExists">The name exists test function</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Validator">
            <summary>
            Contains validation methods
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Validator.DefaultEmailRegexString">
            <summary>
            The default string used for validation of email adresses.
            </summary>
            <remarks>The difference between this and <see cref="P:EPiServer.Framework.Validator.EmailRegexString"/> is that the later can be changed during the lifetime of the application.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Validator.EmailRegexString">
            <summary>
            Gets or sets the email regex string that is used validating email addresses in EPiServer products.
            </summary>
            <value>The email regex string that is used validating email addresses in EPiServer products.</value>
            <remarks>Note that the regex should handle casing since case sensivity is not supported by the RegularExpressionValidator control.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Validator.EmailRegex">
            <summary>
            Gets the email regex that is used for EPiServer products.
            </summary>
            <value>The email regex that is used for EPiServer products.</value>
            <remarks>If you want to change the regular expression used then set the <see cref="P:EPiServer.Framework.Validator.EmailRegexString"/> to your own regex.</remarks>
        </member>
        <member name="F:EPiServer.Framework.Validator.DefaultMultipleEmailRegexString">
            <summary>
            The default string used for validation of multiple email adresseses.
            </summary>
            <remarks>The difference between this and <see cref="P:EPiServer.Framework.Validator.MultipleEmailRegexString"/> is that the later can be changed during the lifetime of the application.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Validator.MultipleEmailRegexString">
            <summary>
            Gets or sets the email regex string that is used validating multiple email addresses in EPiServer products.
            </summary>
            <value>The email regex string that is used validating multiple email addresses in EPiServer products.</value>
            <remarks>Note that the regex should handle casing since case sensivity is not supported by the RegularExpressionValidator control.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Validator.MultipleEmailRegex">
            <summary>
            Gets the regular expression for multiple email addresses that is used for EPiServer products.
            </summary>
            <value>The email regex that is used to validate multiple email addresses for EPiServer products.</value>
            <remarks>If you want to change the regular expression used then set the <see cref="P:EPiServer.Framework.Validator.MultipleEmailRegexString"/> to your own regex.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Validator.ThrowIfNull(System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <see paramref="value"/> is <see langword="null"/>
            </summary>
            <param name="name">The name of the argument</param>
            <param name="value">The value to check</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null</exception>
        </member>
        <member name="M:EPiServer.Framework.Validator.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <see paramref="value"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>
            </summary>
            <param name="name">The name of the argument</param>
            <param name="value">The value to check</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null or empty string</exception>
        </member>
        <member name="M:EPiServer.Framework.Validator.ThrowIfContainsSqlInjectionChars(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <see paramref="value"/> contains potential SQL injection code
            </summary>
            <param name="name">The name of the argument</param>
            <param name="value">The value to check</param>
            <exception cref="T:System.ArgumentException">Thrown if the value contains potential SQL injection code</exception>
        </member>
        <member name="M:EPiServer.Framework.Validator.ThrowIfInvalidLength(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <see paramref="value"/> has a length shorter than <see paramref="minLength"/> or longer than <see paramref="maxLength"/>
            </summary>
            <param name="name">The name of the argument</param>
            <param name="value">The value to check</param>
            <param name="minLength">The minimum length the string can be</param>
            <param name="maxLength">The maximum length the string can be</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null or empty string</exception>
            <exception cref="T:System.ArgumentException">If the length requirements are not met</exception>
        </member>
        <member name="T:EPiServer.Framework.Blobs.Blob">
            <summary>
            Represents a binary large object
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.Blob"/> class.
            </summary>
            <param name="id">Resource reference</param>
        </member>
        <member name="P:EPiServer.Framework.Blobs.Blob.ID">
            <summary>
            The identifier of the blob
            </summary>
            <remarks>Required identifier that must contain 1 to 100 characters that are unique and valid as file names, no whitespace allowed</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.OpenRead">
            <summary>
            Open blob for reading
            </summary>
            <returns>A readable stream</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.OpenWrite">
            <summary>
            Open blob for writing
            </summary>
            <returns>A writable stream</returns>
            <remarks>This method normally means that the stream is cached in-memory or on disk before piped into storage, prefer to use the Write-method and pass in the stream instead.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.Write(System.IO.Stream)">
            <summary>
            Write stream directly to blob (prefered method for writing)
            </summary>
            <param name="data">The stream</param>
            <remarks>The stream must be set to the correct position before calling this method</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.NewBlobIdentifier(System.Uri,System.String)">
            <summary>
            Convert a GUID to an identifier that may end up on URL's
            </summary>
            <param name="container">Container identifier</param>
            <param name="extension">The extension for the file</param>
            <returns>A string generated based on a GUID</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.Guid)">
            <summary>
            Get a container identifier based on a guid and the default provider
            </summary>
            <param name="container">The container ID</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.String,System.Guid)">
            <summary>
            Get a container identifier based on a guid and a custom provider
            </summary>
            <param name="provider">The provider name</param>
            <param name="container">The container ID</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.Uri)">
            <summary>
            Extract the container identifier from an existing ID
            </summary>
            <param name="id">The ID to either a container or an blob</param>
            <returns>A new identifier only for the blob, no validation is done in this method.</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.ValidateIdentifier(System.Uri,System.Nullable{System.Boolean})">
            <summary>
            Validates a blob identifier (Uri), optionally checking for existance of a file
            </summary>
            <param name="id">The blob identifier</param>
            <param name="testForFile">Check if the identifier has an file</param>
            <remarks>A blob identifier is expected to be in the form of "epi.fx.blob://[container]/[filename]"</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.IsContainerIdentifier(System.Uri)">
            <summary>
            Determines whether the provided identifier is a valid container identifier, i.e. not a file identifier or an invalid identifier.
            </summary>
            <param name="id">The blob identifier.</param>
            <returns><c>True</c> if the identifier is a valid container identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.IsFileIdentifier(System.Uri)">
            <summary>
            Determines whether the provided identifier is a valid file identifier, i.e. not a container identifier or an invalid identifier.
            </summary>
            <param name="id">The blob identifier.</param>
            <returns><c>True</c> if the identifier is a valid file identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.Blob.IsValidIdentifier(System.Uri)">
            <summary>
            Determines whether the specified identifier is a valid blob container or file identifier.
            </summary>
            <param name="id">The blob identifier.</param>
            <returns><c>True</c> if the identifier is a valid identifier; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Framework.Blobs.BlobConverter">
            <summary>
            Type converter class for <see cref="T:EPiServer.Framework.Blobs.Blob"/> that handles convertion to and from strings.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.BlobConverter"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.#ctor(EPiServer.Framework.Blobs.BlobFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.BlobConverter"/> class.
            </summary>
            <param name="blobFactory">The BLOB factory.</param>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Blobs.BlobFactory">
            <summary>
            An factory class for working with binary large objects that can be handled by any registered provider
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.#ctor(System.String,System.Collections.Generic.IEnumerable{EPiServer.Framework.Blobs.BlobProvider})">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Framework.Blobs.BlobFactory"/>
            </summary>
            <param name="defaultProvider">The default provider</param>
            <param name="providers">The list of supported providers</param>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.Initialize(System.String,System.Collections.Generic.IEnumerable{EPiServer.Framework.Blobs.BlobProvider})">
            <summary>
            Initialize the <see cref="T:EPiServer.Framework.Blobs.BlobFactory"/>
            </summary>
            <param name="defaultProvider">The default provider</param>
            <param name="providers">The list of supported providers</param>
        </member>
        <member name="P:EPiServer.Framework.Blobs.BlobFactory.DefaultProvider">
            <summary>
            The default provider
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.CreateBlob(System.Uri,System.String)">
            <summary>
            Get a reference to a blob
            </summary>
            <param name="id">The identifier of the container</param>
            <param name="extension">The extension (such as ".png")</param>
            <returns>A reference to a blob</returns>
            <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.GetBlob(System.Uri)">
            <summary>
            Get a reference to a blob
            </summary>
            <param name="id">The identifier</param>
            <returns>A reference to a blob</returns>
            <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.Delete(System.Uri)">
            <summary>
            Delete a blob or a container
            </summary>
            <param name="id">The identifier of a blob or a blob container</param>
            <remarks>The Host part of the identifier is the container and the path is the file/blob that is being deleted. If the file is missing it is assumed that the container is being deleted.</remarks>
        </member>
        <member name="P:EPiServer.Framework.Blobs.BlobFactory.Instance">
            <summary>
            The singleton instance of <see cref="T:EPiServer.Framework.Blobs.BlobFactory"/> (redirects to ServiceLocator.Current)
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.GetProvider(System.Uri)">
            <summary>
            Get the provider for a blob authority
            </summary>
            <param name="id">The blob identifier</param>
            <returns>A blob provider</returns>
            <exception cref="T:System.ArgumentException">Thrown if no matching provider was found</exception>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.RegisterProvider(EPiServer.Framework.Blobs.BlobProvider)">
            <summary>
            Register a blob provider
            </summary>
            <param name="provider">The provider to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown when provider or its name is null or empty</exception>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobFactory.UnregisterProvider(System.String)">
            <summary>
            Unregister a blob provider
            </summary>
            <param name="name">The name of the provider (also used as authority in blob ID)</param>
            <returns>Returns <c>true</c> if the provider was found and removed</returns>
            <remarks>Provider names are not case sensitive</remarks>
        </member>
        <member name="T:EPiServer.Framework.Blobs.BlobProvider">
            <summary>
            An abstract provider for binary large objects
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobProvider.CreateBlob(System.Uri,System.String)">
            <summary>
            Create a reference to a new blob
            </summary>
            <param name="id">The identifier of the container</param>
            <param name="extension">The extention (such as .png)</param>
            <returns>A reference to a blob</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobProvider.GetBlob(System.Uri)">
            <summary>
            Get a reference to a blob
            </summary>
            <param name="id">The identifier</param>
            <returns>A reference to a blob</returns>
            <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobProvider.Delete(System.Uri)">
            <summary>
            Delete a blob or a container
            </summary>
            <param name="id">The identifier of a blob or a blob container</param>
            <remarks>The Host part of the identifier is the container and the path is the file/blob that is being deleted. If the file is missing it is assumed that the container is being deleted.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Blobs.BlobProvider.InitializeAsync">
            <summary>
            Override this method if the provider has some time consuming initialization that can be done parallell with other initalization modules.
            </summary>
            <remarks>
            This method will be called during <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)"/> and then in 
            <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete"/> it will wait for the ongoing task to complete.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Blobs.FileBlob">
            <summary>
            Binary large object stored as file on disk
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlob.#ctor(System.Uri,System.String)">
            <summary>
            Create new FileBlob
            </summary>
            <param name="id">the id of blob</param>
            <param name="filePath">The file path</param>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlob.OpenRead">
            <summary>
            Open filestream for reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlob.OpenWrite">
            <summary>
            Open stream for writing
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlob.Write(System.IO.Stream)">
            <summary>
            Write stream directly to filestream
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:EPiServer.Framework.Blobs.FileBlob.FilePath">
            <summary>
            Path to file
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Blobs.FileBlobProvider">
            <summary>
            A default implementation used when nothing has been configured ()
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.#ctor">
            <summary>
            Create a new <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider"/> and sets the repository path to the [appDataPath]\blobs directory.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider"/> with a specific repository path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize the <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider"/>
            </summary>
            <param name="name">Name of the provider</param>
            <param name="config">provider settings</param>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.GetBlob(System.Uri)">
            <summary>
            Get a reference to a blob
            </summary>
            <param name="id">The identifier</param>
            <returns>A reference to a blob</returns>
        </member>
        <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Delete(System.Uri)">
            <summary>
            Delete a blob
            </summary>
            <param name="id">The identifier</param>
        </member>
        <member name="P:EPiServer.Framework.Blobs.FileBlobProvider.Path">
            <summary>
            Path to blob repository
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Blobs.NullBlobProvider">
            <summary>
            A default implementation used when nothing has been configured (for testing purposes)
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Blobs.TrackableStream">
            <summary>
            A stream that can wrap any stream and add trackable events useful for implementing blob providers
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Blobs.TrackableStream.Closing">
            <summary>
            Called before the stream is closed
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Blobs.TrackableStream.Closed">
            <summary>
            Called after the stream is closed
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Cache.CacheTimeoutType">
            <summary>
            Types of cache timeout handling.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Sliding">
            <summary>
            Sliding timeout, will update the remaining time for each access.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Absolute">
            <summary>
            Absolute expiration time. Once time is up, the item will expire.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Undefined">
            <summary>
            No time limit defined.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Cache.CacheEvictionPolicy">
            <summary>
            Contains the different cache evicion policies that can be assigned for an item in IObjectInstanceCache.
            </summary>
            <remarks>
            Once an instance of CacheEvictionPolicy has been created, the instance is immutable. This is done to allow
            for re-using the same CacheEvictionPolicy instance multiple times when you have identical cache policy
            requirements for multiple cache insertions.
            </remarks>
        </member>
        <member name="F:EPiServer.Framework.Cache.CacheEvictionPolicy.Empty">
            <summary>
            The empty CacheEvictionPolicy.
            </summary>
            <remarks>
            No special expiration policies have been defined.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy"/> class.
            </summary>
            <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy"/> class.
            </summary>
            <param name="expiration">The expiration time span.</param>
            <param name="timeoutType">Type of cache timeout.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy"/> class.
            </summary>
            <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
            <param name="expiration">The expiration time span.</param>
            <param name="timeoutType">Type of cache timeout.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy"/> class.
            </summary>
            <param name="files">The files that the item depends upon.</param>
            <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
            <param name="expiration">The expiration time span.</param>
            <param name="timeoutType">Type of cache timeout.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
            <param name="files">The files that the item depends upon.</param>
            <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
            <param name="masterKeys">The master keys that we depend upon.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
            <param name="files">The files that the item depends upon.</param>
            <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
            <param name="masterKeys">The master keys that we depend upon.</param>
            <param name="expiration">The expiration time span.</param>
            <param name="timeoutType">Type of cache timeout.</param>
        </member>
        <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.CacheKeys">
            <summary>
            Gets the cache dependency keys.
            </summary>
            <value>
            The cache keys.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Files">
            <summary>
            Gets the file dependencies.
            </summary>
            <value>
            The files.
            </value>
            <remarks>
            The strings should be fully qualified local file system paths to the dependent files.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.MasterKeys">
            <summary>
            Gets the master keys.
            </summary>
            <value>
            The master keys.
            </value>
            <remarks>
            <para>
            Master keys are used as markers to set up common dependencies without having to create the cache entries first.
            If you set up a master key dependency, there is no need for the corresponding entry to exist before adding 
            something that depends on the master key.
            </para>
            <para>
            The concept of master keys could be regarded as similar to the cache region concept, but using master keys
            allows you to have more than one, where cache regions is restricted to one per cached item - you can only 
            place the item in one region.
            </para>
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Expiration">
            <summary>
            Gets the expiration time span.
            </summary>
            <value>
            The expiration.
            </value>
            <remarks>
            If TimeoutType is set to Absolute, this is how long the item will remain in the cache before it is 
            considered invalid. If TimeoutType is set to Sliding, then this is how long the item will be considered
            valid after the latest access. If TimeoutType is set to Undefined, this value is ignored.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.TimeoutType">
            <summary>
            Gets the type of cache timeout.
            </summary>
            <value>
            The type of the timeout.
            </value>
            <remarks>See <see cref="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Expiration"/> for more information.</remarks>
        </member>
        <member name="T:EPiServer.Framework.Cache.HttpRuntimeCache">
            <summary>
            Default implementation of IObjectInstanceCache.
            </summary>
            <remarks>
            Uses HttpRuntime.Cache as the underlying cache mechanism.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.HttpRuntimeCache"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
            <summary>
            Inserts the value into the cache with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value to cache.</param>
            <param name="evictionPolicy">The cache eviction policy.</param>
            <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Remove(System.String)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Get(System.String)">
            <summary>
            Gets the specified object.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The object associated with the key, if it exists. Otherwise returns null.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.ReadThrough``1(System.String,System.Func{``0},System.Func{EPiServer.Framework.Cache.CacheEvictionPolicy})">
            <summary>
            Read-through cache handling.
            </summary>
            <typeparam name="T">Type of the value to read.</typeparam>
            <param name="key">The key.</param>
            <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
            <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved. It can be null in which case a default policy is used.</param>
            <returns>
            The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Cache.IObjectInstanceCache">
            <summary>
            An interface for local, fast caching of object instances.
            </summary>
            <remarks>
            <para>
            One assumption is that the objects don't need to be serializable - they will be live object instances.
            </para>
            <para>
            Another assumption is that the items in the cache may be purged at any point-in-time. When you set expiration
            time the system will only guarantee that the cached item will not be available after the expiration time, but
            it may be removed before that time depending on the underlying cache implementation.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
            <summary>
            Inserts the value into the cache with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value to cache.</param>
            <param name="evictionPolicy">The cache eviction policy.</param>
            <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Get(System.String)">
            <summary>
            Gets the specified object.
            </summary>
            <param name="key">The key.</param>
            <returns>The object associated with the key, if it exists. Otherwise returns null.</returns>
        </member>
        <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Remove(System.String)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.ReadThrough``1(System.String,System.Func{``0},System.Func{EPiServer.Framework.Cache.CacheEvictionPolicy})">
            <summary>
            Read-through cache handling.
            </summary>
            <typeparam name="T">Type of the value to read.</typeparam>
            <param name="key">The key.</param>
            <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
            <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved. It can be null in which case a default policy is used.</param>
            <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
        </member>
        <member name="T:EPiServer.Framework.Cache.IRequestCache">
            <summary>
            Signature for a component that implements support to cache values on current request (for a web application a Http request)
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Cache.IRequestCache.IsActive">
            <summary>
            Indicates if caching is active for current scope
            </summary>
            <remarks>
            For a http context based implementation the implementation returns true if a http context is present
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.IRequestCache.Get``1(System.String)">
            <summary>
            Gets a previously cached value (if exist)
            </summary>
            <typeparam name="T">The type of the cached item</typeparam>
            <param name="key">The unique key for the item</param>
            <returns>The cached item or default(T) if not present.</returns>
        </member>
        <member name="M:EPiServer.Framework.Cache.IRequestCache.Set``1(System.String,``0)">
            <summary>
            Inserts a value in the cache
            </summary>
            <typeparam name="T">The type of the item to cache</typeparam>
            <param name="key">The unique key for the item</param>
            <param name="value">The item to cache</param>
        </member>
        <member name="T:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache">
            <summary>
            Object instance cache that has support for synchronizing cache contents over multiple computers.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.RemoveLocal(System.String)">
            <summary>
            Removes the object instance from the local cache.
            </summary>
            <param name="key">The key of the cached object instance.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.RemoveRemote(System.String)">
            <summary>
            Removes the object instance from the remote cache location.
            </summary>
            <param name="key">The key of the cached object.</param>
        </member>
        <member name="P:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.SynchronizationFailedStrategy">
            <summary>
            Get or set the strategy for handling missed synchronization information.
            </summary>
            <value>
            The synchronization failure strategy.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.ObjectInstanceCache">
            <summary>
            Gets the object instance cache used by the synchronized cache implementation.
            </summary>
            <value>
            The object instance cache.
            </value>
        </member>
        <member name="T:EPiServer.Framework.Cache.FailureRecoveryAction">
            <summary>
            The various options for handling cache synchronization failures
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Cache.FailureRecoveryAction.None">
            <summary>
            Ignore cache synchronization failures and continue as if nothing has happened.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Cache.FailureRecoveryAction.ClearAll">
            <summary>
            Clear the entire cache if cache synchronization failures has been detected.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Cache.WeakReferenceCache">
            <summary>
            Experimental implementation for internal use.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.WeakReferenceCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
            <summary>
            Inserts the value into the cache with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value to cache.</param>
            <param name="evictionPolicy">The cache eviction policy.</param>
            <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.WeakReferenceCache.Remove(System.String)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.WeakReferenceCache.Get(System.String)">
            <summary>
            Gets the specified object.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The object associated with the key, if it exists. Otherwise returns null.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Cache.WeakReferenceCache.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Cache.WeakReferenceCache.ReadThrough``1(System.String,System.Func{``0},System.Func{EPiServer.Framework.Cache.CacheEvictionPolicy})">
            <summary>
            Read-through cache handling.
            </summary>
            <typeparam name="T">Type of the value to read.</typeparam>
            <param name="key">The key.</param>
            <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
            <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved. It can be null in which case a default policy is used.</param>
            <returns>
            The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Cache.CacheItemWrapper">
            <summary>
            Wrapper for items stored in the weak reference cache.
            </summary>
            <remarks>
            Intended for internal use only - do not reference this class in your code.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheItemWrapper.#ctor(System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheItemWrapper"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="eviction">The eviction policy.</param>
            <param name="now">The current time/date stamp.</param>
        </member>
        <member name="M:EPiServer.Framework.Cache.CacheItemWrapper.ReturnIfValid(System.DateTime)">
            <summary>
            Returns the object if it is valid (considering expiration and liveness of the weak reference).
            </summary>
            <param name="now">The current time/date stamp.</param>
            <returns>The object if it is valid, otherwise null.</returns>
        </member>
        <member name="T:EPiServer.Framework.Configuration.AppDataElement">
            <summary>
            Config element that indicates path for common application data.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.AssemblyElementCollection.ProbingPath">
            <summary>
            Gets a site root relative path to modules assemblies.
            Default value is 'modulesbin'.
            </summary>
            <remarks>This path should also be specified in configuration/runtime/assemblyBinding/probing section in privatePath attribute</remarks>.
        </member>
        <member name="T:EPiServer.Framework.Configuration.ClientResourcesElement">
            <summary>
            A configuration element for the client resources
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.ClientResourcesElement.Debug">
            <summary>
            Make sure debug versions of included scripts are used instead of compressed/optimized versions
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.ClientResourcesElement.Compress">
            <summary>
            Controls if compression is applied to the rest stores.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.ConfigurationSource">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Exposes the global <see cref="T:EPiServer.Framework.Configuration.IConfigurationSource"/> and events to listen to changes.
            </summary>
            <exclude/>
        </member>
        <member name="E:EPiServer.Framework.Configuration.ConfigurationSource.SourceChanged">
            <summary>
            Triggered when <see cref="P:EPiServer.Framework.Configuration.ConfigurationSource.Instance"/> is assigned a new value
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.ConfigurationSource.Instance">
            <summary>
            Global configuration source for EPiServer infrastructure
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.ConfigurationSourceExtensions">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <exclude/>
        </member>
        <member name="T:EPiServer.Framework.Configuration.EPiServerFrameworkSection">
            <summary>
            Class representing the episerver.framework configuration element
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.UpdateDatabaseSchema">
            <summary>
            Gets a value indicating whether the database schema should be updated automatically 
            from within the site.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.CreateDatabaseSchema">
            <summary>
            NOTE: This is a pre-release setting that is UNSTABLE and might not satisfy the compatibility requirements 
            as denoted by its associated normal version.
            Gets a value indicating whether the database schema should be created automatically 
            from within the site.
            </summary>
            <remarks>
            This feature is only intended for Developement environments and it is NOT supported in Production environments.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.ConfigurationInstance">
            <summary>
            Gets and sets the current configuration to use
            </summary>
            <exclude/>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.VirtualPathProviders">
            <summary>
            Gets the virtual path provider settings.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.VirtualPathMappings">
            <summary>
            Gets the virtual path mappings configuration.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.ClientResources">
            <summary>
            Configures client resoruces such as enabling debug mode
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.Instance">
            <summary>
            Gets the instance of the <see cref="T:EPiServer.Framework.Configuration.EPiServerFrameworkSection"/> section
            </summary>
            <remarks>Returns null if the section isn't found</remarks>
        </member>
        <member name="T:EPiServer.Framework.Configuration.EventElement">
            <summary>
            Element that hold configruation settings for events which is used for communication between sites in a load balanced scenario.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EventElement.Providers">
            <summary>
            Gets the providers collection.
            </summary>
            <value>
            The providers.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Configuration.EventElement.DefaultProvider">
            <summary>
            Gets or sets the default provider to use.
            </summary>
            <value>
            The default provider.
            </value>
        </member>
        <member name="T:EPiServer.Framework.Configuration.RestartMode">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Defines how the application should be restarted
            </summary>
            <exclude/>
        </member>
        <member name="F:EPiServer.Framework.Configuration.RestartMode.None">
            <summary>
            Just saves configuration, restart might be triggered by the runtime depending on configuration source restart on external changes setting
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Configuration.RestartMode.ThisApplicationOnly">
            <summary>
            Force a restart by unloading the current appdomain
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Configuration.RestartMode.AllApplications">
            <summary>
            Touch configuration file/web.config to trigger a restart even though a configuration source is being used
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.GlobalConfigurationManager">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Helper methods to load and save configuration files
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.Framework.Configuration.GlobalConfigurationManager.Save(System.Configuration.Configuration,EPiServer.Framework.Configuration.RestartMode)">
            <summary>
            Save configuration to the file system based on the path of the application domain configuration file
            </summary>
            <param name="configuration"></param>
            <param name="restartMode"></param>
        </member>
        <member name="M:EPiServer.Framework.Configuration.GlobalConfigurationManager.Load">
            <summary>
            Load configuration file from the file system based on the application domain configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Configuration.IConfigurationSource">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Reads configuration sections.
            </summary>
            <exclude/>
        </member>
        <member name="M:EPiServer.Framework.Configuration.IConfigurationSource.Get``1(System.String)">
            <summary>
            Reads the configuration by path
            </summary>
            <typeparam name="T">The type of the configuration</typeparam>
            <param name="path">The path to the configuration</param>
            <returns>The configuration or <c>null</c> if not found</returns>
        </member>
        <member name="T:EPiServer.Framework.Configuration.ConfigurationManagerSource">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Reads configuration from <see cref="T:System.Configuration.ConfigurationManager"/>.
            </summary>
            <exclude/>
        </member>
        <member name="T:EPiServer.Framework.Configuration.FileConfigurationSource">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Load a writable configuration from the configuration file specified by the current <see cref="T:System.AppDomain"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:EPiServer.Framework.Configuration.FileConfigurationSource.ConfigurationInstance">
            <summary>
            Backing configuration instance
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.LicensingElement">
            <summary>
            Configuration for licensing
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.LicensingElement.LicenseFilePath">
            <summary>
            The full path to the license file
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.LocalizationElement">
            <summary>
            A configuration element within the EPiServer Framework section of web.config.
            </summary>
            <example>
                <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
            </example>
        </member>
        <member name="P:EPiServer.Framework.Configuration.LocalizationElement.FallbackBehavior">
            <summary>
            Gets or sets a value describing the fallback behavior of the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>
            if the resource could not be found.
            </summary>
            <value>
            The fallback behavior enum value.
            </value>
            <example>
                <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
            </example>
        </member>
        <member name="P:EPiServer.Framework.Configuration.LocalizationElement.FallbackCulture">
            <summary>
            Gets or sets a value describing what fallback culture the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>
            should use if the resource could not be found.
            </summary>
            <value>
            The fallback culture identifier.
            </value>
            <example>
                <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
            </example>
        </member>
        <member name="P:EPiServer.Framework.Configuration.LocalizationElement.Providers">
            <summary>
            Gets the localization providers that should be used by the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService"/> to respond to resource requests.
            </summary>
            <example>
                <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
            </example>
        </member>
        <member name="T:EPiServer.Framework.Configuration.StaticFileSection">
            <summary>
            Static file handler configuration.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.StaticFileSection.ExpirationTime">
            <summary>
            Gets the cache expiration time.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.StaticFileSection.CacheControl">
            <summary>
            Gets the cache control settings.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.StaticFileSection.EnableOutputCache">
            <summary>
            Gets a value indicating whether output cache should be enabled.
            </summary>
            <value>
              <c>true</c> if output cache is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Configuration.StaticFileSection.CurrentStaticFileSection">
            <summary>
            Gets the current static file handler configuration.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Configuration.VirtualRolesElement">
            <summary>
            Configuration for virtual roles
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Configuration.VirtualRolesElement.FailSafeIsInRole">
            <summary>
            Gets or sets a value indicating whether IsInRole on VirtualRolePrincipal may throw an exception.
            </summary>
            <value><c>true</c> if IsInRole is fail safe (cannot throw exception); otherwise, <c>false</c>.</value>
            <remarks>
            This setting can be useful to emulate the behavior of IsInRole as it worked in .NET Framework 1.0 / 1.1
            In these versions any exceptions thrown by code executing beneath IsInRole were caught and ignored. The IsInRole
            for a WindowsPrincipal in .NET 2.0 may throw an exception if a domain controller is unavailable - this may be
            undesired behavior since it could prevent the logon process, thus preventing any user from logging on. By setting
            this property to True you will cause any exceptions thrown by IsInRole to be caught and ignored. The IsInRole
            call will be interpreted as returning False on throw.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Configuration.VirtualRolesElement.ReplicationType">
            <summary>
            The type that will handle replication of changes in virtual roles
            </summary>
        </member>
        <member name="T:EPiServer.Framework.DataAnnotations.EditorHintAttribute">
            <summary>
            Works the same way as the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute"/> attribute with the difference that this
            attribute only changes the selection of editors. This works on class level compared to
            <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute"/> that works on property level.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute">
            <summary>
            Attribute for model type which support media 
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.Extensions">
            <summary>
            The extensions that this type support.
            </summary>
            <remarks>Use <see cref="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.ExtensionString"/> instead if your project is CLS-compliant.</remarks>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.ExtensionString">
            <summary>
            Gets or sets the Extensions as a comma-separated list.
            </summary>
            <value>The Extensions string.</value>
            <remarks>This can be used instead of <see cref="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.Extensions"/> if your project is CLS-compliant.</remarks>
        </member>
        <member name="T:EPiServer.Framework.DataAnnotations.PresentationLayer">
            <summary>
            Defines constant strings to select presentation layer for an <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute"/>.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.DataAnnotations.PresentationLayer.Edit">
            <summary>
            Used to select editor.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.DataAnnotations.PresentationLayer.Website">
            <summary>
            The layer used to display the website.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute">
            <summary>
            Attribute that describes a template
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.ModelType">
            <summary>
            Gets or sets the model type for the described template should be registered for.
            </summary>
            <remarks>
            This property is required if the template doesn't implement the IRenderTemplate&lt;TModel&gt; interface
            or if multiple descriptor attributes are added to the same template. 
            If the template does implement the IRenderTemplate&lt;TModel&gt; interface, this type must match or be a subclass of the 
            type passed to the interface. 
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Name">
            <summary>
            Gets or sets the name of the template.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.AvailableWithoutTag">
            <summary>
            Gets or sets a value indicating whether the renderer should be available even when no specific tag is requested.
            </summary>
            <remarks>
            Default value is true if no <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags"/> is specified else false.
            </remarks>
            <value><c>true</c> if renderer is available without tag specified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags">
            <summary>
            The tags that this renderer support.
            </summary>
            <remarks>Use <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TagString"/> instead if your project is CLS-compliant.</remarks>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TagString">
            <summary>
            Gets or sets the render tags as a comma-separated list.
            </summary>
            <value>The render tag.</value>
            <remarks>This can be used instead of <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags"/> if your project is CLS-compliant.</remarks>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Inherited">
            <summary>
            Gets or sets a value indicating whether model types derived from <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.ModelType"/> automatically will be able to use the render.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TemplateTypeCategory">
            <summary>
            Gets or sets the template type of the renderer.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Path">
            <summary>
            Gets or sets the path to the render.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Default">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute"/> is default.
            </summary>
            <value>
              <c>true</c> if default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Dependencies.DependencyCycleException">
            <summary>
            Thrown when cycle is detected when resolving dependencies
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Dependencies.DependencyCycleException.CircularDependencies">
            <summary>
            Gets dependencies that make a cycle.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
            <param name="circularDependencies">The circular dependencies.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="circularDependencies">The circular dependencies.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.ToString">
            <summary>
            Overriden. Returns a <see cref="T:System.String"/> that represents this instance and the list of missing prerequisites.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:EPiServer.Framework.Dependencies.DependencySorter`1">
            <summary>
            Performs topological sorting of items based on dependencies.
            </summary>
            <remarks>
            This class is thread safe.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Sort(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Boolean)">
            <summary>
            Sorts specified items by dependencies.
            </summary>
            <param name="items">The collection of items that should be sorted by dependencies.</param>
            <param name="getDependenciesDelegate">The deledate to get item dependencies.</param>
            <param name="throwOnCycle">if set to <c>true</c> throw exception when dependency cycle is detected.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Sort(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Sorts specified items by dependencies.
            </summary>
            <param name="items">The items.</param>
            <param name="getDependenciesDelegate">The deledate to get item dependencies.</param>
            <returns></returns>
            <exception cref="T:EPiServer.Framework.Dependencies.DependencyCycleException">Thrown when dependency cycle is detected.</exception>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Visit(`0,EPiServer.Framework.Dependencies.DependencySortingContext{`0})">
            <summary>
            Visits the specified item and all direct and indirect dependencies recursively.
            Items is added to sorted list only when all its dependencies are there.
            </summary>
            <param name="item">The item.</param>
            <param name="context">The sorting context.</param>
        </member>
        <member name="T:EPiServer.Framework.Dependencies.DependencySortingContext`1">
            <summary>
            Context for atomic dependency sorting operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencySortingContext`1"/> class.
            </summary>
            <param name="getDependenciesDelegate">The delegate to get item dependencies.</param>
            <param name="throwOnCycle">if set to <c>true</c> [throw on cycle].</param>
        </member>
        <member name="P:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetDependenciesDelegate">
            <summary>
            The delegate to get item dependencies.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Dependencies.DependencySortingContext`1.ThrowOnCycle">
            <summary>
            Gets a value indicating whether exception should be thrown when dependency cycle is detected.
            </summary>
            <value>
              <c>true</c> if throw exception when cycle is detected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.IsVisited(`0)">
            <summary>
            Determines whether the specified item is visited.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the specified item is visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.MarkAsVisited(`0)">
            <summary>
            Marks the specified item as visited.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.IsSorted(`0)">
            <summary>
            Determines whether the specified item and all its dependencies are resolved and sorted.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the specified item is sorted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.MarkAsSorted(`0)">
            <summary>
            Marks the specified item as sorted meaning that all dependencies are resolved and sorted.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetSortedItems">
            <summary>
            Gets the sorted items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetVisitedUnsortedItems">
            <summary>
            Gets the items that are visited but sorting for them is not completed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.CultureInfoExtensions">
            <summary>
            Extension methods to localize the name of CultureInfos.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.Translate(System.Globalization.CultureInfo)">
            <summary>
            Translates the specified culture info name using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <returns>The translated name otherwise the native name.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.Translate(System.Globalization.CultureInfo,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Translates the specified culture info name using the specified <paramref name="localizationService"/>.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <param name="localizationService">The localization service.</param>
            <returns>The translated name otherwise the native name.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.TranslateCultureName(System.String)">
            <summary>
            Translates the specified culture name using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
            <returns>The translated name otherwise the native name.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.TranslateCultureName(System.String,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Translates the specified culture name using the specified <paramref name="localizationService"/>.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <param name="localizationService">The localization service.</param>
            <returns>The translated name otherwise the native name.</returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.FallbackBehaviors">
            <summary>
            Specifies which behaviours that should be used as fallback when no match is found.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.None">
            <summary>
            An empty string is returned in case of no match.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo">
            <summary>
            The key is returned unmodified if no match is found and the key is not a complex key.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.MissingMessage">
            <summary>
            A message saying that no resource was found is returned if no match is found.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.FallbackCulture">
            <summary>
            The resource is returned using the fallback culture if no match is found.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.LocalizationProvider">
            <summary>
            Provides the base class for creating a provider to handle localized resources.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationProvider.AvailableLanguages">
            <summary>
            Gets all available languages. 
            An available language does not need to contain any translations.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string from a resource key.
            </summary>
            <param name="originalKey">The unmodified key</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the resource string</param>
            <returns>A translated resource string</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for a specific culture. Will return all strings below the specified key.
            </summary>
            <param name="originalKey">The unmodified key</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the resource string</param>
            <returns>All resource strings below the specified key</returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.LocalizationService">
            <summary>
            Provides the base class for service for localized resources for a specific culture.
            </summary>
            <seealso cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService"/>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> class.
            </summary>
            <param name="keyHandler">The handler used to manipulate resource keys.</param>
        </member>
        <member name="F:EPiServer.Framework.Localization.LocalizationService.MissingMessageFormat">
            <summary>
            The formatting string that is used when a key is missing for a language.
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Localization.LocalizationService.ResourceKeyNormalized">
            <summary>
            Occurs when a resource key has been normalized. At this time you have the opportunity to modify the contents of this array.
            </summary>
            <remarks>
            If you modify the contents of the normalized array, you should always ensure that it is not null.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationService.Current">
            <summary>
            Gets the current <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> instance. 
            </summary>
            <remarks>
            This is a shortcut to the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> for the current service, 
            but it is guaranteed to never be <c>null</c>.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationService.KeyHandler">
            <summary>
            Gets the handler that is used to manipulate resource keys.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationService.AvailableLocalizations">
            <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> has knowledge of. 
            </summary>
            <remarks>
            <para>
            An available localizations does not need to contain any translations.
            </para>
            <para>
            Available languages should never contain the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> even though
            it may be supported by the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </para>
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior">
            <summary>
            Gets or sets the fallback behavior to use when no resource is found.
            </summary>
            <value>
            The fallback behavior.
            </value>
            <remarks>
                <para>
                    The value can be set by configuration (<see cref="T:EPiServer.Framework.Configuration.LocalizationElement"/>) or by code.
                </para>
                <para>
                    If <see name="FallbackBehavior"/> contains <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo"/> then if key does not start with a '#' of a '/', 
                    the resourceKey is returned back unmodified when no match is found.<br />
                    If <see name="FallbackBehavior"/> contains <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.MissingMessage"/> then if no match for key is found 
                    will return a message stating that the resource could not be found.
                </para>
                <para>
                    The reason for the possibility to use an echo behavior is to be able to use EPiServer web controls 
                    that use Translate for visible strings, where you might not have translations in place, or maybe do not want to translate the text.
                </para>
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationService.FallbackCulture">
            <summary>
            Gets or sets the fallback culture to use if a resource is not found for the requested culture.
            </summary>
            <value>
            The fallback culture to use.
            </value>
            <remarks>
            <para>
                Note that the <see cref="T:EPiServer.Framework.Localization.FallbackBehaviors"/> must contain the <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.FallbackCulture"/> flag 
                for this culture to be used.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)">
            <summary>
            Gets the localized string for the specified key in the current UI culture.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <returns>A localized string.</returns>
            <remarks>
                <para>
                    The <paramref name="resourceKey"/> is default typically something like "/admin/settings/heading", where the expression closely follows
                    the folder/file/usage pattern. You can also enter a '#' to automatically constuct a path to the current 
                    file. For example when calling GetString("#heading") from the file /templates/mypage.aspx it is 
                    equivalent to calling GetString("/templates/mypage/heading").
                </para>
                <para>
                    The return value when no match for <paramref name="resourceKey"/> is found is dependent on the value 
                    of the <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior"/> property.
                </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String,System.String)">
            <summary>
            Gets the localized string for the specified key in the current UI culture.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="fallback">The string to return if no match was found for <paramref name="resourceKey"/>.</param>
            <returns>A localized string or <paramref name="fallback"/>.</returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="fallback">The string to return if no match was found for <paramref name="resourceKey"/>.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string or <paramref name="fallback"/>.</returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture
            using the standard fallback behavior.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String,EPiServer.Framework.Localization.FallbackBehaviors)">
            <summary>
            Gets the localized string for the specified key in the current UI culture
            using the provided fallback behavior.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="fallbackBehavior">The fallback behavior to use if the resource is not found.</param>
            <returns>
            A localized string.
            </returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,EPiServer.Framework.Localization.FallbackBehaviors,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture
            using the provided fallback behavior.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <param name="fallbackBehavior">The fallback behavior to use if the resource is not found.</param>
            <returns>A localized string.</returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array.</param>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
            <remarks>
            Any implementation must make sure that if no resource is found for the given key and culture, 
            <c>null</c> must be returned.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetString(System.String,System.String@)">
            <summary>
            Tries to get the localized string for the specified key in the current UI culture.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
            <returns><c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetStringByCulture(System.String,System.Globalization.CultureInfo,System.String@)">
            <summary>
            Tries to get the localized string for the specified key in the specified culture.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
            <returns><c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
            <remarks><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetStringByCulture(System.String,System.String[],System.Globalization.CultureInfo,System.String@)">
            <summary>
            Tries to get the localized string for the specified key in the specified culture.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized string.</param>
            <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
            <returns><c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStrings">
            <summary>
            Gets all localized strings for the current UI culture.
            </summary>
            <returns>All resource strings for the current UI culture.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture.
            </summary>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings for the given culture.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStrings(System.String)">
            <summary>
            Gets all localized strings for the current UI culture below the specified key.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <returns>All localized strings for the current UI culture below the specified key.</returns>
            <remarks>
            <para>If the key is empty, all strings will be returned.</para>
            <para><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
            <param name="resourceKey">The key that represents the localized string to get.</param>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings below the specified key.</returns>
            <remarks>
            <para>If the key is empty, all strings will be returned.</para>
            <para><see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)"/> for information on the format of <paramref name="resourceKey"/>.</para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.AddFallbackStringsToDictionary(System.Collections.Generic.Dictionary{System.String,EPiServer.Framework.Localization.ResourceItem},System.String,System.String[])">
            <summary>
            Adds the fallback resource values according to <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackCulture"/> and <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior"/> 
            to the <paramref name="targetResources"/> dictionary.
            </summary>
            <param name="targetResources">The target dictionary where the resouces are added.</param>
            <param name="resourceKey">The resource key.</param>
            <param name="normalizedKey">The normalized key.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings below the specified key.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.NormalizeKey(System.String)">
            <summary>
            Normalizes the resource key to an array of key parts split on forward slash (/). 
            If the key starts with a hash (#), it will use the current request path to resolve the key.
            </summary>
            <param name="resourceKey">The resource key to normalize. The key must start with '/' or '#' for the key to be normalized.</param>
            <returns>An normalized array with key parts.</returns>
            <remarks>
            Raises the <see cref="E:KeyNormalized"/> event once normalization is complete. This event allows for external 
            code to modify the standard normalization behavior.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.OnKeyNormalized(EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs)">
            <summary>
            Raises the <see cref="E:KeyNormalized"/> event.
            </summary>
            <param name="args">The <see cref="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetFallbackResourceValue(EPiServer.Framework.Localization.FallbackBehaviors,System.String,System.Globalization.CultureInfo,System.String[])">
            <summary>
            Gets the fallback string as definied by the fallback behavior.
            </summary>
            <remarks>
            This method does resource lookup if <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.FallbackCulture"/> is specified as fallback behavior.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationService.GetMissingFallbackResourceValue(EPiServer.Framework.Localization.FallbackBehaviors,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the the value for a missing resource based on fallback behavior.
            </summary>
            <remarks>
            This method only handles <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo"/> and <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo"/>. 
            No additional resource lookup is done.
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.Localization.LocalizationService.NullLocalizationService">
            <summary>
            A implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> that will never return any localizations. 
            Used as a fallback for LocalizationService.Current
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider">
            <summary>
            Implements a resource provider for the <see cref="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.LocalizationService"/> system used in EPiServer.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider"/> class.
            </summary>
            <param name="classKey">The class key</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.#ctor(System.String,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider"/> class.
            </summary>
            <param name="classKey">The class key.</param>
            <param name="localizationService">The localization service to use.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.FallbackProvider">
            <summary>
            Get the default provider factory in case we do not have the localized resource ii our lang XML-files.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a resource object for the key and culture.
            </summary>
            <param name="resourceKey">The key identifying a particular resource.</param>
            <param name="culture">The culture identifying a localized value for the resource.</param>
            <returns>An Object that contains the resource value for the resourceKey and culture.</returns>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.ResourceReader">
            <summary>
            Gets an object to read resource values from a source. Not supported.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory">
            <summary>
            Provides ASP.NET Resource syntax to access localized EPiServer resources.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.FallbackProviderFactory">
            <summary>
            Gets the fallback provider factory.
            </summary>
            <value>The fallback provider factory.</value>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.CreateGlobalResourceProvider(System.String)">
            <summary>
            When overridden in a derived class, creates a global resource provider.
            </summary>
            <param name="classKey">The name of the resource class.</param>
            <returns>
            An <see cref="T:System.Web.Compilation.IResourceProvider"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.CreateLocalResourceProvider(System.String)">
            <summary>
            When overridden in a derived class, creates a local resource provider.
            </summary>
            <param name="virtualPath">The path to a resource file.</param>
            <returns>
            An <see cref="T:System.Web.Compilation.IResourceProvider"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.MemoryLocalizationProvider">
            <summary>
            A memory based implementation of a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider"/>. 
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> class.
            </summary>
            <param name="keyHandler">The handler used to manipulate resource keys.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.AddString(System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Adds a string to the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> dictionary.
            </summary>
            <param name="culture">The culture that the string should be associated with.</param>
            <param name="resourceKey">The key that the string should be associated with.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.RemoveString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Removes a string from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> dictionary.
            </summary>
            <param name="culture">The culture that the string is associated with.</param>
            <param name="resourceKey">The key that the string is associated with.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.ClearStrings">
            <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.ClearStrings(System.Globalization.CultureInfo)">
            <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationProvider"/> dictionary for a specific culture.
            </summary>
            <param name="culture">The culture to clear all strings from.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.MemoryLocalizationProvider.AvailableLanguages">
            <summary>
            Gets all available languages.
            An available language does not need to contain any translations.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings below the specified key.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:EPiServer.Framework.Localization.MemoryLocalizationService">
            <summary>
            A memory based implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>. 
            </summary>
            <remarks>
            Uses an in-memory dictionary to store the resource string.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> class.
            </summary>
            <param name="keyHandler">The handler used to manipulate resource keys.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.AddString(System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Adds a string to the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> dictionary.
            </summary>
            <param name="culture">The culture that the string should be associated with.</param>
            <param name="resourceKey">The key that the string should be associated with.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.RemoveString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Removes a string from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> dictionary.
            </summary>
            <param name="culture">The culture that the string is associated with.</param>
            <param name="resourceKey">The key that the string is associated with.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.ClearStrings">
            <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.ClearStrings(System.Globalization.CultureInfo)">
            <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService"/> dictionary for a specific culture.
            </summary>
            <param name="culture">The culture to clear all strings from.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.MemoryLocalizationService.AvailableLocalizations">
            <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> has knowledge of.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings below the specified key.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService">
            <summary>
            Provider based implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>. Uses <see cref="T:EPiServer.Framework.Localization.LocalizationProvider"/>s to load localized resources.
            </summary>
            <example>
            <para>How to register a provider in web.config.</para>
            <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
            <para>How to register a provider using a physical path in a <see cref="T:EPiServer.Framework.IInitializableModule"/>.</para>
            <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithPhysicalPath.cs" region="CustomLanguageProvider" lang="cs" />
            <para>How to register a provider using a virtual path in a <see cref="T:EPiServer.Framework.IInitializableModule"/>.</para>
            <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService"/> class.
            </summary>
            <param name="keyHandler">The handler used to manipulate resource keys.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.ProviderBasedLocalizationService.Providers">
            <summary>
            Gets a list of providers that are used by the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService"/>.
            </summary>
            <value>
            The list of providers.
            </value>
            <remarks>
            <para>
                Note that as the Providers are processed in prioritized order from first to last, you should insert
                you provider first if you want it to be called first.
            </para>
            <para>
                Any provider added with a specified name, must have a unique name.
            </para>
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.ProviderBasedLocalizationService.AvailableLocalizations">
            <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> has knowledge of.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.InitializeProviders(System.Configuration.ProviderSettingsCollection)">
            <summary>
            Initializes a set of providers from the provided <see cref="T:System.Configuration.ProviderSettingsCollection"/>.
            </summary>
            <param name="settings">The <see cref="T:System.Configuration.ProviderSettingsCollection"/> to initialize the provider collection with.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="culture">The requested culture for the localized string.</param>
            <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
            <param name="originalKey">The original key that was passed into any GetString method.</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the localized strings.</param>
            <returns>All localized strings below the specified key.</returns>
            <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.CreateInstance(EPiServer.Framework.Localization.ResourceKeyHandler,EPiServer.Framework.Configuration.EPiServerFrameworkSection)">
            <summary>
            Creates a provider based localization service with providers from the given configuration.
            </summary>
            <param name="keyHandler">The key handler to use for the localization service.</param>
            <param name="configuration">The configuration to read.</param>
            <returns>
            A localization service.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.Create(EPiServer.Framework.Localization.ResourceKeyHandler,EPiServer.Framework.Configuration.EPiServerFrameworkSection)">
            <summary>
            Creates a provider based localization service with providers from the given configuration.
            </summary>
            <param name="keyHandler">The key handler to use for the localization service.</param>
            <param name="configuration">The configuration to read.</param>
            <returns>
            A localization service.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
            <summary>
            Configure the IoC container before initialization.
            </summary>
            <param name="context">The context on which the container can be accessed.</param>
        </member>
        <member name="T:EPiServer.Framework.Localization.ResourceItem">
            <summary>
            Represent information about a string resource item in the system.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> struct.
            </summary>
            <param name="key">The resource key.</param>
            <param name="value">The resource value.</param>
            <param name="sourceCulture">The culture that the resource is specified in.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.ResourceItem.Key">
            <summary>
            Gets the resource key.
            </summary>
            <value>
            The resource key.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Localization.ResourceItem.Value">
            <summary>
            Gets the resource value.
            </summary>
            <value>
            The resource value.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Localization.ResourceItem.SourceCulture">
            <summary>
            Gets the culture that the resource was specified in.
            </summary>
            <value>
            The source culture.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.Equals(EPiServer.Framework.Localization.ResourceItem)">
            <summary>
            Determines whether the specified <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.op_Equality(EPiServer.Framework.Localization.ResourceItem,EPiServer.Framework.Localization.ResourceItem)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="item1">The item on the left hand side of the operator.</param>
            <param name="item2">The item on the right hand side of the operator.</param>
            <returns>
              <c>true</c> if the first <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> is equal to the second <see cref="T:EPiServer.Framework.Localization.ResourceItem"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceItem.op_Inequality(EPiServer.Framework.Localization.ResourceItem,EPiServer.Framework.Localization.ResourceItem)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="item1">The item on the left hand side of the operator.</param>
            <param name="item2">The item on the right hand side of the operator.</param>
            <returns>
              <c>true</c> if the first <see cref="T:EPiServer.Framework.Localization.ResourceItem"/> is not equal to the second <see cref="T:EPiServer.Framework.Localization.ResourceItem"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.ResourceKeyHandler">
            <summary>
            Performs different operations on resource keys for <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.ResourceKeyHandler.ComplexResourceKeySeparator">
            <summary>
            The character that separates the different parts of a complex key.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.ResourceKeyHandler.ComplexResourceKeyIdentifier">
            <summary>
            The character that if present at the start of the resource key, 
            identifies that it is a key that is made up of multiple sections.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.ResourceKeyHandler.ContextBasedResourceKeyIdentifier">
            <summary>
            The character that if present at the start of the resource key, 
            identifies that it is a context based key that should be resolved based on the current request path.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceKeyHandler"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceKeyHandler"/> class.
            </summary>
            <param name="contextLoader">The method that will provide the current HttpContext. If null, the <see cref="P:System.Web.HttpContext.Current"/> will be used.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.NormalizeKey(System.String)">
            <summary>
            Normalizes the resource key to an array of key parts split on forward slash (/). 
            If the key starts with a hash (#), it will use the current request path to resolve the key.
            </summary>
            <remarks>
            Raises the KeyNormalized event once normalization is complete. This event allows for external 
            code to modify the standard normalization behavior.
            </remarks>
            <param name="resourceKey">The resource key to normalize. The key must start with '/' or '#' for the key to be normalized.</param>
            <returns>An normalized array with key parts.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.JoinKey(System.String,System.String[])">
            <summary>
            Joins a normalized key back into a single key string.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.ResolveContextBasedKey(System.String)">
            <summary>
            Resolves a resource key based on the current request path.
            </summary>
            <param name="resourceKey">The resource key to resolve.</param>
            <returns>A key that has the current request path added to the beginning of the key.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.IsComplexKey(System.String)">
            <summary>
            Determines whether the specified key is a complex resource key, i.e. made up by multiple sections.
            </summary>
            <param name="key">The key to test.</param>
            <returns>
              <c>true</c> if the specified key is a complex key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.TransformResourceKey(System.String)">
            <summary>
            Transforms a resource key that has the character "." as separator to a key with slashes as separator.
            </summary>
            <param name="resourceKeyWithDotSeparator">A resource key with dot as separator.</param>
            <returns>A resource key with slash as separator.</returns>
            <example>From A.Resource.Key to /A/Resource/Key</example>
        </member>
        <member name="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs">
            <summary>
            Provides the data for the <see cref="E:EPiServer.Framework.Localization.LocalizationService.ResourceKeyNormalized"/> event of the <see cref="T:EPiServer.Framework.Localization.LocalizationService"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs"/> class.
            </summary>
            <param name="normalizedKey">The normalized key array.</param>
            <param name="originalKey">The original key.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.NormalizedKey">
            <summary>
            Gets or sets the normalized key. Any changes to this property will be propagated to the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
            <value>
            The normalized key array.
            </value>
            <remarks>
            If you modifies the contents of this property, you must ensure that the array is not null 
            and that all included keys are lower-cased.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.OriginalKey">
            <summary>
            Gets the original resource key.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.ScriptResourceHelper">
            <summary>
            Contains string utility methods for working with resources strings for client scripts.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.PrepareResourceForScript(System.String,System.Boolean)">
            <summary>
            Prepares a localized string for client script usage by removing linebreaks and
            surrounding whitespace. Depending on the escape parameter the string will be either
            escaped for safe javascript output otherwise deliberate linebreaks (\n)
            are replaced with the newline character.
            </summary>
            <param name="resource">The resource string that should be prepared for script usage.</param>
            <param name="escape">If set to <c>true</c> the string is escaped for safe script output,
            otherwise \n are replaced with the newline character.</param>
            <returns>
            A string prepared for script usage.
            </returns>
            <remarks>
            The string returned may need to be escaped before rendered as a javascript
            string depending on the <paramref name="escape"/> parameter.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.PrepareResourceForScript(System.String)">
            <summary>
            Prepares a localized string for client script usage by removing linebreaks and
            surrounding whitespace. It will then be escaped for safe javascript output.
            </summary>
            <param name="resource">The resource string that should be prepared for script usage.</param>
            <returns>
            A string prepared for script usage.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.RemoveNewLineWhiteSpace(System.String)">
            <summary>
            Removes all new line characters and surrounding whitespace.
            </summary>
            <param name="resource">The string to remove newline characters from.</param>
            <returns>The string with new line characters removed.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.ConvertNewLines(System.String)">
            <summary>
            Converts any implied newline characters (backslash + 'n') to actual newlines.
            </summary>
            <param name="resource">The resource string.</param>
            <returns>The string with actual newline characters.</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.EscapeForScript(System.String)">
            <summary>
            Escapes a string for script output, but leaves any occurances of \n intact.
            <list type="bullet">
                <item>Escapes \ with \\</item>
                <item>Escapes ' with \'</item>
                <item>Escapes " with \"</item>
            </list>
            </summary>
            <param name="resource">The resource string to escape.</param>
            <returns>The escaped string</returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.ServiceLocationHelperExtensions">
            <summary>
            Makes Localization services part of the public API.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>
            Resolves the <see cref="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)"/>.
            </summary>
            <param name="helper">The service helper.</param>
            <returns>The currently registered <see cref="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)"/>.</returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer">
            <summary>
            Initializes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider"/> using xml files stored as embedded resources.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer.GetInitializedProvider(System.String,System.Reflection.Assembly[])">
            <summary>
            Extracts all embedded xml resource files and adds them to a <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider"/>
            </summary>
            <param name="nameOfProvider">The name of the provider.</param>
            <param name="assembliesContainingEmbeddedResources">The assemblies containing embedded xml resource files.</param>
            <returns>A new initialized provider.</returns>
            <remarks>It will try to include all embedded resources that ends with ".xml" from <paramref name="assembliesContainingEmbeddedResources"/>.</remarks>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.ExtensionMethods">
            <summary>
            Extension methods used by the XmlResource system
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.LanguageDocument">
            <summary>
            Used to load and fetch translations that are stored in xml documents.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.LanguageDocument"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageDocument.Root">
            <summary>
            Gets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageDocument.FindNode(System.String[])">
            <summary>
            Finds the node that matches the given language key.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns>
            The <see cref="T:EPiServer.Framework.Localization.XmlResources.LanguageNode"/> that matches the given key, or null if no such translation exists.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageDocument.Translate(System.String[],System.String)">
            <summary>
            Translates the specified key.
            </summary>
            <param name="keys">The keys.</param>
            <param name="language">The language.</param>
            <returns>
            A translated string if the translation exists; otherwise null.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageDocument.Load(System.IO.Stream)">
            <summary>
            Loads translations from a specified file stream.
            </summary>
            <param name="stream">The stream containg the XML document.</param>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.LanguageNode">
            <summary>
            LanguageNode are items in a <see cref="T:EPiServer.Framework.Localization.XmlResources.LanguageDocument"/> that is used to store the content of language translation files.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageNode.#ctor(System.String)">
            <summary>
            Create a new LanguageNode with the given name.
            </summary>
            <param name="name">The name of the new node.</param>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Name">
            <summary>
            Get the name of the node.
            </summary>
            <remarks>
            If the node has an attribute, it will be returned with the Name property. To get the
            name without attribute, use the SimpleName property. I e if the node is created with
            constructor parameter "node[@id=23]", Name will return "node[@id=23]", SimpleName
            will return "node" and Attribute will return " [@id=23]".
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Value">
            <summary>
            Access the value of the node.
            </summary>
            <remarks>
            If the node has not been give a value, it will return String.Empty.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Parent">
            <summary>
            Get the parent of this node.
            </summary>
            <remarks>
            If this is the root node, null is returned.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Children">
            <summary>
            Get a collection of children to this node.
            </summary>
            <remarks>
            Even if no children exists, a valid collection is returned with Count = 0
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.HasChildren">
            <summary>
            Gets a value indicating whether this instance has children.
            </summary>
            <value>
            	<c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
            <remarks>
            Use this property for performance reasons. When accessing the Children property you will create a new dictionary object if none exists.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Item(System.String)">
            <summary>
            Accesses the child node with the requested name.
            </summary>
            <param name="name">Name of the child node to access.</param>
            <returns>The requested LanguageNode.</returns>
            <remarks>
            If the node is not found, null is returned for the get accessor and a new node is inserted for the set accessor.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.Path">
            <summary>
            Get the full path to this node.
            </summary>
            <remarks>
            Returns a path formatted as a simple XPath expression, for example "/root/child1/child2".
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.LanguageNode.AddIfNotExist(System.String)">
            <summary>
            Add a new node with the given name if it does not exists, otherwise returns the existing node.
            </summary>
            <param name="name">The node name.</param>
            <returns>A new or previously existing node.</returns>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.LanguageNode.IsNonPathNode">
            <summary>
            Returns <c>true</c> if the node is part of the xml hierarchy, but not included in the language path/key, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider">
            <summary>
            Loads and retrieves translated resources from an xml document.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.AvailableLanguages">
            <summary>
            Gets all available languages from the xml document. 
            An available language does not need to contain any translations.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.Load(System.IO.Stream)">
            <summary>
            Extracts translations from the <paramref name="stream"/>.
            </summary>
            <param name="stream">An <see cref="T:System.IO.Stream"/> containing translated resource strings</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets a translated string from a language key.
            </summary>
            <param name="originalKey">The unmodified key</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the resource string</param>
            <returns>A translated resource string</returns>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Gets all the resource strings for a specific culture. Will return all strings below the specified key.
            </summary>
            <param name="originalKey">The unmodified key</param>
            <param name="normalizedKey">The <paramref name="originalKey"/> normalized and split into an array</param>
            <param name="culture">The requested culture for the resource string</param>
            <returns>All resource strings below the specified key</returns>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider">
            <summary>
            Extends <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider"/> with functionality to load resource files.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.VirtualPathKey">
            <summary>
            The configKey that should be used if provider is to be used with a <see cref="T:System.Web.Hosting.VirtualPathProvider"/>
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.PhysicalPathKey">
            <summary>
            The configKey that should be used if provider is to be used with a physical folder.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.FileSystemWatchPathKey">
            <summary>
            The configKey that should be used if provider should set up a FileSystemWatcher for a physical directory path.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.#ctor(System.Web.Hosting.VirtualPathProvider,EPiServer.Framework.FileSystem.IFileSystemWatcher,EPiServer.Web.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/> class.
            </summary>
            <param name="virtualPathProvider">The virtual path provider.</param>
            <param name="fileSystemWatcher">The file system watcher to use</param>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Reads the resource xml files from the location specified in config values.
            </summary>
            <remarks>
            If the resource files are served by a <see cref="T:System.Web.Hosting.VirtualPathProvider"/> then the config value must include key 'virtualPath'. 
            If the resource files are located in a physical folder then the config value must include key 'physicalPath'. 
            </remarks>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">A required configuration key was missing or faulty.</exception>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer">
            <summary>
            Initializes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/> using the given virtual path to locate xml files.
            </summary>
            <example>
            <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
            <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer.#ctor(System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Initializes a new instance of the VirtualPathXmlResourceProviderInitializer class.
            </summary>
            <param name="virtualPathProvider">The virtual path provider used when creating the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/> to initialize.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="virtualPathProvider"/> is <c>null</c>.</exception>
            <example>
            <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
            <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer.GetInitializedProvider(System.String,System.String)">
            <summary>
            Creates and initalizes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider"/>.
            </summary>
            <param name="virtualPathToLangFolder">The virtual path to the folder where xml-lang files are located.</param>
            <param name="nameOfProvider">A name for the provider.</param>
            <returns>A new initialized provider.</returns>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <example>
            <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
            <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
            </example>
        </member>
        <member name="T:EPiServer.Framework.Modules.IModuleResourceResolver">
            <summary>
            Signature for component that resolves virtual paths for modules (for example shell modules).
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.TryResolvePath(System.Reflection.Assembly,System.String,System.String@)">
            <summary>
            Resolves the path for a server side resource for an assembly (that is for example part of a shell module)
            </summary>
            <param name="assembly">The assembly to resolve the path for</param>
            <param name="relativePath">The path relative for the assembly</param>
            <param name="resolvedPath">The resolved path.</param>
            <returns>true if the module supports relative resources else false.</returns>
        </member>
        <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.ResolvePath(System.String,System.String)">
            <summary>
            Resolves the path for a server side resource for a module (for example a shell module)
            </summary>
            <param name="moduleName">The name of the module to resolve the path for</param>
            <param name="moduleRelativePath">The path relative for the module</param>
            <returns>The resolved path.</returns>
        </member>
        <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.TryResolveClientPath(System.Reflection.Assembly,System.String,System.String@)">
            <summary>
            Resolves the path for a client side resource for an assembly (that is for example part of a shell module)
            </summary>
            <param name="assembly">The assembly to resolve the path for</param>
            <param name="relativePath">The path relative for the assembly</param>
            <param name="resolvedPath">The resolved path.</param>
            <returns>true if the module supports relative resources else false.</returns>
        </member>
        <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.ResolveClientPath(System.String,System.String)">
            <summary>
            Resolves the path for a client side resource for a module (for example a shell module)
            </summary>
            <param name="moduleName">The name of the module to resolve the path for</param>
            <param name="moduleRelativePath">The path relative for the module</param>
            <returns>The resolved path.</returns>
        </member>
        <member name="P:EPiServer.Framework.Modules.IModuleResourceResolver.ProtectedRootPath">
            <summary>
            Gets the root path for protected resources
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Modules.ModuleResourceResolver">
            <summary>
            Exposes a convenient way to access the registered <see cref="T:EPiServer.Framework.Modules.IModuleResourceResolver"/> implementation.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Modules.ModuleResourceResolver.Instance">
            <summary>
            Convenience property to get the registered <see cref="T:EPiServer.Framework.Modules.IModuleResourceResolver"/> implementation
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Properties.Resources.ActivateAllExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occurred while trying to get all instances of type {0}.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Properties.Resources.ActivationExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occurred while trying to get instance of type {0}, key &quot;{1}&quot;.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Security.ISiteSecret">
            <summary>
            Describes a site wide secret used for symmetric encryption and message authentication.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Security.ISiteSecret.Id">
            <summary>
            Gets or sets the id for the secret.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Security.ISiteSecret.SiteId">
            <summary>
            Id of the site to which this secret belongs.
            </summary>
            <remarks>The identity of the site as returned by <see cref="P:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteId"/></remarks>
        </member>
        <member name="P:EPiServer.Framework.Security.ISiteSecret.Secret">
            <summary>
            The actual shared secret used for encryption and message authentication.
            </summary>
            <remarks>
            This is highly sensitive information. Only use this for cryptographic functions.
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.Security.ISiteSecretManager">
            <summary>
            Manages all <see cref="T:EPiServer.Framework.Security.ISiteSecret"/>s registered for this installation.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Security.ISiteSecretManager.GetSecret(System.String)">
            <summary>
            Gets the site secret for a specific site.
            </summary>
            <param name="siteId">The identity of the site as returned by <see cref="P:EPiServer.Framework.Initialization.SiteMappingConfiguration.SiteId"/></param>
            <para>Implementations of this interface must create new site secrets if none exists for the specific site.</para>
        </member>
        <member name="M:EPiServer.Framework.Security.ISiteSecretManager.List">
            <summary>
            Lists all registered site secrets.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Serialization.IObjectSerializer">
            <summary>
            Used to serialize/deserialize objects.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object using the specified text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="value">The object value.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the object using the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserializes the object using the specified reader.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the object to deserialize.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="P:EPiServer.Framework.Serialization.IObjectSerializer.HandledContentTypes">
            <summary>
            Gets the handled content types for this serializer.
            </summary>
            <value>The handled content types.</value>
        </member>
        <member name="T:EPiServer.Framework.Serialization.ObjectSerializerExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerExtensions.Serialize(EPiServer.Framework.Serialization.IObjectSerializer,System.Object)">
            <summary>
            Serializes the specified object to a string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="value">The object that should be serialized to a string.</param>
            <returns>A serialized representation of the provided object</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerExtensions.Deserialize``1(EPiServer.Framework.Serialization.IObjectSerializer,System.String)">
            <summary>
            Deserializes the specified value to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type that the string should be deserialized to.</typeparam>
            <param name="serializer">The serializer.</param>
            <param name="value">The value that should be deserialized.</param>
            <returns>An object of type T</returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.IObjectSerializerFactory">
            <summary>
            Factory that is used to register and get serializers for a given content type.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.IObjectSerializerFactory.GetSerializer(System.String)">
            <summary>
            Gets the serializer for the given content type.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>An <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer"/> for the given content type or null if no serializer is registered for the content type.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.IObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
            <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
            <param name="contentType">The content type to handle.</param>
            <param name="accessor">The accessor delegate.</param>
        </member>
        <member name="T:EPiServer.Framework.Serialization.KnownContentTypes">
            <summary>
            Contains known content types.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Serialization.KnownContentTypes.Json">
            <summary>
            JSON aka Javascript Object Notation.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer}})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.ObjectSerializerFactory"/> class.
            </summary>
            <param name="serializers">The initial serializers.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.#ctor(EPiServer.ServiceLocation.ServiceCollectionAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.ObjectSerializerFactory"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.RegisterSerializer(EPiServer.Framework.Serialization.IObjectSerializer)">
            <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer"/> for a given content type.
            </summary>
            <param name="serializer">The serializer.</param>
            <remarks>This overrides any existing serializer.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.Framework.Serialization.IObjectSerializer)">
            <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer"/> for a given content type.
            </summary>
            <param name="contentType">The content type to handle.</param>
            <param name="serializer">The serializer.</param>
            <remarks>This overrides any existing serializer.</remarks>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
            <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
            <param name="contentType">The content type to handle.</param>
            <param name="accessor">The creator function.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.RegisterSerializer(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
            <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for all content types that the serializer specifies in <see cref="P:EPiServer.Framework.Serialization.IObjectSerializer.HandledContentTypes" />.
            </summary>
            <param name="accessor">The accessor.</param>
            <remarks>
            This replaces any existing serializer.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Serialization.ObjectSerializerFactory.GetSerializer(System.String)">
            <summary>
            Gets the serializer for the given content type.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
            An <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer"/> for the given content type or null if no serializer is registered for the content type.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.CamelCaseStringEnumConverter">
            <summary>
            Json Converter for enum values that is sent as camelCased string
            </summary>
            <example>
            AnyEnum.EnumValue is converted to "enumValue" in Json objects
            </example>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.CamelCaseStringEnumConverter.FormatValueString(System.String)">
            <summary>
            Format the value to camelcase, i.e. set first character to lower case and keep rest of string as is
            </summary>
            <param name="value">value</param>
            <returns>A camel cased value</returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter">
            <summary>
            Abstract class for cased converter for enum values that should be converted to strings. 
            Enum value is converted to string using implemtation in FormatValueString.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if objectType is an enum</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes value (enum) as a cased string.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.FormatValueString(System.String)">
            <summary>
            Format string to correct case
            </summary>
            <param name="value">The value</param>
            <returns>The value formatted</returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.ContractResolver">
            <summary>
            Json contract resolver which is aware of injected properties
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization"/>.</param>
            <returns>
            A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The property name camel cased.
            </returns>
            <remarks>
            Overrides the default camel case converter in JSON.NET. E.g XHTML_ is converted into xhtml_ instead of xhtmL_
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.ToCamelCase(System.String)">
            <summary>
            Converts the string to a camel cased string
            </summary>
            <param name="input">The input to camel case.</param>
            <returns>The input in camel cased format</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.DateTimeConverter.#ctor">
            <summary>
            Converts a <see cref="T:System.DateTime"/>, assumed <see cref="F:System.DateTimeKind.Local"/> from the ISO 8601 date format (e.g. 2008-04-12T12:53Z) to comply with current system design.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.DateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object and will set any <see cref="T:System.DateTime"/> to 
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.JsonObjectSerializer">
            <summary>
            Used for serialization of object to/from JSON format.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.Json.JsonObjectSerializer"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.#ctor(System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter},Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.Json.JsonObjectSerializer"/> class.
            </summary>
            <param name="converters">The json converters.</param>
            <param name="resolver">The json contract resolver</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object using the specified text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="value">The object value.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the object using the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserializes the object using the specified reader.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the object to deserialize.</typeparam>
            <param name="reader">The reader.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="P:EPiServer.Framework.Serialization.Json.JsonObjectSerializer.HandledContentTypes">
            <summary>
            Gets the handled content types for this serializer.
            </summary>
            <value>The handled content types.</value>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.LowerCaseStringEnumConverter">
            <summary>
            Json Converter for enum values that is sent as lower cased string
            </summary>
            <example>
            AnyEnum.EnumValue is converted to "enumvalue" in Json objects
            </example>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.LowerCaseStringEnumConverter.FormatValueString(System.String)">
            <summary>
            Formast the value to lower case
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter">
            <summary>
            Custom converter for (de)serializing NameValueCollection
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.NotANumberConverter">
            <summary>
            Json converter that handles nullable types.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="P:EPiServer.Framework.Serialization.Json.NotANumberConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.StringUtility">
            <summary>
            String utilities for Json contract resolvers and converters.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.StringUtility.ToCamelCase(System.String)">
            <summary>
            Convert a string to camel case.
            </summary>
            <param name="input">The input string.</param>
        </member>
        <member name="T:EPiServer.Framework.Serialization.Json.UpperCaseStringEnumConverter">
            <summary>
            Json Converter for enum values that is sent as upper cased string
            </summary>
            <example>
            AnyEnum.EnumValue is converted to "ENUMVALUE" in Json objects
            </example>
        </member>
        <member name="M:EPiServer.Framework.Serialization.Json.UpperCaseStringEnumConverter.FormatValueString(System.String)">
            <summary>
            Format string value to upper case
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Timers.ElapsedEventArgs">
            <summary>
            Event argument class for ITimer.Elapsed event.
            This is required as it is not possible to create System.Timers.ElapsedEventArgs objects.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Timers.ElapsedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.ElapsedEventArgs"/> class setting the SignalTime to the current time.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Timers.ElapsedEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.ElapsedEventArgs"/> class.
            </summary>
            <param name="signalTime">The time the <see cref="T:EPiServer.Framework.Timers.ITimer"/> signalled the Elapsed event.</param>
        </member>
        <member name="P:EPiServer.Framework.Timers.ElapsedEventArgs.SignalTime">
            <summary>
            Gets the time the <see cref="T:EPiServer.Framework.Timers.ITimer"/> signalled the Elapsed event.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Timers.ITimer">
            <summary>
            Interface that redefines the System.Timers.Timer class core functionality.
            </summary>
        </member>
        <member name="E:EPiServer.Framework.Timers.ITimer.Elapsed">
            <summary>
            Occurs when the timer interval has elapsed.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Timers.ITimer.AutoReset">
            <summary>
            Gets or sets a value indicating whether the timer should start a new interval after the first interval has completed.
            </summary>
            <value>
              <c>true</c> if the timer should reset automatically and start a new interval; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Timers.ITimer.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.Timers.ITimer"/> is enabled and should raise the Elapsed event at the end of the currently set interval.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Timers.ITimer.Interval">
            <summary>
            Gets or sets the interval in milliseconds at which this <see cref="T:EPiServer.Framework.Timers.ITimer"/> should raise the Elapsed event.
            </summary>
            <value>
            The interval in milliseconds.
            </value>
        </member>
        <member name="T:EPiServer.Framework.Timers.NullTimer">
            <summary>
            Implementation of the <see cref="T:EPiServer.Framework.Timers.ITimer"/> interface that won't raise any Elapsed event regardless of settings.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Timers.NullTimer.Instance">
            <summary>
            Singleton instance of the <see cref="T:EPiServer.Framework.Timers.NullTimer"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Timers.SystemTimer">
            <summary>
            Wrapper around the System.Timers.Timer that implements the ITimer interface.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Timers.SystemTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.SystemTimer"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Timers.SystemTimer.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.SystemTimer"/> class with the Interval set to the provided number of milliseconds.
            </summary>
            <param name="interval">The initial interval in milliseconds to use.</param>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.CachingAssemblyScanner">
            <summary>
            Caches result from the assembly scanner to disk, thus surviving site restarts
            </summary>
        </member>
        <member name="P:EPiServer.Framework.TypeScanner.CachingAssemblyScanner.EnableBuildManagerCache">
            <summary>
            Enables caching to the ASP.NET build manager directory
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.CachingAssemblyScanner.LoadCache(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Loads cached assemblies and types from disk and joins with the assemblies loaded in memory
            </summary>
            <param name="assemblies">The list of loaded assemblies</param>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.CachingAssemblyScanner.SaveCache">
            <summary>
            Save the cached result to disk
            </summary>
            <remarks>Only saves changes if the cache is dirty</remarks>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.IAssemblyScanner">
            <summary>
            Scans for types that defined by <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute"/>
            </summary>
            <remarks>You should use <see cref="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup"/> to get hold of all scanned types rather than doing your own scan which is costly</remarks>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup">
            <summary>
            Interface to store and retrieve scanned types found by the <see cref="T:EPiServer.Framework.TypeScanner.IAssemblyScanner"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.TypeScanner.ITypeScannerLookup.AllTypes">
            <summary>
            All scanned types matching types defined in <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute"/>
            </summary>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.ReflectionAssemblyScanner">
            <summary>
            Scans for the presence of types
            </summary>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.TypeRelater">
            <summary>
            Gets relation information about types.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeRelater.GetDistance(System.Type,System.Type)">
            <summary>
            Returns the number of levels of inheritance that separates the a sub type
            frome one of it's super types. If the super type is an Interface, the
            distance to the implementing class is returned.
            </summary>
            <param name="type">The super type to check the distance to.</param>
            <param name="subtype">The sub type to check the distance from.</param>
            <returns>The distance between the types as a non-negative integer.</returns>
            <exception cref="T:System.ArgumentException">Throws an exception if subType is
            not actually a sub type of the super type (can't assign instance of
            subType to pointer of type superType).</exception>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.TypeScannerLookup">
            <summary>
            Default implementation of <see cref="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup"/>
            </summary>
        </member>
        <member name="P:EPiServer.Framework.TypeScanner.TypeScannerLookup.AllTypes">
            <summary>
            Gets the scanned types.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerLookup.Add(System.Type)">
            <summary>
            Adds the specified scanned type.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerLookup.Delete(System.Type)">
            <summary>
            Deletes the specified scanned type.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException">
            <summary>
            Thrown by type scanner when reflecting a given assembly
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String,System.Exception,System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.Assembly">
            <summary>
            The assembly causing the problem
            </summary>
        </member>
        <member name="P:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.LoaderExceptions">
            <summary>
            Exceptions durings loading of typed from assembly
            </summary>
        </member>
        <member name="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute">
            <summary>
            Marks a type that should be automatically picked up and added to a centrally managed repository
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.AspNetAntiForgery">
            <summary>
            Integrates the cross-site request forgery prevention with ASP.NET
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.#ctor(System.Web.UI.Page)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery"/> class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.#ctor(System.Web.HttpRequestBase,System.Web.HttpResponseBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery"/> class.
            </summary>
            <param name="request">The request object.</param>
            <param name="response">The response object.</param>
        </member>
        <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.CookieName">
            <summary>
            Gets the name of the anti-forgery cookie.
            </summary>
            <value>
            The name of the token.
            </value>
            <remarks>
            This name is used both to identify the cookie as well as the hidden field.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.FieldName">
            <summary>
            Gets the name of the form field where to store the XSRF validation data.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.HeaderName">
            <summary>
            Gets the name of the header where to store the XSRF validation data.
            </summary>
            <value>
            The name of the header.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.CreateValidationToken">
            <summary>
            Creates the validation token based on cookie.
            </summary>
            <returns>The validation token.</returns>
            <remarks>
            <para>
            This method will return empty string if the request is not authenticated.
            </para>
            <para>
            The anti-forgery cookie will be created if it does not exist.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.CreateValidationField(System.Web.UI.ClientScriptManager)">
            <summary>
            Adds the hidden anti-forgery field to a Web Forms page.
            </summary>
            <param name="scriptManager">The script manager for the current page.</param>
            <remarks>
            If the request is not authenticated, this method does nothing.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.RemoveCookie">
            <summary>
            Removes the anti-forgery cookie.
            </summary>
            <remarks>
            Call this on login/logout to ensure we have a new session.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.ValidateField">
            <summary>
            Validates the current request by checking that the hidden field can be validated with the cookie data.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.ValidateToken(System.String)">
            <summary>
            Validates the string representation of the token against the anti-forgery cookie.
            </summary>
            <param name="token">The validation data.</param>
            <remarks>
            This is primarily used in a non-WebForms scenario. For Web Forms you should call ValidateField instead.
            </remarks>
        </member>
        <member name="T:EPiServer.Framework.Web.AsyncTransmitContext">
            <summary>
            It contians async data for transmitting of files
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.ByteRange">
            <summary>
            Model class for <see cref="T:EPiServer.Framework.Web.ByteRangeRequest"/> implemementing RFC2616 (14.35.1 Byte Ranges)
            </summary>
            <remarks>
            Supports wildcarding both start and stop range. If the start range is NULL it means we should treat end range as "last X bytes".
            If the end range is NULL we should take all content from the start position and forward.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Web.ByteRange.#ctor(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Create a new byte range
            </summary>
            <param name="contentLength">The total length of the content</param>
            <param name="rangeStart">Range start</param>
            <param name="rangeEnd">Range end</param>
            <exception cref="T:System.ArgumentException">Thrown when input parameters are not valid</exception>
        </member>
        <member name="T:EPiServer.Framework.Web.ByteRangeRequest">
            <summary>
            Helper class implementing RFC2616 14.35.1 Byte Ranges
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.ByteRangeRequest.ProcessRangeRequest(System.Web.HttpContextBase,System.Action{System.Web.HttpContextBase,EPiServer.Framework.Web.ByteRange})">
            <summary>
            Processes a range request
            </summary>
            <param name="context">The context</param>
            <param name="transmitBitsFunction">A method that can transmit the byte ranges</param>
            <returns>
            From RFC2616: If a syntactically valid byte-range-set includes at least one byte-range-spec whose first-byte-pos is less than the current length of
            the entity-body, or at least one suffix-byte-range-spec with a non-zero suffix-length, then the byte-range-set is satisfiable.
            Otherwise, the byte-range-set is unsatisfiable. If the byte-range-set is unsatisfiable, the server SHOULD return a response with a status
            of 416 (Requested range not satisfiable). Otherwise, the server SHOULD return a response with a status of 206 (Partial Content)
            containing the satisfiable ranges of the entity-body.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.ByteRangeRequest.IsRangeRequest(System.Web.HttpContextBase)">
            <summary>
            Checks the header "Range" or query string "range_start" so see if this is a range request
            </summary>
            <param name="context">The context</param>
            <returns>True if this is a range request</returns>
        </member>
        <member name="M:EPiServer.Framework.Web.ByteRangeRequest.CreateRangeRequest(System.Web.HttpContextBase,System.Int64)">
            <summary>
            Try create a range request of the current context
            </summary>
            <param name="context">The context</param>
            <param name="contentLength">The content lenght</param>
            <exception cref="T:System.ArgumentException">Thrown when method is called and request is not a range request</exception>
            <returns>True if the operation succeeded</returns>
        </member>
        <member name="T:EPiServer.Framework.Web.RenderingTags">
            <summary>
            Default rendering tags used for public pages.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Preview">
            <summary>
            Preview of something, such as a draft of a document
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Edit">
            <summary>
            Edit of something, such as a draft of a document
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Header">
            <summary>
            The header of a document, usually withing the head tags
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Footer">
            <summary>
            Bottom area, usually before closing body tag
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Article">
            <summary>
            The actual content, or article on a page
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Sidebar">
            <summary>
            List of non-vital content or blocks thay may or may not be related to the main article
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.RenderingTags.Mobile">
            <summary>
            Optimized for mobile devices
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.TemplateTypeCategories">
            <summary>
            The different types of render template types supported.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.None">
            <summary>
            Indicates that the template type is unknown.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebFormsPage">
            <summary>
            Indicates that the template type is a WebForms page.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.UserControl">
            <summary>
            Indicates that the template type is a WebForms user control.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.ServerControl">
            <summary>
            Indicates that the template type is a server control, e.g. a WebControl or HtmlControl.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcController">
            <summary>
            Indicates that the template type is a MVC Controller.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcView">
            <summary>
            Indicates that the template type is a MVC View.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartialController">
            <summary>
            Indicates that the template type is a partial MVC Controller.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartialView">
            <summary>
            Indicates that the template type is a partial MVC View.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.HttpHandler">
            <summary>
            Indicates that the template type is a raw HTTP Handler (<see cref="T:System.Web.IHttpHandler"/>)
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebForms">
            <summary>
            Indicates that the template type is using WebForms.
            This value can only be used for comparison.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebFormsPartial">
            <summary>
            Indicates that the template type is a WebForms partial control (User or ServerControl).
            This value can only be used for comparison.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartial">
            <summary>
            Indicates that the template type is a partial MVC Controller or View.
            This value can only be used for comparison.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.Mvc">
            <summary>
            Indicates that the template type is a MVC Controller or View.
            This value can only be used for comparison.
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.Page">
            <summary>
            Indicates that the template type can be applied on the top page level, 
            i.e. that it is either WebFormsPage or MVC Controller or HttpHandler.
            This value can only be used for comparison.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResource">
            <summary>
            Client resource definition
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> class.
            </summary>
            <param name="path">The path to the resource.</param>
            <param name="name">The client resource name.</param>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.ResourceType">
            <summary>
            Gets or sets the type of the client resource.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Path">
            <summary>
            Gets or sets the path to the resource.
            </summary>
            <remarks>
            The path of style and JavaScript resource can have following values:
            <list type="bullet">
                <item>
                    <description>Virtual path to resource file that is available on the site. For example: /modules/ModuleName/Script.js</description>
                </item>
                <item>
                    <description>Well-formed URL to the external resource. For example: http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.min.js </description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Name">
            <summary>
            Gets or sets the client resource name.
            </summary>
            <remarks>
            The name is used to reference client resource when registering required resources and defining dependencies.
            Several client resources can use the same name, if they need to be grouped.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.SortIndex">
            <summary>
            Gets or sets the sort index, use this if you have dependencies between resources with the same name.
            </summary>
            <remarks>
            Default value is 0.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsMinified">
            <summary>
            Gets or sets a value indicating whether this resource content is already minified.
            </summary>
            <value>
            	<c>true</c> if this resource content is minified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Dependencies">
            <summary>
            Gets or sets the names of other client resources that current resource depends on.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.InlineContent">
            <summary>
            Gets or sets the inline content.
            </summary>
            <remarks>
            Inline content is igroned if client resource has not empty path.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsStatic">
            <summary>
            Gets a value indicating whether property Path is not empty and the client resource references virtual file or URL.
            </summary>
            <value>
              <c>true</c> if this client resource references virtual file or URL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsExternal">
            <summary>
            Gets a value indicating whether this instance references external client resource and Path property contains well-formed URL.
            </summary>
            <value>
            	<c>true</c> if this client resource is external; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResource.Equals(EPiServer.Framework.Web.Resources.ClientResource)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResource.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceComparer">
            <summary>
            Client resource comparer that is used to order client resources to guess the best resource loading sequence in the browser. 
            Usually is used for initial simple sorting before sorting by dependencies.
            </summary>
            <remarks>
            The following order of client resources on the page is considered as "the best" sequence when resources can be loaded by browser in parallel:
            <list type="number">
                <item>
                    <description>Static CSS references.</description>
                </item>
                <item>
                    <description>Inline CSS blocks.</description>
                </item>
                <item>
                    <description>Inline HTML injections.</description>
                </item>
                <item>
                    <description>Static JavaScript references.</description>
                </item>
                <item>
                    <description>Inline JavaScipt blocks.</description>
                </item>    
            </list>
            Sort index and the number of dependencies are considered only if it is not possible to decide which of resources is greater by type and referenced path.
            Resource is considered as greater than other if its sort index is greater of sort index of other resource with the same name or if resource has more dependencies than other resource.
            Resulting order ofthe client resources should be refined basing on dependencies, indexes and possibilities to create bundles.
            </remarks>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceComparer.Default">
            <summary>
            Gets the default client resource comparer.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceComparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceComparer"/> class from being created.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceComparer.Compare(EPiServer.Framework.Web.Resources.ClientResource,EPiServer.Framework.Web.Resources.ClientResource)">
            <summary>
            Compares two client resources and returns a value indicating whether one should be rendered before the other.
            </summary>
            <param name="x">The first client resource to compare.</param>
            <param name="y">The second client resource to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute">
            <summary>
            Attribute used to mark client resources provider implementations.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute.Lifecycle">
            <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute">
            <summary>
            Attribute is used to mark <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceRegister"/> implementations 
            that should be discovered automatically by service locator.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute.Lifecycle">
            <summary>
            Gets the scope of instances of the attributed register class; one instance is reused in scope of the one HTTP context.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResources">
            <summary>
            Helper methods to require and render client resources.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResources.RequiredClientResourceList">
            <summary>
            Exposed for unit test reasons
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResources.ClientResourceService">
            <summary>
            Exposed for unit test reasons
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Render(EPiServer.Framework.Web.Resources.ClientResource)">
            <summary>
            Renders a html tag for the specific resource
            </summary>
            <param name="resource">The resource to render.</param>
            <returns>A script html tag or css html tag</returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderResources(System.String)">
            <summary>
            Renders client resources with specified name.
            </summary>
            <param name="name">The name of the client resources.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
            <summary>
            Renders client resources with specified name and type.
            </summary>
            <param name="name">The name of the client resources.</param>
            <param name="resourceTypes">Only render resources for these types.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderRequiredResources(System.String)">
            <summary>
            Renders the required client resources for specified area.
            </summary>
            <param name="renderingArea">The rendering area.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(System.String)">
            <summary>
            Requires the client resource with specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScript(System.String)">
            <summary>
            Requires the JavaScript resource with specified path.
            </summary>
            <param name="scriptPath">The script resource virtual path path or URL.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the JavaScript resource with specified path.
            </summary>
            <param name="scriptPath">The script resource virtual path path or URL.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this script depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScriptInline(System.String)">
            <summary>
            Requires the inline JavaScript.
            </summary>
            <param name="scriptContent">Inline script content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline JavaScript.
            </summary>
            <param name="scriptContent">Inline script content.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this script depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyle(System.String)">
            <summary>
            Requires the CSS resource with specified path.
            </summary>
            <param name="cssPath">The CSS resource virtual path path or URL.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the CSS resource with specified path.
            </summary>
            <param name="cssPath">The CSS resource virtual path path or URL.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyleInline(System.String)">
            <summary>
            Requires the inline CSS block.
            </summary>
            <param name="cssContent">CSS content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline CSS block.
            </summary>
            <param name="cssContent">CSS content.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireHtmlInline(System.String)">
            <summary>
            Requires the inline HTML injection.
            </summary>
            <param name="inlineContent">Inline injection content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline HTML injection.
            </summary>
            <param name="inlineContent">Inline injection content.</param>
            /// <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            Requires the client resource with specified properties.
            </summary>
            <param name="path">The client resource virtual path path or URL.</param>
            <param name="inlineContent">Content of the inline client resource that does not reference any path.</param>
            <param name="name">The client resource name.</param>
            <param name="resourceType">The client resource type.</param>
            <param name="dependencies">The names of other client resources that this resource depends on.</param>
            <param name="sortIndex">Sort index for this client resource within the group with the same name.</param>
            <param name="isMinified">Indicates whether the content of the client resource is minified.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(EPiServer.Framework.Web.Resources.ClientResource)">
            <summary>
            Requires the specified client resource.
            </summary>
            <param name="clientResource">The client resource.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResources.GetEmbeddedResourceUrl(System.Type,System.String)">
            <summary>
            Gets the embedded resource URL.
            </summary>
            <param name="type">The type belonging to an assembly containing embedded resource.</param>
            <param name="resourcePath">The resource path.</param>
            <returns>A string with url to embedded resource</returns>
            <remarks>This method is a workaround for getting embedded resource URLs in MVC</remarks>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceService">
            <summary>
            Performs the registrations of required client resources by calling available <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceRegister"/> instances.
            Provides the list of required client resources combined in bundles.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceService.#ctor(EPiServer.Framework.Web.Resources.IClientResourceProvider[],EPiServer.Framework.Web.Resources.IClientResourceRegister[],EPiServer.Framework.Web.Resources.IRequiredClientResourceList,EPiServer.Framework.Configuration.EPiServerFrameworkSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceService"/> class.
            </summary>
            <param name="clientResourceProviders">The client resource providers.</param>
            <param name="clientResourceRegisters">The client resource registers.</param>
            <param name="requiredResources">The list of required client resources.</param>
            <param name="configSection">The EPiServer Framework configuration section.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceService.RegisterRequiredResources(System.Web.HttpContextBase)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceService.GetClientResources(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceService.GetClientResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceService.GetRequiredResources(System.String)">
            <inheritdoc /> 
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceSettings">
            <summary>
            Required client resource settings
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.Name">
            <summary>
            Gets or sets the name of required client resource.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.Area">
            <summary>
            Gets or sets the area where required client resource should be rendered.
            </summary>
            <value>
            The rendering area.
            </value>
        </member>
        <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.ResourceTypes">
            <summary>
            Gets or sets the required client resource types.
            </summary>
            <value>
            The resource types.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceSettings"/> class. Sets the rendering area to Head.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtArea(System.String)">
            <summary>
            Requires to place client resource at specified rendering area.
            </summary>
            <param name="renderingArea">The rendering area.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtHeader">
            <summary>
            Requires to place client resource at default rendering area Header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtFooter">
            <summary>
            Requires to place client resource at default rendering area Footer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.OfTypes(System.Collections.Generic.IEnumerable{EPiServer.Framework.Web.Resources.ClientResourceType})">
            <summary>
            Requires client resources of specified types.
            Does not change settings if specified type list are null or empty colection.
            </summary>
            <param name="requiredTypes">The required types of the client resources.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.ScriptsOnly">
            <summary>
            Requires script resources only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.StylesOnly">
            <summary>
            Requires CSS resources only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.Equals(EPiServer.Framework.Web.Resources.ClientResourceSettings)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceType">
            <summary>
            Defines different types of resources
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Script">
            <summary>
            JavaScript file or inline script block
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Style">
            <summary>
            CSS file or inline style block
            </summary>
        </member>
        <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Html">
            <summary>
            Inline HTML block that should be injected on the page
            </summary>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.IClientResourceProvider">
            <summary>
            Classes implementing this interface are used to provide client resources to the 
            site
            </summary>
            <remarks>
            Besides implementing the resource provider interface providers must also be exported
            for usage by the composition container. This is typically done by the class' 
            assembly beeing configured in web.config.
            </remarks>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceProvider.GetClientResources">
            <summary>
            This method is called when the client resources are collected
            </summary>
            <returns>A list of <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/>s that this provider exposes.</returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.IClientResourceRegister">
            <summary>
            Defines methods to register required client resources for current context.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceRegister.RegisterResources(EPiServer.Framework.Web.Resources.IRequiredClientResourceList,System.Web.HttpContextBase)">
            <summary>
            Registers the required client resources for specified context.
            </summary>
            <param name="requiredResources">The list of required client resources.</param>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.IClientResourceService">
            <summary>
            Provides methods to perform registration of required client resources and get registered resources.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.RegisterRequiredResources(System.Web.HttpContextBase)">
            <summary>
            Performs the registration of the required client resources.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetRequiredResources(System.String)">
            <summary>
            Gets the required client resources for specified rendering area.
            </summary>
            <param name="renderingArea">The rendering area.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetClientResources(System.String)">
            <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider"/> in the system 
            and dynamically requested resources.
            </summary>
            <param name="name">Client resources name.</param>
            <returns>
            All available resources with specified name
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetClientResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
            <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource"/> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider"/> in the system
            and dynamically requested resources.
            </summary>
            <param name="name">Client resources name.</param>
            <param name="resourceTypes">Only get resources for these types.</param>
            <returns>
            All available resources with specified name
            </returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.IRequiredClientResourceList">
            <summary>
            Provides methods to register required client resource and get information about registered items.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(System.String)">
            <summary>
            Requires the client resource with specified name.
            </summary>
            <param name="clientResourceName">Name of the client resource.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScript(System.String)">
            <summary>
            Requires the JavaScript resource with specified path.
            </summary>
            <param name="scriptPath">The script resource virtual path path or URL.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the JavaScript resource with specified path.
            </summary>
            <param name="scriptPath">The script resource virtual path path or URL.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this script depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScriptInline(System.String)">
            <summary>
            Requires the inline JavaScript.
            </summary>
            <param name="scriptContent">Inline script content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline JavaScript.
            </summary>
            <param name="scriptContent">Inline script content.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this script depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyle(System.String)">
            <summary>
            Requires the CSS resource with specified path.
            </summary>
            <param name="cssPath">The CSS resource virtual path path or URL.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the CSS resource with specified path.
            </summary>
            <param name="cssPath">The CSS resource virtual path path or URL.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyleInline(System.String)">
            <summary>
            Requires the inline CSS block.
            </summary>
            <param name="cssContent">CSS content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline CSS block.
            </summary>
            <param name="cssContent">CSS content.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireHtmlInline(System.String)">
            <summary>
            Requires the inline HTML injection.
            </summary>
            <param name="inlineContent">Inline injection content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires the inline HTML injection.
            </summary>
            <param name="inlineContent">Inline injection content.</param>
            <param name="name">The client resource name.</param>
            <param name="dependencies">The names of other client resources that this resource depends on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            Requires the client resource with specified properties.
            </summary>
            <param name="path">The client resource virtual path path or URL.</param>
            <param name="inlineContent">Content of the inline client resource that does not reference any path.</param>
            <param name="name">The client resource name.</param>
            <param name="resourceType">The client resource type.</param>
            <param name="dependencies">The names of other client resources that this resource depends on.</param>
            <param name="sortIndex">Sort index for this client resource within the group with the same name.</param>
            <param name="isMinified">Indicates whether the content of the client resource is minified.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(EPiServer.Framework.Web.Resources.ClientResource)">
            <summary>
            Requires the specified client resource.
            </summary>
            <param name="clientResource">The client resource.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.GetRequiredResourcesSettings">
            <summary>
            Gets registered required client resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.RequiredClientResourceList">
            <summary>
            Client resource manager implementation
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.Require(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireScript(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireScriptInline(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireStyle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireStyleInline(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireHtmlInline(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.Require(EPiServer.Framework.Web.Resources.ClientResource)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.GetRequiredResourcesSettings">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.RequiredClientResourceList.GetClientResources">
            <summary>
            Gets the dynamically requested client resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Resources.ClientResourceInitialization">
            <summary>
            Client resource initializer to enable debug mode
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes debug mode for client resources
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the debug mode for client resources.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.Resources.ClientResourceInitialization.InitializeHttpEvents(System.Web.HttpApplication)">
            <summary>
            Initialize any events on <see c="System.Web.HttpApplication"/> instances created by ASP.NET
            </summary>
            <param name="application">The instance to initialize</param>
        </member>
        <member name="T:EPiServer.Framework.Web.WebControls.RequiredClientResources">
            <summary>
            Renders client resources that are required for specified area.
            </summary>
        </member>
        <member name="P:EPiServer.Framework.Web.WebControls.RequiredClientResources.RenderingArea">
            <summary>
            Gets or sets the corresponding rendering area that is used to filter required client resources that should be rendered by this control.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the control content.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.SaveControlState">
            <summary>
            Saves any server control state changes, such as RenderingArea, that have occurred since the time the page was posted back to the server.
            </summary>
            <returns>
            Returns the server control's current state. If there is no state associated with the control, this method returns null.
            </returns>
        </member>
        <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.LoadControlState(System.Object)">
            <summary>
            Restores control-state information, such as RenderingArea, from a previous page request that was saved by the <see cref="M:System.Web.UI.Control.SaveControlState"/> method.
            </summary>
            <param name="savedState">An <see cref="T:System.Object"/> that represents the control state to be restored.</param>
        </member>
        <member name="T:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute">
            <summary>
            Action filter to require client resources
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Called by the ASP.NET MVC framework before the action result executes.
            All client resource registers will be called to register resources that are required for the current context.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions">
            <summary>
            Client resource rendering extensions
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ClientResources(System.Web.UI.Page,System.String)">
            <summary>
            Renders client resources with specified name.
            </summary>
            <param name="page">The page to hook the extension on.</param>
            <param name="name">Only get resources with this name.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ClientResources(System.Web.UI.Page,System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
            <summary>
            Renders client resources with specified name and type.
            </summary>
            <param name="page">The page to hook the extension on.</param>
            <param name="name">Only get resources with this name.</param>
            <param name="resourceTypes">Only get resources for these types.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.RequiredClientResources(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Renders required client resources for specified area.
            </summary>
            <param name="html">The HTML helper.</param>
            <param name="renderingArea">The rendering area name to render required client resources for.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ScriptResource(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Returns a script tag.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="sourcePath">The path to the script resource.</param>
            <returns>A script html tag.</returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.CssLink(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Returns a CSS link tag.
            </summary>
            <param name="html">The html helper to hook the helper on.</param>
            <param name="virtualPath">The path to the css resource.</param>
            <returns>A link html tag.</returns>
        </member>
        <member name="T:EPiServer.Framework.Web.Mvc.Html.MetaExtensions">
            <summary>
            Meta tag rendering extensions
            </summary>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the metadata tag.
            </summary>
            <param name="metaAttributes">The metadata tag attributes.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.Object)">
            <summary>
            Renders the metadata tag.
            </summary>
            <param name="metaAttributes">The metadata tag attributes.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the metadata tag.
            </summary>
            <param name="name">The name attribute value.</param>
            <param name="contentAttributeValues">The content attribute values.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.String,System.Object)">
            <summary>
            Renders the metadata tag.
            </summary>
            <param name="name">The name attribute value.</param>
            <param name="contentAttributeValues">The content attribute values.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.IDirectory">
            <summary>
            Provides methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.IFile">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects
            </summary>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.IFileSystemWatcher">
            <summary>
            Interface representing System.IO.FileSystemWatcher
            </summary>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.NotifyFilter">
            <devdoc> 
               <para>
                  Gets or sets the type of changes to watch for. 
               </para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.EnableRaisingEvents">
            <devdoc>
               <para>Gets or sets a value indicating whether the component is enabled.</para>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Filter">
            <devdoc> 
               <para>Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.IncludeSubdirectories">
            <devdoc> 
               <para>
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
               </para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.InternalBufferSize">
            <devdoc>
               <para>Gets or 
                  sets the size of the internal buffer.</para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Path">
            <devdoc> 
               <para>Gets or sets the path of the directory to watch.</para>
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Site">
            <internalonly/>
            <devdoc>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.SynchronizingObject">
            <devdoc> 
               <para>
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
               </para>
            </devdoc> 
        </member>
        <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Changed">
            <devdoc> 
               <para>
                  Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> 
                  is changed.
               </para>
            </devdoc>
        </member>
        <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Created">
            <devdoc>
               <para> 
                  Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> 
                  is created.
               </para> 
            </devdoc>
        </member>
        <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Deleted">
            <devdoc>
               <para> 
                  Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/>
                  is deleted. 
               </para> 
            </devdoc>
        </member>
        <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Error">
            <devdoc>
               <para>
                  Occurs when the internal buffer overflows.
               </para> 
            </devdoc>
        </member>
        <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Renamed">
            <devdoc> 
               <para>
                  Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> 
                  is renamed.
               </para>
            </devdoc>
        </member>
        <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.BeginInit">
            <devdoc>
               <para>Notifies the object that initialization is beginning and tells it to standby.</para> 
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.EndInit">
            <devdoc> 
               <para>
                  Notifies the object that initialization is complete.
               </para>
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
            <devdoc> 
               <para>
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
               </para>
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <devdoc>
               <para>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
               </para> 
            </devdoc>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.PhysicalDirectory">
            <summary>
            Wrapper for the static class <see cref="T:System.IO.Directory"/> 
            </summary>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.PhysicalFile">
            <summary>
            Wrapper for the static class <see cref="T:System.IO.File"/> 
            </summary>
        </member>
        <member name="T:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher">
            <summary>
            Wrapper around System.IO.FileSystemWatcher
            </summary>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.NotifyFilter">
            <devdoc> 
               <para>
                  Gets or sets the type of changes to watch for. 
               </para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.EnableRaisingEvents">
            <devdoc>
               <para>Gets or sets a value indicating whether the component is enabled.</para>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Filter">
            <devdoc> 
               <para>Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.IncludeSubdirectories">
            <devdoc> 
               <para>
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
               </para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.InternalBufferSize">
            <devdoc>
               <para>Gets or 
                  sets the size of the internal buffer.</para> 
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Path">
            <devdoc> 
               <para>Gets or sets the path of the directory to watch.</para>
            </devdoc>
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Site">
            <internalonly/>
            <devdoc>
            </devdoc> 
        </member>
        <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.SynchronizingObject">
            <devdoc> 
               <para>
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
               </para>
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.BeginInit">
            <devdoc>
               <para>Notifies the object that initialization is beginning and tells it to standby.</para> 
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.EndInit">
            <devdoc> 
               <para>
                  Notifies the object that initialization is complete.
               </para>
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
            <devdoc> 
               <para>
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
               </para>
            </devdoc> 
        </member>
        <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <devdoc>
               <para>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
               </para> 
            </devdoc>
        </member>
        <member name="T:EPiServer.Async.AsyncPaginationResult`1">
            <summary>
            Result from an async paginated method.
            </summary>
            <typeparam name="T">The type of individual items in the paginated result.</typeparam>
        </member>
        <member name="M:EPiServer.Async.AsyncPaginationResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
            Creates a new instance of .Wait()
            </summary>
            <param name="pagedResult">The current paged result</param>
            <param name="totalCount">The total number of matched result</param>
        </member>
        <member name="P:EPiServer.Async.AsyncPaginationResult`1.PagedResult">
            <summary>
            The current result set in the pagination.
            </summary>
        </member>
        <member name="P:EPiServer.Async.AsyncPaginationResult`1.TotalCount">
            <summary>
            Total number of matched results.
            </summary>
        </member>
        <member name="M:EPiServer.Async.DefaultTaskExecutor.CreateWorkAction``1(System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken)">
            <summary>
            Decorates the work method to pass in cancellation token and progress and wraps the method in a try/catch to ensure that the linked token is used for the cancellation
            exception. This is required if the task should be marked as cancelled.
            </summary>
        </member>
        <member name="P:EPiServer.Async.DefaultTaskMonitor.IsTasksRunning">
            <summary>
            Used from test to determine if task are completed and persisted.
            </summary>
        </member>
        <member name="T:EPiServer.Async.TaskEventArgs">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Event arguments used in events exposed by <see cref="T:EPiServer.Async.TaskExecutor"/>. 
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskEventArgs.#ctor(EPiServer.Async.TaskInformation)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Async.TaskEventArgs"/>.
            </summary>
            <param name="information">The associated <see cref="T:EPiServer.Async.TaskInformation"/> instance.</param>
        </member>
        <member name="P:EPiServer.Async.TaskEventArgs.Task">
            <summary>
            The associated <see cref="P:EPiServer.Async.TaskEventArgs.Task"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskEventArgs.Info">
            <summary>
            The associated <see cref="T:EPiServer.Async.TaskInformation"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Async.TaskExecutor">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Manages execution of asynchronus work using <see cref="T:System.Threading.Tasks.Task"/> API. If the task is associated with a <see cref="T:EPiServer.Async.TrackingToken"/> then
            the task will be monitored by <see cref="T:EPiServer.Async.TaskMonitor"/> and the outcome/status of the task can be retrieved from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </summary>
        </member>
        <member name="E:EPiServer.Async.TaskExecutor.TaskStarting">
            <summary>
            Occurs when a new task is starting.
            </summary>
            <remarks>
            The task itself will not be started until all event handlers has been completed.
            </remarks>
        </member>
        <member name="E:EPiServer.Async.TaskExecutor.TaskStarted">
            <summary>
            Occurs when a task has started.
            </summary>
            <remarks>
            The task work is run on a separate thread to any event handlers.
            Attached event handlers will also not affect the <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted"/> event.
            </remarks>
        </member>
        <member name="E:EPiServer.Async.TaskExecutor.TaskCompleted">
            <summary>
            Occurs when a task has completed regardless of status.
            </summary>
            <remarks>
            The <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted"/> event will not be raised until all event handlers attached to either <see cref="E:EPiServer.Async.TaskExecutor.TaskStarted"/> and/or have completed.
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action)">
            <summary>
            Starts the specified work using an asynchronous task.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <returns>An activated task</returns>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action,EPiServer.Async.TrackingToken)">
            <summary>
            Starts the specified work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <returns>An activated task</returns>
            <remarks>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{``0},EPiServer.Async.TrackingToken)">
            <summary>
            Starts the specified work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1"/></returns>
            <remarks>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken})">
            <summary>
            Starts the specified cancelable work using an asynchronous task.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <returns>An activated task</returns>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},EPiServer.Async.TrackingToken)">
            <summary>
            Starts the specified cancelable work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <returns>An activated task</returns>
            <remarks>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{System.Threading.CancellationToken,``0},EPiServer.Async.TrackingToken)">
            <summary>
            Starts the specified cancelable work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1"/></returns>
            <remarks>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
            <returns>An activated task</returns>
            <remarks>
            <para>
                The <paramref name="cancellationToken"/> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)"/> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken"/> passed as an argument to the <paramref name="work"/> action.
            </para>
            <para>
                Note that a task only is marked as cancelled if the <paramref name="work"/> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},EPiServer.Async.TrackingToken,System.Threading.CancellationToken)">
            <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely and to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
            <returns>An activated task</returns>
            <remarks>
            <para>
                The <paramref name="cancellationToken"/> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)"/> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken"/> passed as an argument to the <paramref name="work"/> action.
            </para>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            <para>
                Note that a task only is marked as cancelled if the <paramref name="work"/> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{System.Threading.CancellationToken,``0},EPiServer.Async.TrackingToken,System.Threading.CancellationToken)">
            <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely and to specify if outcome should be tracked.
            </summary>
            <param name="work">The work that should be executed asynchronously.</param>
            <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
            <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1"/></returns>
            <remarks>
            <para>
                The <paramref name="cancellationToken"/> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)"/> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken"/> passed as an argument to the <paramref name="work"/> action.
            </para>
             <para>
                The <paramref name="trackingToken"/> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </para>
            <para>
                Note that a task only is marked as cancelled if the <paramref name="work"/> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)">
            <summary>
            Cancels the task with the specified identifier.
            </summary>
            <param name="taskId">The task identifier.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object if the task is still running and can be cancelled; otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.OnTaskStarting(EPiServer.Async.TaskEventArgs)">
            <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskStarting"/> event.
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.OnTaskStarted(EPiServer.Async.TaskEventArgs)">
            <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskStarted"/> event.
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:EPiServer.Async.TaskExecutor.OnTaskCompleted(EPiServer.Async.TaskEventArgs)">
            <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted"/> event.
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="T:EPiServer.Async.TaskInformation">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Contains information such as status and result (if the asynchronus job returned a result) associated with a task.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskInformation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskInformation.#ctor(System.Guid)">
            <summary>
            Constructor to create status with specific id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.IsTrackable">
            <summary>
            Indicates if the task was created with an associated <see cref="T:EPiServer.Async.TrackingToken"/>
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.Id">
            <summary>
            The unique identifier associated with the task.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.CompletedStatus">
            <summary>
            Contains the status of the task when it was completed. Before completion value is <see cref="F:System.Threading.Tasks.TaskStatus.Created"/>
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.User">
            <summary>
            The user under which the context the task was created.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.Created">
            <summary>
            Time (in UTC) for when the task was created.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.Completed">
            <summary>
            Time (in UTC) for when the task was completed.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.Exception">
            <summary>
            In case a task is faulting, this contains the exception message.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.Result">
            <summary>
            In case the asyncronus task had a return value this is the outcome of the task.
            </summary>
        </member>
        <member name="P:EPiServer.Async.TaskInformation.ResultType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> for <see cref="P:EPiServer.Async.TaskInformation.Result"/>. This is used to be able to query for result of specific type.
            </summary>
        </member>
        <member name="T:EPiServer.Async.TaskInformation`1">
            <summary>
            Contains information about a task where status is an typed instance with information specific to the task type.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskInformation`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskInformation`1.#ctor(System.Guid)">
            <summary>
            Constructor to create status with specific id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:EPiServer.Async.TaskInformation`1.Result">
            <summary>
            Contains the result from the job, given that job returned <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Async.TaskInformationStorage">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Component that manages persistance of <see cref="T:EPiServer.Async.TaskInformation"/>.
            </summary>
            <remarks>
            The implementation is not guaranteed to be thread safe, so if used from singleton instances recommendation is to access instance through usage of <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1"/>.
            </remarks>
        </member>
        <member name="M:EPiServer.Async.TaskInformationStorage.Save(EPiServer.Async.TaskInformation)">
            <summary>
            Persists a <see cref="T:EPiServer.Async.TaskInformation"/> instance.
            </summary>
            <param name="task">The <see cref="T:EPiServer.Async.TaskInformation"/> to persist.</param>
        </member>
        <member name="M:EPiServer.Async.TaskInformationStorage.Delete(System.Guid)">
            <summary>
            Deletes the <see cref="T:EPiServer.Async.TaskInformation"/> entry with specified id.
            </summary>
            <param name="taskInformationId"></param>
        </member>
        <member name="M:EPiServer.Async.TaskInformationStorage.Load(System.Guid)">
            <summary>
            Loads a persisted <see cref="T:EPiServer.Async.TaskInformation"/> instance.
            </summary>
            <param name="taskInformationId"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Async.TaskInformationStorage.List``1">
            <summary>
            Lists all <see cref="T:EPiServer.Async.TaskInformation`1"/>.
            </summary>
            <typeparam name="T">The typed argument that matches <see cref="T:EPiServer.Async.TaskInformation`1"/></typeparam>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Async.TaskInformationStorage.Tasks">
            <summary>
            Returns a queryable where Linq can be used to get a filtered result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Async.TaskMonitor">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Component that monitors task that are trackable (that is associated with a <see cref="T:EPiServer.Async.TrackingToken"/>). 
            </summary>
        </member>
        <member name="M:EPiServer.Async.TaskMonitor.GetStatus``1(EPiServer.Async.TrackingToken)">
            <summary>
            Retrieves a the specific <see cref="T:EPiServer.Async.TaskInformation`1"/> that is associated with <paramref name="trackingToken"/>.
            </summary>
            <remarks>
            The persisting of task information is done asynchronusly meaning there is no guarantee that status has been persisted when task is completed.
            </remarks>
            <typeparam name="TResult">The type of result from the task created from <see cref="T:EPiServer.Async.TaskExecutor"/>.</typeparam>
            <param name="trackingToken">The <see cref="T:EPiServer.Async.TrackingToken"/> used when creating the task.</param>
            <returns>Information and result about the task.</returns>
        </member>
        <member name="M:EPiServer.Async.TaskMonitor.GetStatus(EPiServer.Async.TrackingToken)">
            <summary>
            Retrieves a the specific <see cref="T:EPiServer.Async.TaskInformation"/> that is associated with <paramref name="trackingToken"/>.
            </summary>
            <remarks>
            The persisting of task information is done asynchronusly meaning there is no guarantee that status has been persisted when task is completed.
            </remarks>
            <param name="trackingToken">The <see cref="T:EPiServer.Async.TrackingToken"/> used when creating the task.</param>
            <returns>Information and outcome about the task.</returns>
        </member>
        <member name="M:EPiServer.Async.TaskMonitor.ListStatuses``1">
            <summary>
            Lists information about all tasks with specified result type.
            </summary>
            <typeparam name="TResult">The type of result from the task created from <see cref="T:EPiServer.Async.TaskExecutor"/>.</typeparam>
            <returns>A list of all statuses for given type.</returns>
        </member>
        <member name="M:EPiServer.Async.TaskMonitor.QueryStatuses">
            <summary>
            A queryable that can be used with Linq to get a filtered list of statuses.
            </summary>
            <returns>A Linq Queryable</returns>
        </member>
        <member name="T:EPiServer.Async.TrackingToken">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Used to define a token that will be associated with a <see cref="T:System.Threading.Tasks.Task"/>. Can be used to retrieve status about the task using <see cref="T:EPiServer.Async.TaskMonitor"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Async.TrackingToken"/> class with a new identifier.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Async.TrackingToken"/> class with a specific identifier.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:EPiServer.Async.TrackingToken.None">
             <summary>
            Returns an empty TrackingToken value. 
             </summary>
        </member>
        <member name="P:EPiServer.Async.TrackingToken.Id">
            <summary>
            The identifier for the token used to track progress.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.Equals(EPiServer.Async.TrackingToken)">
            <summary>
            Determines if <paramref name="other"/> is considered equal with this instance.
            </summary>
            <param name="other">The other <see cref="T:EPiServer.Async.TrackingToken"/> to compare with.</param>
            <returns>true if the tokens are considered equal else false.</returns>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.Equals(System.Object)">
            <summary>
            Determines if <paramref name="obj"/> is considered equal with this instance.
            </summary>
            <param name="obj">The other <see cref="T:EPiServer.Async.TrackingToken"/> to compare with.</param>
            <returns>true if the tokens are considered equal else false.</returns>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.Parse(System.String)">
            <summary>
            Parses <paramref name="value"/> to a <see cref="T:EPiServer.Async.TrackingToken"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>A tracking token</returns>
            <exception cref="T:System.ArgumentException">In case the string is not in expected format.</exception>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.TryParse(System.String,EPiServer.Async.TrackingToken@)">
            <summary>
            Tries to parses <paramref name="value"/> to a <see cref="T:EPiServer.Async.TrackingToken"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="token">The parsed token or null if <paramref name="value"/> could not be parsed.</param>
            <returns>true if <paramref name="value"/> could be parsed else false.</returns>
        </member>
        <member name="M:EPiServer.Async.TrackingToken.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Async.TrackingTokenExtensions">
            <summary>
            Extends <see cref="T:EPiServer.Async.TrackingToken"/> with convenience methods.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TrackingTokenExtensions.IsTrackable(EPiServer.Async.TrackingToken)">
            <summary>
            Determines if <paramref name="trackingToken"/> is assigned so it is trackable.
            </summary>
        </member>
        <member name="T:EPiServer.Async.TrackingTokenJsonConverter">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            A JSON converter for <see cref="T:EPiServer.Async.TrackingToken"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Async.TrackingTokenJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Async.TrackingTokenJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Async.TrackingTokenJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.CssParsing.CssParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.CssParser"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.CssParser.ParseFile(System.String)">
            <summary>
            Parses the css file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.CssParsing.CssParser.GetTokens(System.String)">
            <summary>
            Gets the tokens.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.CssParsing.CssParser.ParseText(System.String)">
            <summary>
            Parses string to return <see cref="P:EPiServer.CssParsing.CssParser.CssDocument"/>.
            </summary>
            <param name="content">The content.</param>
            <returns><see cref="P:EPiServer.CssParsing.CssParser.CssDocument"/></returns>
        </member>
        <member name="M:EPiServer.CssParsing.CssParser.ParseStream(System.IO.Stream)">
            <summary>
            Parses the streamto return <see cref="P:EPiServer.CssParsing.CssParser.CssDocument"/>.
            </summary>
            <param name="stream">The stream.</param>
            <returns><see cref="P:EPiServer.CssParsing.CssParser.CssDocument"/></returns>
        </member>
        <member name="P:EPiServer.CssParsing.CssParser.CssDocument">
            <summary>
            Gets the CSS document.
            </summary>
            <value>The CSS document.</value>
        </member>
        <member name="P:EPiServer.CssParsing.CssParser.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="T:EPiServer.CssParsing.Parser">
            <summary>
            Parse Css files
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.Parser.#ctor(EPiServer.CssParsing.Scanner,EPiServer.CssParsing.ParsingErrorsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Parser"/> class.
            </summary>
            <param name="scanner">The scanner.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:EPiServer.CssParsing.Parser.#ctor(EPiServer.CssParsing.Scanner)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Parser"/> class.
            </summary>
            <param name="scanner">The scanner.</param>
        </member>
        <member name="P:EPiServer.CssParsing.Parser.CssDocument">
            <summary>
            Gets or sets the CSS document.
            </summary>
            <value>The CSS document.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Parser.ParsingErrors">
            <summary>
            Gets or sets the parsing errors.
            </summary>
            <value>The parsing errors.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Parser.Parse">
            <summary>
            Parses a Css file into a 'CssDocument'
            </summary>
        </member>
        <member name="T:EPiServer.CssParsing.ParsingErrorsHandler">
            <summary>
            Utility for handling error strings
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.ParsingErrorsHandler"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.ParsingErrorsHandler"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:EPiServer.CssParsing.ParsingErrorsHandler.ErrorStream">
            <summary>
            Gets the error stream.
            </summary>
            <value>The error stream.</value>
        </member>
        <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.AddSyntaxError(System.Int32,System.Int32,System.String)">
            <summary>
            Add error message to the error stream
            </summary>
            <param name="line">The line where the error occured</param>
            <param name="col">The column where the error occured</param>
            <param name="message">The error message</param>
        </member>
        <member name="T:EPiServer.CssParsing.AttributeToElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.AttributeToElement.Operand">
            <summary>
            Gets or sets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="P:EPiServer.CssParsing.AttributeToElement.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:EPiServer.CssParsing.AttributeToElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:EPiServer.CssParsing.AttributeToElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.AttributeOperator">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.Equals">
            <summary>
            =
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.InList">
            <summary>
            ~=
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.Hyphenated">
            <summary>
            |=
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.EndsWith">
            <summary>
            $=
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.BeginsWith">
            <summary>
            ^=
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.AttributeOperator.Contains">
            <summary>
            *=
            </summary>
        </member>
        <member name="T:EPiServer.CssParsing.Combinator">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Combinator.ChildOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Combinator.PrecededImmediatelyBy">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Combinator.PrecededBy">
            <summary>
            
            </summary>
        </member>
        <member name="T:EPiServer.CssParsing.CssDocument">
            <summary>
            Object representing the CSS
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.CssDocument.Directives">
            <summary>
            Gets or sets the directives.
            </summary>
            <value>The directives.</value>
        </member>
        <member name="P:EPiServer.CssParsing.CssDocument.RuleSets">
            <summary>
            Gets rule sets
            </summary>
            <value></value>
        </member>
        <member name="M:EPiServer.CssParsing.CssDocument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.Declaration">
            <summary>Object representing single property inside style</summary>
        </member>
        <member name="P:EPiServer.CssParsing.Declaration.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Declaration.Important">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.CssParsing.Declaration"/> is important.
            </summary>
            <value><c>true</c> if important; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Declaration.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Declaration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.Directive">
            <summary>
            Object representing CSS directive
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.Directive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Directive"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.DirectiveType">
            <summary>
            Gets or sets the type of the directive.
            </summary>
            <value>The type of the directive.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.Expression">
            <summary></summary>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.Mediums">
            <summary>
            Gets or sets the mediums.
            </summary>
            <value>The mediums.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.Directives">
            <summary>
            Gets or sets the directives.
            </summary>
            <value>The directives.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.RuleSets">
            <summary>
            Gets rule sets
            </summary>
            <value></value>
        </member>
        <member name="P:EPiServer.CssParsing.Directive.Declarations">
            <summary>
            Gets declarations 
            </summary>
            <value></value>
        </member>
        <member name="M:EPiServer.CssParsing.Directive.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.CssParsing.Directive.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="nesting">The nesting.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.DirectiveType">
            <summary>
            Types of CSS directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.Media">
            <summary>
            Media directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.Import">
            <summary>
            Import directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.CharSet">
            <summary>
            CharSet directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.Page">
            <summary>
            Page directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.FontFace">
            <summary>
            FontFace directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.Namespace">
            <summary>
            Namespace directive
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.DirectiveType.Other">
            <summary>
            Non standard directive
            </summary>
        </member>
        <member name="T:EPiServer.CssParsing.Expression">
            <summary>
            Object representing CSS expression
            </summary>
        </member>
        <member name="M:EPiServer.CssParsing.Expression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Expression"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.Expression.Terms">
            <summary>
            Gets or sets the terms.
            </summary>
            <value>The terms.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Expression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.CssFunction">
            <summary>
            Object representing CSS function
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.CssFunction.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.CssParsing.CssFunction.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:EPiServer.CssParsing.CssFunction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.IDeclarationContainer">
            <summary></summary>
        </member>
        <member name="P:EPiServer.CssParsing.IDeclarationContainer.Declarations">
            <summary></summary>
        </member>
        <member name="T:EPiServer.CssParsing.IRuleSetContainer">
            <summary></summary>
        </member>
        <member name="P:EPiServer.CssParsing.IRuleSetContainer.RuleSets">
            <summary></summary>
        </member>
        <member name="T:EPiServer.CssParsing.Medium">
            <summary>
            Enumerable specifying to which medium CSS can be applied
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.All">
            <summary>
            All mediums
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Aural">
            <summary>
            Aural Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Braille">
            <summary>
            Braille Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Embossed">
            <summary>
            Embossed Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Handheld">
            <summary>
            Handheld Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Print">
            <summary>
            Print Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Projection">
            <summary>
            Projection Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Screen">
            <summary>
            Screen Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.Tty">
            <summary>
            Tty Medium
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Medium.TV">
            <summary>
            TV Medium
            </summary>
        </member>
        <member name="T:EPiServer.CssParsing.RuleSet">
            <summary>
            Object that representing a single style
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.RuleSet.Selectors">
            <summary>
            Gets the CSS selectors for current style.
            </summary>
            <value>The selectors.</value>
        </member>
        <member name="P:EPiServer.CssParsing.RuleSet.Declarations">
            <summary>
            gets declarations (content inside brackets) for the current CSS style
            </summary>
            <value></value>
        </member>
        <member name="M:EPiServer.CssParsing.RuleSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.CssParsing.RuleSet.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="nesting">The nesting level.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.Selector">
            <summary>
            Object representing CSS selector
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.Selector.SimpleSelectors">
            <summary>
            Gets the simple selectors.
            </summary>
            <value>The simple selectors.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Selector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.SimpleSelector">
            <summary>
            Simple representation of a selector
            </summary>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Combinator">
            <summary>
            Gets or sets the combinator.
            </summary>
            <value>The combinator.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.ElementName">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>The name of the element.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>The class.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Pseudo">
            <summary>
            Gets or sets the pseudo.
            </summary>
            <value>The pseudo.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Function">
            <summary>
            Gets or sets the function.
            </summary>
            <value>The function.</value>
        </member>
        <member name="P:EPiServer.CssParsing.SimpleSelector.Child">
            <summary></summary>
        </member>
        <member name="M:EPiServer.CssParsing.SimpleSelector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:EPiServer.CssParsing.Term">
            <summary>object representing part of CSS property's value</summary>
        </member>
        <member name="P:EPiServer.CssParsing.Term.Separator">
            <summary>
            Gets or sets the separator.
            </summary>
            <value>The separator.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Term.Sign">
            <summary>
            Gets or sets the sign.
            </summary>
            <value>The sign.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Term.TermType">
            <summary>
            Gets or sets the type of the term.
            </summary>
            <value>The type of the term.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Term.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Term.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:EPiServer.CssParsing.Term.Function">
            <summary>
            Gets or sets the function.
            </summary>
            <value>The function.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Term.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:EPiServer.CssParsing.Term.IsColor">
            <summary>
            Gets a value indicating whether this instance is color.
            </summary>
            <value><c>true</c> if this instance is color; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:EPiServer.CssParsing.Term.ToColor">
            <summary>
            Translates current term to the color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.CssParsing.TermType">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.Number">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.Function">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.String">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.Url">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.Unicode">
            <summary></summary>
        </member>
        <member name="F:EPiServer.CssParsing.TermType.Hex">
            <summary></summary>
        </member>
        <member name="T:EPiServer.CssParsing.Unit">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Percent">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.EM">
            <summary>the font size of the element (or, to the parent element's font size if set on the 'font-size' property)</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.EX">
            <summary>the x-height of the element's font</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.PX">
            <summary>viewing device</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.GD">
            <summary>the grid defined by 'layout-grid' described in the CSS3 Text module [CSS3TEXT]</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Rem">
            <summary>the font size of the root element</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.VW">
            <summary>the viewport's width</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.VH">
            <summary>the viewport's height</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.VM">
            <summary>the viewport's height or width, whichever is smaller of the two</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.CH">
            <summary>The width of the "0" (ZERO, U+0030) glyph found in the font for the font size used to render. If the "0" glyph is not found in the font, the average character width may be used. How is the "average character width" found?</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.MM">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.CM">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.In">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.PT">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.PC">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Deg">
            <summary>degrees</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Grad">
            <summary>grads</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Rad">
            <summary>radians</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Turn">
            <summary>turns</summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.MS">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.HZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.CssParsing.Unit.Khz">
            <summary>
            
            </summary>
        </member>
        <member name="T:EPiServer.DataAnnotations.IgnoreAttribute">
            <summary>
            When applied to the property of a model type, specifies that the property should be ignored
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.AttributeCollection">
            <summary>
            A collection of HTML name/value attributes.
            </summary>
            <remarks>
            Note that a name may appear multiple times.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.AttributeCollection"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:EPiServer.HtmlParsing.AttributeFragment"/> at the specified index.
            </summary>
            <value>The attribute fragment.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:EPiServer.HtmlParsing.AttributeFragment"/> with the specified key.
            </summary>
            <value>The attribute fragment.</value>
            <remarks>
            <para>
            The key matching is done in a case-insensitive manner.
            </para>
            <para>
            Since an attribute name may appear multiple times, this property will return the first instance. In order to access all
            instances with the given key, you need to iterate thru the collection and check each entry.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attribute at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.Remove(System.String)">
            <summary>
            Removes the attribute with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>True if an attribute was removed, false otherwise.</returns>
            <remarks>
            <para>
            The key matching is done in a case-insensitive manner.
            </para>
            <para>
            If there are more than one attribute with the specified key, only the first attribute is removed.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.RemoveAll(System.String)">
            <summary>
            Removes all attributes with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.Add(EPiServer.HtmlParsing.AttributeFragment)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.Contains(EPiServer.HtmlParsing.AttributeFragment)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.CopyTo(EPiServer.HtmlParsing.AttributeFragment[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:EPiServer.HtmlParsing.AttributeFragment">
            <summary>
            An attribute in a HTML element
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.AttributeFragment"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeFragment.UnquotedValue">
            <summary>
            Gets or sets the unquoted value of the attribute.
            </summary>
            <value>The unquoted value.</value>
            <remarks>
            Both single quote (') and double quote (") are considered as valid quote characters.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeFragment.QuoteChar">
            <summary>
            Gets or sets the quote character for the Value.
            </summary>
            <value>The quote char.</value>
            <remarks>
            Both single quote (') and double quote (") are considered as valid quote characters.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.AttributeFragment.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
            <value>The value.</value>
            <remarks>
            Returns the attribute value exactly as it was parsed, with quote characters etc.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the current instance to a TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.AttributeFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses a HTML attribute from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.CDataFragment">
            <summary>
            A CDATA fragment in a HTML stream.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.CDataFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.CDataFragment"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.CDataFragment.Name">
            <summary>
            Gets the name of the fragment, which is always "[CDATA[".
            </summary>
            <value>The name.</value>
            <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.CDataFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.CDataFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.CommentFragment">
            <summary>
            Represents a HTML comment.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.CommentFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.CommentFragment"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.CommentFragment.Name">
            <summary>
            Gets the name of the fragment, which is always --
            </summary>
            <value>The name.</value>
            <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.CommentFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.CommentFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.DefaultFilterRules">
            <summary>
            Concrete implementation of IFilterRules with conservative rules for creating safe HTML code.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor(System.Func{EPiServer.HtmlParsing.ElementToken,System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.AttributeToken}})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules"/> class.
            </summary>
            <param name="whiteList">The white list.</param>
            <remarks>
            The whiteList function will get called for each legal value of ElementToken (as defined by the enumeration) and you are expected to return null
            if the element should be regarded as unsafe, or return an IEnumerable of AttributeToken indicating which attributes that should be allowed for
            the requested element.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor(System.Func{EPiServer.HtmlParsing.ElementToken,System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.AttributeToken}},EPiServer.HtmlParsing.DefaultFilterRules)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules"/> class.
            </summary>
            <param name="whiteList">The white list.</param>
            <param name="originalRules">The original rules.</param>
            <remarks>
            Basically the same as the constructor that just takes the whiteList parameter, the change here is that we will inherit the whitelist
            from originalRules and simply append any additional information created by the whiteList function.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Determine the level of filtering to apply to this element.
            </summary>
            <param name="context">The filtering context.</param>
            <returns>
            An ElementFilterAction enumeration value.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
            <summary>
            Determines whether the text fragment should be regarded as safe in the current context.
            </summary>
            <param name="context">The context.</param>
            <param name="content">The content.</param>
            <returns>
            	<c>true</c> if the content is safe; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The HTML filter will call this method when the fragment is a Special Text Fragment, i e the content of a style or script element. If
            the text fragment is determined to be unsafe (this method returns false) then the surrounding start and end elements will
            unconditionally be removed, ignoring the return value from KeepNakedElement.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
            <summary>
            Determines whether the attribute is safe in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>
            	<c>true</c> if the attribute is safe; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The attribute value will be delivered with quotes removed, i e you do not need to do special quote handling of the attribute value.
            Note that it is still possible for the value to contain embedded quotes but they are part of the actual value.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Determine whether to keep an element even if it contains no attributes.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the element should be kept even when it contains no attributes; otherwise, <c>false</c>.
            </returns>
            <remarks>
            	<para>
            The default behavior should be to return true and special-case the false handling.
            </para>
            	<para>
            Typical scenario is an img element where the src attribute has been removed due to suspected XSS attack. An img without an
            image to show should be removed completely from the resulting HTML.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.PublicDocumentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Unknown">
            <summary>
            A DOCTYPE directive with name that is not HTML.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html">
            <summary>
            A DOCTYPE directive with name HTML and PUBLIC which does not match anything below.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html4">
            <summary>
            HTML 4 DOCTYPE detected (&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; 
            or something that starts with &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4... )
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html5">
            <summary>
            HTML 5 DOCTYPE detected (&lt;!DOCTYPE html&gt;)
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Strict">
            <summary>
            XHTML 1.0 Strict DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;)
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Transitional">
            <summary>
            XHTML 1.0 Transitional DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;).
            This value is also returned for any XHTML-like DOCTYPE that does not match any of the other DOCTYPES, i e it acts as an XHTML DOCTYPE fallback.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Frameset">
            <summary>
            XHTML 1.0 Frameset DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;)
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml11">
            <summary>
            XHTML 1.1 DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;)
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.DocumentTypeFragment">
            <summary>
            A DOCTYPE directive in a HTML stream
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DocumentTypeFragment"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.Name">
            <summary>
            Gets the name of the fragment which is always DOCTYPE.
            </summary>
            <value>The name.</value>
            <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.DocumentTypeName">
            <summary>
            Gets or sets the name of the DOCTYPE.
            </summary>
            <value>The name of the document type.</value>
            <remarks>
            Should be "HTML" for almost all cases, otherwise the DOCTYPE directive indicates that it is not actually HTML that
            we are parsing.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.Public">
            <summary>
            Gets or sets the value of the PUBLIC attribute.
            </summary>
            <value>The public attribute value.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.System">
            <summary>
            Gets or sets the value of the system attribute.
            </summary>
            <value>The system attribute value.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.IsHtml">
            <summary>
            Gets a value indicating whether this instance is a HTML DOCTYPE directive.
            </summary>
            <value><c>true</c> if this instance is HTML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.PublicDocType">
            <summary>
            Gets the type of the content as defined by the DOCTYPE directive.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.ElementFragment">
            <summary>
            Represents a HTML element.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.ElementFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.ElementFragment"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.ElementFragment.Attributes">
            <summary>
            Gets the attributes for this HTML element.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.ElementFragment.HasAttributes">
            <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
            <value>
            	<c>true</c> if this instance has attributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.HtmlParsing.ElementFragment.CallbackOnEndElement">
            <summary>
            Gets or sets the callback to perform when a matching End element is found.
            </summary>
            <value>The <see cref="T:System.Action"/> callback to perform.</value>
            <remarks>
            <para>
            By setting this property to an Action when a <see cref="T:EPiServer.HtmlParsing.ElementFragment"/> is returned by the enumerator, the Action will
            be invoked when the matching <see cref="T:EPiServer.HtmlParsing.EndElementFragment"/> is returned.
            </para>
            <para>
            Important! This setting is mirrored by the CallbackOnEndElement property on HtmlStreamReader, but it is recommended to use the 
            property on ElementFragment since it is much more consistent with the data flow.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.ElementFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Outputs this HTML element to the writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.ElementFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses a HTML element.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            The initial '&lt;' has already been consumed and parsing continues until the entire element has been properly parsed.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.ElementToken">
            <summary>
            The various HTML elements that are directly supported by the parser.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.AttributeToken">
            <summary>
            The various HTML attributes that are directly supported by the parser.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.EndElementFragment">
            <summary>
            Represents a HTML end element.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.EndElementFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.EndElementFragment"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.EndElementFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.EndElementFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.FilterContext">
            <summary>
            The context passed to HTML filtering methods.
            </summary>
        </member>
        <member name="P:EPiServer.HtmlParsing.FilterContext.CurrentElementName">
            <summary>
            Gets or sets the name of the current element.
            </summary>
            <value>The name of the current element.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.FilterContext.Token">
            <summary>
            Gets or sets the Token corresponding to the current element.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:EPiServer.HtmlParsing.FragmentCreator">
            <summary>
            Concrete implementation of the IFragmentCreator interface.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.FragmentCreator.CreateHtmlFragment(EPiServer.HtmlParsing.HtmlFragmentType)">
            <summary>
            Factory method for creating the specified HTML fragment type.
            </summary>
            <param name="fragmentType">Type of the fragment.</param>
            <returns>
            A HTML fragment that can be used to hold information about the indicated fragment type.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.FragmentCreator.CreateHtmlFragmentFromStream(EPiServer.HtmlParsing.IHtmlSource)">
            <summary>
            Creates a HTML fragment from stream.
            </summary>
            <param name="source">The source for the HTML stream.</param>
            <returns>
            A HTML fragment that can be used to hold information about the indicated fragment type.
            </returns>
            <remarks>
            	<para>
            This method will scan for and create any HTML fragment type except TextFragment. I e this method should be
            called after a '&lt;' has been detected in the HTML source.
            </para>
            	<para>
            To fully populate the returned HtmlFragment yuo should call the Parse method on the returned object.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.HtmlFilter">
            <summary>
            Simple HTML sanitizer to remove unsafe constructs.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.ParserOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.IFilterRules)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter"/> class.
            </summary>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.ParserOptions,EPiServer.HtmlParsing.IFilterRules)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFilter.FilterHtml(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Filters the HTML from input and writes it to the output.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <remarks>
            The filtering is controlled by the <see cref="T:EPiServer.HtmlParsing.IFilterRules"/> instance passed to the constructor (or by <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules"/> if not explicitly defined).
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.HtmlFragmentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Element">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.EndElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.CData">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.ProcessingInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Comment">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.DocumentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.SpecialInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.ImplicitCData">
            <summary>
            
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.HtmlFragment">
            <summary>
            Abstract base class for all HTML fragment types.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFragment.#ctor(EPiServer.HtmlParsing.HtmlFragmentType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFragment"/> class.
            </summary>
            <param name="fragmentType">Type of the fragment.</param>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlFragment.FragmentType">
            <summary>
            Gets or sets the type of the fragment.
            </summary>
            <value>The type of the fragment.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlFragment.Name">
            <summary>
            Gets or sets the name of the fragment.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlFragment.Value">
            <summary>
            Gets or sets the value of the fragment.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFragment.NameEquals(System.String)">
            <summary>
            Case-insensitive comparison of the attribute name.
            </summary>
            <param name="name">The name.</param>
            <returns>True if the given parameter is equal to th eattribute name, False otherwise.</returns>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlFragment.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <remarks>
            The exact meaning of "Empty" varies slightly between different fragment types. See the class description for details.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlParserContext.#ctor(EPiServer.HtmlParsing.IHtmlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlParserContext"/> class.
            </summary>
            <param name="source">The source of the HTML stream to parse.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.HtmlStreamReader">
            <summary>
            A streaming HTML parser implementation that will enumerate the HTML fragments in the stream.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="reader">The reader that contains the HTML source.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.IO.TextReader,EPiServer.HtmlParsing.ParserOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="reader">The reader that contains the HTML source.</param>
            <param name="options">The options that should be enabled when parsing HTML.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="source">The HTML source.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.String,EPiServer.HtmlParsing.ParserOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="source">The HTML source.</param>
            <param name="options">The options that should be enabled when parsing HTML.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(EPiServer.HtmlParsing.IHtmlSource,EPiServer.HtmlParsing.ParserOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="source">The HTML source provider.</param>
            <param name="options">The options that should be enabled when parsing HTML.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> class.
            </summary>
            <param name="context">The context that this instance of HtmlStreamReader uses to parse HTML.</param>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlStreamReader.Context">
            <summary>
            Gets or sets the context for the HTML parser.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.HtmlStreamReader.CallbackOnEndElement">
            <summary>
            Gets or sets the callback to perform when a matching End element is found.
            </summary>
            <value>The <see cref="T:System.Action"/> callback to perform.</value>
            <remarks>
            Important! This property is no longer supported. Use the CallbackOnEndElement property on ElementFragment instead. 
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.ModifiedFragments(System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.HtmlFragment})">
            <summary>
            Modifies the fragment sequence.
            </summary>
            <param name="fragments">The fragments.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the parsed HTML fragments.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <remarks>
            Will simply delegate to the generic version of GetEnumerator.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.ElementFilterAction">
            <summary>
            The various actions that the HtmlFilter function can request.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ElementFilterAction.KeepElementAndContent">
            <summary>
             Keep the element and content, just continue with attribute fixup
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ElementFilterAction.KeepContent">
            <summary>
             Remove the element and corresponding end element, but continue with contents of element.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ElementFilterAction.Remove">
            <summary>
            Remove the element and all content
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.IFilterRules">
            <summary>
            Interface that defines the rules for HTML filtering
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Determine the level of filtering to apply to this element.
            </summary>
            <param name="context">The filtering context.</param>
            <returns>An ElementFilterAction enumeration value.</returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
            <summary>
            Determines whether the text fragment should be regarded as safe in the current context.
            </summary>
            <param name="context">The context.</param>
            <param name="content">The content.</param>
            <returns>
            	<c>true</c> if the content is safe; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The HTML filter will call this method when the fragment is a Special Text Fragment, i e the content of a style or script element. If
            the text fragment is determined to be unsafe (this method returns false) then the surrounding start and end elements will 
            unconditionally be removed, ignoring the return value from KeepNakedElement.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
            <summary>
            Determines whether the attribute is safe in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>
            	<c>true</c> if the attribute is safe; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The attribute value will be delivered with quotes removed, i e you do not need to do special quote handling of the attribute value. 
            Note that it is still possible for the value to contain embedded quotes but they are part of the actual value.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Determine whether to keep an element even if it contains no attributes.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the element should be kept even when it contains no attributes; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            The default behavior should be to return true and special-case the false handling.
            </para>
            <para>
            Typical scenario is an img element where the src attribute has been removed due to suspected XSS attack. An img without an 
            image to show should be removed completely from the resulting HTML.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.IFragmentCreator">
            <summary>
            Interface defining the basic handler for HTML fragment creation.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFragmentCreator.CreateHtmlFragmentFromStream(EPiServer.HtmlParsing.IHtmlSource)">
            <summary>
            Creates a HTML fragment from stream.
            </summary>
            <param name="source">The source for the HTML stream.</param>
            <returns>A HTML fragment that can be used to hold information about the indicated fragment type.</returns>
            <remarks>
            <para>
            This method will scan for and create any HTML fragment type except TextFragment. I e this method should be
            called after a '&lt;' has been detected in the HTML source.
            </para>
            <para>
            To fully populate the returned HtmlFragment yuo should call the Parse method on the returned object.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IFragmentCreator.CreateHtmlFragment(EPiServer.HtmlParsing.HtmlFragmentType)">
            <summary>
            Factory method for creating the specified HTML fragment type.
            </summary>
            <param name="fragmentType">Type of the fragment.</param>
            <returns>A HTML fragment that can be used to hold information about the indicated fragment type.</returns>
        </member>
        <member name="T:EPiServer.HtmlParsing.CaseFolding">
            <summary>
            Defines the various case-folding options that the <see cref="T:EPiServer.HtmlParsing.IHtmlParserContext"/> supports.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.CaseFolding.None">
            <summary>
            Leave tag name casing as-is.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.CaseFolding.ToUpper">
            <summary>
            Convert all tag names to upper case.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.CaseFolding.ToLower">
            <summary>
            Convert all tag names to lower case.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.IHtmlParserContext">
            <summary>
            The interface that connects the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader"/> with the HTML source to be parsed.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.NextFragment">
            <summary>
            Gets the next HTML fragment from the HTML source stream.
            </summary>
            <returns>A HtmlFragment that represents the next piece of information.</returns>
        </member>
        <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.Options">
            <summary>
            Gets or sets the set of options that controls the parser behavior.
            </summary>
            <value>The options.</value>
            <remarks>
            You should not change the value of Options in the middle of an enumeration as this may cause unexpected results.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.CaseFolding">
            <summary>
            Gets the case folding.
            </summary>
            <value>The case folding.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.SpecialTextFragment">
            <summary>
            Gets or sets state indicating that the next fragment should be treated as an implicit CDATA fragment.
            </summary>
            <value>The special text fragment element name.</value>
            <remarks>
            <para>
            Used to handle &lt;style&gt; and &lt;script&gt; elements that requires the content between start and end elements
            to be treated as implicit CDATA. This is done to avoid problems with parsing characters that are perfectly legal in
            script or CSS but may look like HTML elements. 
            </para>
            <para>
            Note that the range of elements to handle are defined by the SetSpecialName method. Override that implementation to
            expand or reduce the range of elements to handle in this way.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.SetSpecialName(System.String)">
            <summary>
            Sets the name of the special.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether the specified character is white space.
            </summary>
            <param name="character">The character.</param>
            <returns>
            	<c>true</c> if the specified character is white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetBuilder">
            <summary>
            Gets the shared StringBuilder instance.
            </summary>
            <returns>An empty StringBuilder instance.</returns>
            <remarks>
            This method helps reduce the numer of objects to create when parsing a large HTML stream by allowing the reuse of
            a single StringBuilder instance across the entire run.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetRunningComparer(System.String)">
            <summary>
            Gets the running comparer matching the given string.
            </summary>
            <param name="match">The string that the comparer will serach for.</param>
            <returns>An initialized instance of a RunningComparer.</returns>
            <remarks>
            This method helps reduce the numer of objects to create when parsing a large HTML stream by allowing the reuse of
            RunningComparer instances across the entire run.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetToken(System.String,System.Int32@)">
            <summary>
            Gets the token.
            </summary>
            <param name="terminators">The terminators.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetString(System.String,System.String@)">
            <summary>
            Tries to get a string that may be quoted or unquoted.
            </summary>
            <param name="terminators">A set of characters that will end the parsing.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Will ignore leading whitespace characters. A quoted string is defined as starting with a single quote (') or a
            double quote (").
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetUnquotedString(System.String,System.String@)">
            <summary>
            Tries to get a string that must be unquoted.
            </summary>
            <param name="terminators">A set of characters that will end the parsing.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Will ignore leading whitespace characters. Since the string must be unquoted, single quote (') and double quote (")
            are implicitly added to the terminators.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetQuotedString(System.String@)">
            <summary>
            Tries to get a string that must be quoted.
            </summary>
            <param name="quotedString">the quoted string.</param>
            <returns>
            	<c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Will ignore leading whitespace characters.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.SkipWhiteSpace">
            <summary>
            Skips white space in the HTML source stream.
            </summary>
            <returns>
            	<c>true</c> if at least one white space was found and skipped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.HtmlParsing.ContextExtensions">
            <summary>
            Extension methods for IHtmlParserContext 
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.ContextExtensions.OptionEnabled(EPiServer.HtmlParsing.IHtmlParserContext,EPiServer.HtmlParsing.ParserOptions)">
            <summary>
            Determines if the specified option is enabled.
            </summary>
            <param name="context">The context to check the option for.</param>
            <param name="option">The parser option.</param>
            <returns>
            	<c>true</c> if the specified option is enabled; otherwise, <c>false</c>.
            </returns>
            <remarks>
            If you pass inmultiple ParserOption flags, this method will return True if at least one is set.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.IHtmlSource">
            <summary>
            The interface for reading from a HTML source stream.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlSource.Read">
            <summary>
            Reads the next character from the source.
            </summary>
            <returns>The next character. If End-Of-Stream reached, returns 0xffff</returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlSource.Peek">
            <summary>
            Peeks at the next character from the source.
            </summary>
            <returns>The next character. If End-Of-Stream reached, returns 0xffff</returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.IHtmlSource.Pushback(System.Char)">
            <summary>
            Push back the specified character.
            </summary>
            <param name="character">The character.</param>
            <remarks>
            The pushback supports at least 64 characters in the pushback buffer.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.ImplicitCDataFragment">
            <summary>
            Represents an implicit CDATA fragment, such as the text in a &lt;script&gt; or &lt;style&gt; tag.
            </summary>
            <remarks>
            <para>
            The text in style and script should be parsed "as-is" until we find a closing style/script tag and completely ignore anything else that
            may appear within the text. This is very similar to how we would treat an explicit CDATA appearing within a style/script tag.
            </para>
            <para>
            Note that an ImplicitCDataFragment is actually seen as a TextFragment - the HtmlFragmentType will be set to TextFragment. The only 
            difference between a TextFragment and an ImplicitCDataFragment is the actual parsing.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.ImplicitCDataFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.ParserOptions">
            <summary>
            Controls the behavior of the HtmlStreamParser by configuring specific features.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.None">
            <summary>
            The resulting fragments will be as close as possible to the original input stream.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.TagNamesToLower">
            <summary>
            Set this option to automatically fold element names to lower case.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.TagNamesToUpper">
            <summary>
            Set this option to automatically fold element names to upper case.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceEmptyContentModel">
            <summary>
            Set this option to enforce empty elements when content model for element is EMPTY.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceDocumentStructure">
            <summary>
            Set this option to indicate that you want the parser to correct unbalanced elements.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceElementSemantics">
            <summary>
            Set this option to let HTML parser enforce HTML element semantics, for example not allowing block elements within a p element. Note - This is not yet implemented.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.ObeyDocumentTypeDirective">
            <summary>
            Set this option to dynamically set the parser options based on the DOCTYPE directive in the HTML stream, if it exists.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.TrimEmptyElements">
            <summary>
            Set this option to automatically remove empty elements from the HTML stream that do not effect visual presentation.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.EnableCallbackOnEndElement">
            <summary>
            Set this option to enable callbacks when an end element is found. The callback is set on the CallbackOnEndElement property when the start element is found.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.XhtmlOptions">
            <summary>
            Option set that will produce modern HTML that is basically XHTML compliant.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.HtmlOptions">
            <summary>
            Option set that will allow "old style" HTML to be generated (unbalanced elements etc).
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.DefaultOptions">
            <summary>
            The default set of options, will create modern HTML that is basically XHTML compliant.
            </summary>
        </member>
        <member name="F:EPiServer.HtmlParsing.ParserOptions.SimpleEnumeratorMask">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.ProcessingInstructionFragment">
            <summary>
            Represents a Processing Instruction.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.ProcessingInstructionFragment"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.RunningComparer">
            <summary>
            Specialized string comparison class used to find a string match in a continous stream of characters.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.RunningComparer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.RunningComparer"/> class.
            </summary>
            <param name="match">The string to look for in the character-by-character calls to IsMatch.</param>
        </member>
        <member name="P:EPiServer.HtmlParsing.RunningComparer.MatchLength">
            <summary>
            Gets the length of the match.
            </summary>
            <value>The length of the match.</value>
        </member>
        <member name="P:EPiServer.HtmlParsing.RunningComparer.Match">
            <summary>
            Gets the match.
            </summary>
            <value>The match.</value>
        </member>
        <member name="M:EPiServer.HtmlParsing.RunningComparer.IsMatch(System.Char)">
            <summary>
            Determines whether the specified character completes a match with Match.
            </summary>
            <param name="character">The character.</param>
            <returns>
            	<c>true</c> if the specified character completes the match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.RunningComparer.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.SpecialInstructionFragment">
            <summary>
            Represents a HTML fragment that has a leading &lt;! character sequence, but is not a comment/DOCTYPE/CDATA.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.SpecialInstructionFragment"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.StringNode`1">
            <summary>
            A node for the string tokenizer tree.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.StringNode`1"/> class.
            </summary>
            <remarks>
            Only used to create the root node.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringNode`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.StringNode`1"/> class.
            </summary>
            <param name="token">The token.</param>
            <param name="name">The name.</param>
            <remarks>
            Used to create all non-root nodes.
            </remarks>
        </member>
        <member name="P:EPiServer.HtmlParsing.StringNode`1.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringNode`1.MakeReadOnly">
            <summary>
            Makes this instance read-only.
            </summary>
            <remarks>
            In addition to making the StringNode tree immutable, it also sets up the lookup indices for quick token lookup.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.StringSource">
            <summary>
            Concrete implementation of the IHtmlSource interface for pulling HTML from a string.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.StringSource"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringSource.Read">
            <summary>
            Reads the next character from the source.
            </summary>
            <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringSource.Peek">
            <summary>
            Peeks at the next character from the source.
            </summary>
            <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.StringSource.Pushback(System.Char)">
            <summary>
            Push back the specified character.
            </summary>
            <param name="character">The character.</param>
            <remarks>
            This implementatino will ignore the actual character value and simply back up to the previous character in the string.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.StringToken`1">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.StringToken`1.TokenResult">
            <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:EPiServer.HtmlParsing.StripHtmlFilterRules">
            <summary>
            Strips all html from filtered input.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.StripHtmlFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Will keep content for elements except script or style elements.
            </summary>
            <param name="context">The filtering context.</param>
            <returns>
            If <paramref name="context"/> is anything except script or style <see cref="F:EPiServer.HtmlParsing.ElementFilterAction.KeepContent"/>;
            otherwise <see cref="F:EPiServer.HtmlParsing.ElementFilterAction.Remove"/>.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.StripHtmlFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
            <summary>
            No textfragment is safe.
            </summary>
            <param name="context">The filtering context.</param>
            <param name="content">The content.</param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.StripHtmlFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
            <summary>
            No attribute is safe.
            </summary>
            <param name="context">The filtering context.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.StripHtmlFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
            <summary>
            Never keep naked element.
            </summary>
            <param name="context">The filtering context.</param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.HtmlParsing.TextFragment">
            <summary>
            Represents a text node in a HTML stream.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.TextFragment"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextFragment.ToWriter(System.IO.TextWriter)">
            <summary>
            Writes the fragment to the given TextWriter.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the fragment from the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.HtmlParsing.TextReaderSource">
            <summary>
            Concrete implementation of the IHtmlSource interface for pulling HTML from a TextReader.
            </summary>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextReaderSource.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.TextReaderSource"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextReaderSource.Read">
            <summary>
            Reads the next character from the source.
            </summary>
            <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextReaderSource.Peek">
            <summary>
            Peeks at the next character from the source.
            </summary>
            <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
        </member>
        <member name="M:EPiServer.HtmlParsing.TextReaderSource.Pushback(System.Char)">
            <summary>
            Push back the specified character.
            </summary>
            <param name="character">The character.</param>
            <remarks>
            The pushback supports at least 64 characters in the pushback buffer.
            </remarks>
        </member>
        <member name="T:EPiServer.HtmlParsing.TokenFragmentBase`1">
            <summary>
            Abstract class for representing HTML fragments that can have token representation of the fragment name.
            </summary>
            <typeparam name="T">An enum that lists the valid names for the fragment.</typeparam>
            <remarks>
            Used for ElementFragment and AttributeFragment to avoid expensive string comparisons, allowing element identification
            with a simple enum value comparison.
            </remarks>
        </member>
        <member name="M:EPiServer.HtmlParsing.TokenFragmentBase`1.ParseNameToken(System.String,EPiServer.HtmlParsing.IHtmlParserContext)">
            <summary>
            Parses the name and sets the Token property.
            </summary>
            <param name="terminators">The terminators.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Logging.ILogger">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Describes an object that can be used to write log messages through.
            </summary>
            <preliminary />
        </member>
        <member name="M:EPiServer.Logging.ILogger.IsEnabled(EPiServer.Logging.Level)">
            <summary>
            Determines whether logging at the specified level is enabled.
            </summary>
            <param name="level">The level to check.</param>
            <returns><c>true</c> if logging on the provided level is enabled; otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Logging.ILogger.Log``2(EPiServer.Logging.Level,``0,``1,System.Func{``0,``1,System.String},System.Type)">
            <summary>
            Logs the provided <paramref name="state" /> with the specified level.
            </summary>
            <typeparam name="TState">The type of the state object.</typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="level">The criticality level of the log message.</param>
            <param name="state">The state that should be logged.</param>
            <param name="exception">The exception that should be logged.</param>
            <param name="messageFormatter">The message formatter used to write the state to the log provider.</param>
            <param name="boundaryType">The type at the boundary of the logging framework facing the code using the logging.</param>
        </member>
        <member name="T:EPiServer.Logging.ILoggerFactory">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Represents a factory that can be used to create new <see cref="T:EPiServer.Logging.ILogger"/> instances.
            </summary>
            <remarks>
            If implemented, register through <see cref="M:LogManager.Instance.AddProvider"/> to activate.
            </remarks>
            <preliminary />
        </member>
        <member name="M:EPiServer.Logging.ILoggerFactory.Create(System.String)">
            <summary>
            Creates a <see cref="T:EPiServer.Logging.ILogger"/> with the provided name.
            </summary>
            <param name="name">The name of the logger to create.</param>
            <returns>An <see cref="T:EPiServer.Logging.ILogger"/> instance with the provided name.</returns>
        </member>
        <member name="T:EPiServer.Logging.Level">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Represent the severity level that a log message should be created at.
            </summary>
            <preliminary />
        </member>
        <member name="F:EPiServer.Logging.Level.Trace">
            <summary>
            Designates very fine-grained information potentially useful when debugging an application. Can be very verbose.
            </summary>
        </member>
        <member name="F:EPiServer.Logging.Level.Debug">
            <summary>
            Designates fine-grained information useful when debugging an application
            </summary>
        </member>
        <member name="F:EPiServer.Logging.Level.Information">
            <summary>
            Designates information about non-harmful events in the an application
            </summary>
        </member>
        <member name="F:EPiServer.Logging.Level.Warning">
            <summary>
            Designates information about potentially harmful events in the an application
            </summary>
        </member>
        <member name="F:EPiServer.Logging.Level.Error">
            <summary>
            Designates information about errors in an application that won't prevent it from continuing to execute.
            </summary>
        </member>
        <member name="F:EPiServer.Logging.Level.Critical">
            <summary>
            Designates information about severe error events in an application that will prevents it from continuing to execute.
            </summary>
        </member>
        <member name="T:EPiServer.Logging.LoggerExtensions">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Provides standard methods for logging messages at different levels.
            </summary>
            <preliminary />
        </member>
        <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String)">
            <summary>
            Logs the specified message with the provided level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The message that should be logged.</param>
            <exception cref="T:System.ArgumentNullException">
            logger
            or
            message
            </exception>
        </member>
        <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String,System.Exception)">
            <summary>
            Logs the specified message and exception with the provided level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The message that should be logged.</param>
            <param name="exception">The exception that should be logged.</param>
            <exception cref="T:System.ArgumentNullException">
            logger
            or
            message
            or
            exception
            </exception>
        </member>
        <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String,System.Object[])">
            <summary>
            Logs a message with the provided level using the supplied format and arguments.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level at which to log the message.</param>
            <param name="messageFormat">The message format string.</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">
            logger
            or
            messageFormat
            </exception>
        </member>
        <member name="T:EPiServer.Logging.LoggerFactoryAttribute">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Attribute that defines a type of <see cref="T:EPiServer.Logging.ILoggerFactory"/> that should be used by the 
            <see cref="T:EPiServer.Logging.LogManager"/> to create logger instances in the system.
            </summary>
            <remarks>
            The standard <see cref="T:EPiServer.Logging.LogManager"/> currently only supports one <see cref="T:EPiServer.Logging.ILoggerFactory"/>
            instance and will use the type from the first <see cref="T:EPiServer.Logging.LoggerFactoryAttribute"/> that is found.
            </remarks>
            <preliminary />
        </member>
        <member name="M:EPiServer.Logging.LoggerFactoryAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LoggerFactoryAttribute" /> class.
            </summary>
            <param name="loggerFactoryType">Type that should be used to create logger instances. Must implement <see cref="T:EPiServer.Logging.ILoggerFactory" />.</param>
            <exception cref="T:System.ArgumentNullException">loggerFactoryType</exception>
            <exception cref="T:System.ArgumentException">Type must implement ILoggerFactory interface;loggerFactoryType</exception>
        </member>
        <member name="P:EPiServer.Logging.LoggerFactoryAttribute.LoggerFactoryType">
            <summary>
            Gets the type of <see cref="T:EPiServer.Logging.ILoggerFactory"/> that should be used by the <see cref="T:EPiServer.Logging.LogManager"/> to create logger instances in the system.
            </summary>
        </member>
        <member name="T:EPiServer.Logging.LogManager">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Class responsible for creating new <see cref="T:EPiServer.Logging.ILogger"/> instances.
            </summary>
            <preliminary/>
        </member>
        <member name="M:EPiServer.Logging.LogManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LogManager"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Logging.LogManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LogManager"/> class.
            </summary>
            <param name="scanForFactory">if set to <c>true</c> assemblies will be scanned to find a factory.</param>
        </member>
        <member name="P:EPiServer.Logging.LogManager.Instance">
            <summary>
            Gets or sets the current <see cref="T:EPiServer.Logging.LogManager"/> instance.
            </summary>
            <remarks>
            This property is guaranteed to always return a <see cref="T:EPiServer.Logging.LogManager"/> object.
            If set to null, all logging will be cancelled.
            </remarks>
        </member>
        <member name="F:EPiServer.Logging.LogManager.BoundaryType">
            <summary>
            Gets the type of the class that represents the boundary of the logging system.
            </summary>
            <remarks>
            This can be used by certain logging framework to find and log the correct stack information.
            </remarks>
        </member>
        <member name="P:EPiServer.Logging.LogManager.Factory">
            <summary>
            Gets or sets the factory that should be used. If not explicitly set, all current 
            loaded assemblies will be scanned to find a factory.
            </summary>
        </member>
        <member name="M:EPiServer.Logging.LogManager.AddFactory(EPiServer.Logging.ILoggerFactory)">
            <summary>
            Adds a <see cref="T:EPiServer.Logging.ILoggerFactory" /> to the current <see cref="T:EPiServer.Logging.LogManager" />.
            </summary>
            <param name="factory">The factory that should be used.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
            <remarks>
            <para>
                The basic <see cref="T:EPiServer.Logging.LogManager" /> implementation currently only supports
                the use of one single <see cref="T:EPiServer.Logging.ILoggerFactory" /> and will only use the instance
                last registered. This behavior is subject to change in future releases.
            </para>
            <para>
                Adding a new factory will not affect any <see cref="T:EPiServer.Logging.ILogger"/> instances
                that has been created and used already.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger"/> instance for the provided name.
            </summary>
            <param name="name">The name of the logger to get.</param>
            <returns>A new <see cref="T:EPiServer.Logging.ILogger"/> instance</returns>
            <remarks>
            This method is guaranteed to always return an instance.
            </remarks>
        </member>
        <member name="M:EPiServer.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger"/> instance from the current <see cref="P:EPiServer.Logging.LogManager.Instance"/> for a give type.
            </summary>
            <param name="type">The type that the logger should be created for.</param>
            <returns>A new <see cref="T:EPiServer.Logging.ILogger"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:EPiServer.Logging.LogManager.GetLogger">
            <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger"/> instance from the current <see cref="P:EPiServer.Logging.LogManager.Instance"/> configured
            for the calling class.
            </summary>
            <returns>A new <see cref="T:EPiServer.Logging.ILogger"/> instance.</returns>
            <remarks>
            As this method uses the stack and some reflection it is not recommended to use this from
            other than initializing static fields.
            </remarks>
        </member>
        <member name="T:EPiServer.Logging.Compatibility.ILog">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Compatibility interface that mimics the ILog interface in log4net.
            </summary>
            <remarks>
            This class is provided to ease the transitioning from log4net. 
            It is recommended to use the <see cref="T:EPiServer.Logging.ILogger"/>
            for new code.
            </remarks>
            <preliminary />
        </member>
        <member name="T:EPiServer.Logging.Compatibility.LogManager">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Compatibility class that mimics some aspects of the LogManager class in log4net.
            Responsible for creating new <see cref="T:EPiServer.Logging.Compatibility.ILog"/> instances that can be used for logging.
            </summary>
            <remarks>
            This class is provided to ease the transitioning from log4net. 
            It is recommended to use the <see cref="T:EPiServer.Logging.LogManager"/>
            for new code.
            </remarks>
            <preliminary />
        </member>
        <member name="M:EPiServer.Logging.Compatibility.LogManager.GetLogger(System.Type)">
            <summary>
            Gets a <see cref="T:EPiServer.Logging.Compatibility.ILog"/> instance for the provided type. 
            </summary>
            <param name="type">The type that the logger should be created for.</param>
            <returns>A new <see cref="T:EPiServer.Logging.Compatibility.ILog"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <remarks>
            This class is provided to ease the transitioning from log4net. 
            It is recommended to use the <see cref="M:EPiServer.Logging.LogManager.GetLogger"/>
            for new code.
            </remarks>
        </member>
        <member name="M:EPiServer.Logging.Compatibility.LogManager.GetLogger(System.String)">
            <summary>
            Gets a <see cref="T:EPiServer.Logging.Compatibility.ILog"/> instance for the provided type. 
            </summary>
            <param name="name">The name of the logger.</param>
            <returns>A new <see cref="T:EPiServer.Logging.Compatibility.ILog"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <remarks>
            This class is provided to ease the transitioning from EPiServer.Logging.Compatibility. 
            It is recommended to use the <see cref="M:EPiServer.Logging.LogManager.GetLogger"/>
            for new code.
            </remarks>
        </member>
        <member name="P:EPiServer.Personalization.GeoCoordinate.Latitude">
            <summary>
            Gets or sets the latitude of the <see cref="T:EPiServer.Personalization.GeoCoordinate"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.GeoCoordinate.Longitude">
            <summary>
            Gets or sets the longitude of the <see cref="T:EPiServer.Personalization.GeoCoordinate"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.GeoCoordinate.HorizontalAccuracy">
            <summary>
            Gets or sets the accuracy of the latitude and longitude that is given by the <see cref="T:EPiServer.Personalization.GeoCoordinate"/>, in meters.
            </summary>
        </member>
        <member name="M:EPiServer.Personalization.GeoCoordinate.GetDistanceTo(EPiServer.Personalization.GeoCoordinate)">
            <summary>
            Returns the distance between the latitude and longitude coordinates that are specified by this <see cref="T:EPiServer.Personalization.GeoCoordinate"/> and another specified <see cref="T:EPiServer.Personalization.GeoCoordinate"/>.
            </summary>
            <param name="other">The <see cref="T:EPiServer.Personalization.GeoCoordinate"/> for the location to calculate the distance to.</param>
            <returns>The distance between the two coordinates, in meters.</returns>
        </member>
        <member name="M:EPiServer.Personalization.GeoCoordinate.ToString">
            <summary>
            Returns the current <see cref="T:EPiServer.Personalization.GeoCoordinate"/> object's display name
            </summary>
            <returns>The <see cref="T:EPiServer.Personalization.GeoCoordinate"/> object's display name</returns>
        </member>
        <member name="T:EPiServer.Personalization.Geolocation">
            <summary>
            Provides an interface to the configured Geolocation providers in the application.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.Geolocation.Provider">
            <summary>
            Gets a reference to the default geolocation provider for the application.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.Geolocation.Providers">
            <summary>
            Gets a collection of the geolocation providers.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.GeolocationProviderBase.Capabilities">
            <summary>
            Get the capabilities of this provider
            </summary>
        </member>
        <member name="M:EPiServer.Personalization.GeolocationProviderBase.Lookup(System.Net.IPAddress)">
            <summary>
            Look up IP address in geolocation database
            </summary>
            <param name="address">IP address to look up</param>
            <returns>Geolocation data for the IP address (can be null)</returns>
        </member>
        <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetContinentCodes">
            <summary>
            Get the list of two-letter continent codes known to this provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetCountryCodes(System.String)">
            <summary>
            Get the list of two-letter country codes known to this provider
            </summary>
            <param name="continentCode">Two-letter continent code to filter the list of countries on (may be null)</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetRegions(System.String)">
            <summary>
            Get the list of regions for a country known to this provider
            </summary>
            <param name="countryCode">Two-letter country code to filter the list of regions on (may be null)</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Personalization.IClientIPAddressResolver">
            <summary>
            Defines signature for compontent that resolves client ip addresses.
            </summary>
        </member>
        <member name="M:EPiServer.Personalization.IClientIPAddressResolver.ResolveAddress(System.Web.HttpContextBase)">
            <summary>
            Resolves the client ip address from the context.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Personalization.IGeolocationResult.ContinentCode">
            <summary>
            Two characters continent code based on ISO 3166.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.IGeolocationResult.CountryCode">
            <summary>
            Two characters country code based on ISO 3166.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.IGeolocationResult.Region">
            <summary>
            The region within the country
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.IGeolocationResult.TimeZone">
            <summary>
            The time zone.
            </summary>
        </member>
        <member name="P:EPiServer.Personalization.IGeolocationResult.Location">
            <summary>
            Represents the location.
            </summary>
        </member>
        <member name="T:EPiServer.Security.AnonymousRole">
            <summary>
            Implementation of the Anonymous virtual role.
            </summary>
            <remarks>   
            A user that is not authenticated will be a member of the Anonymous role.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.AnonymousRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
            <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
        </member>
        <member name="P:EPiServer.Security.AnonymousRole.RoleName">
            <summary>
            Gets or sets the default name of this virtual role.
            </summary>
            <remarks>
            <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
            <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Security.AuthenticatedRole">
            <summary>
            Implementation of the Authenticated virtual role.
            </summary>
            <remarks>
            A user that is authenticated will be a member of the Authenticated role.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.AuthenticatedRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
            <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
        </member>
        <member name="P:EPiServer.Security.AuthenticatedRole.RoleName">
            <summary>
            Gets or sets the default name of this virtual role.
            </summary>
            <remarks>
            <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
            <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Security.EveryoneRole">
            <summary>
            Implementation of the Everyone virtual role.
            </summary>
            <remarks>
            Any user will always be a member of the Everyone group.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.EveryoneRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
            <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
        </member>
        <member name="P:EPiServer.Security.EveryoneRole.RoleName">
            <summary>
            Gets or sets the default name of this virtual role.
            </summary>
            <remarks>
            <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
            <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Security.IVirtualRoleReplication">
            <summary>
            Interface used to replicate changes from <see cref="T:EPiServer.Security.VirtualRoleRepository`1"/>
            </summary>
        </member>
        <member name="M:EPiServer.Security.IVirtualRoleReplication.Register(System.String,System.Type)">
            <summary>
            Replicate virtual role to other machines
            </summary>
            <param name="name">Name of the role</param>
            <param name="virtualRoleProviderType">The type of the role</param>
        </member>
        <member name="M:EPiServer.Security.IVirtualRoleReplication.Unregister(System.String)">
            <summary>
            Replicate unregistration of the role to another machine
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:EPiServer.Security.IVirtualRoleReplication.ClearRepositoryCache">
            <summary>
            Sends an event that the repository cache should be cleared
            </summary>
        </member>
        <member name="E:EPiServer.Security.IVirtualRoleReplication.RegisterReceived">
            <summary>
            Fired when an register event is received
            </summary>
        </member>
        <member name="E:EPiServer.Security.IVirtualRoleReplication.UnregisterReceived">
            <summary>
            Fired when an unregister event is received
            </summary>
        </member>
        <member name="E:EPiServer.Security.IVirtualRoleReplication.ClearRepositoryCacheReceived">
            <summary>
            Occurs when a clear cache event has been broadcasted.
            </summary>
        </member>
        <member name="T:EPiServer.Security.MappedRole">
            <summary>
            Map one role to several roles in the system.
            roles : Comma separated list of roles. E.g, WebAdmins, WebEditors
            mode : Any or All, Default is Any. If Any is set the principal only has to be a member of one of the roles specifed.
            </summary>
        </member>
        <member name="M:EPiServer.Security.MappedRole.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:EPiServer.Security.MappedRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of the roles specified.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">External context.</param>
            <returns>
            	<c>true</c> if the specified principal is a member of the roles specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Security.ProviderActions">
            <summary>
            Actions that are supported by the provider.
            </summary>
        </member>
        <member name="F:EPiServer.Security.ProviderActions.Update">
            <summary>
            Update action on provider
            </summary>
        </member>
        <member name="F:EPiServer.Security.ProviderActions.Create">
            <summary>
            Create action on provider
            </summary>
        </member>
        <member name="F:EPiServer.Security.ProviderActions.Delete">
            <summary>
            Delete action on provider
            </summary>
        </member>
        <member name="T:EPiServer.Security.ProviderCapabilityAttribute">
            <summary>
            Attribute used to describe what capabilities a Role or Membership provider
            has: Which actions it can perform, what properties it can set and which wildcard
            symbol is used when searching 
            </summary>
        </member>
        <member name="P:EPiServer.Security.ProviderCapabilityAttribute.AllowedActions">
            <summary>
            The allowed actions
            </summary>
        </member>
        <member name="P:EPiServer.Security.ProviderCapabilityAttribute.Properties">
            <summary>
            Supported properties
            </summary>
        </member>
        <member name="P:EPiServer.Security.ProviderCapabilityAttribute.WildcardSymbol">
            <summary>
            Wildcard symbol used in search
            </summary>
            <remarks>If not set, the consuming class may use a default, e.g. "%"</remarks>
        </member>
        <member name="T:EPiServer.Security.SecurityEntityType">
            <summary>
            Lists the different types of security entities.
            </summary>
        </member>
        <member name="F:EPiServer.Security.SecurityEntityType.User">
            <summary>
            The Security entity represents a user.
            </summary>
        </member>
        <member name="F:EPiServer.Security.SecurityEntityType.Role">
            <summary>
            The Security entity represents a role.
            </summary>
        </member>
        <member name="F:EPiServer.Security.SecurityEntityType.VisitorGroup">
            <summary>
            The Security entity represents a visitor group.
            </summary>
        </member>
        <member name="T:EPiServer.Security.SecurityEntity">
            <summary>
            Simple immutable class that identifies a security entity, i e a user or a role.
            </summary>
        </member>
        <member name="M:EPiServer.Security.SecurityEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.SecurityEntity"/> class.
            </summary>
            <param name="name">The name of the security entity.</param>
            <remarks>
            By default the entity will be marked as a role.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.SecurityEntity.#ctor(System.String,EPiServer.Security.SecurityEntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.SecurityEntity"/> class.
            </summary>
            <param name="name">The name of the security entity.</param>
            <param name="entityType">Type of the entity.</param>
            <remarks>
            A security entity can be a role or a user.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.SecurityEntity.Name">
            <summary>
            Gets the name of the security entity.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Security.SecurityEntity.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="M:EPiServer.Security.SecurityEntity.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <remarks>
            The string returned by ToString can always be successfully parsed with the TryParse method.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.SecurityEntity.TryParse(System.String,EPiServer.Security.SecurityEntity@)">
            <summary>
            Tries to parse a string into a SecurityEntity.
            </summary>
            <param name="securityEntity">The string representation of a security entity.</param>
            <param name="entity">The parsed entity.</param>
            <returns>True if the string was successfully parsed; false otherwise.</returns>
            <remarks>
            The expected format is:
            <para>
            SecurityEntityType:Name
            </para>
            <para>
            I e the following are all valid strings that can be successfully parsed:
            </para>
            User:Adam
            Role:Administrator
            User:superuser
            </remarks>
        </member>
        <member name="T:EPiServer.Security.SecurityEntityProvider">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Signature for component that provides security entities which can be used to apply access rights for items (for example IContent).
            </summary>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProvider.Search(System.String,System.String)">
            <summary>
            Searches all security entities of given type with a matching name.
            </summary>
            <param name="partOfValue">Part of value to match or null to get all of given type.</param>
            <param name="claimType">The claimType to search for.</param>
            <returns>A list of all matching entities or an empty list if no matches.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProvider.Search(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Searches all security entities of given type with a matching name with paging support.
            </summary>
            <param name="partOfValue">Part of value to match or null to get all of given type.</param>
            <param name="claimType">The claim type to search for.</param>
            <param name="startIndex">The start index, used for paging</param>
            <param name="maxRows">The maximum number of rows returned</param>
            <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
            <returns>A list of all matching entities or an empty list if no matches.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProvider.GetRolesForUser(System.String)">
            <summary>
            Retrieves all roles for user with given userName.
            </summary>
            <param name="userName">The name of the user.</param>
            <returns>A list of all roles for the user.</returns>
        </member>
        <member name="T:EPiServer.Security.SecurityEntityProviderExtensions">
            <summary>
            Convenience extension methods for <see cref="T:EPiServer.Security.SecurityEntityProvider"/>
            </summary>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchRoles(EPiServer.Security.SecurityEntityProvider,System.String)">
            <summary>
            Search all roles matching <paramref name="partOfName"/>.
            </summary>
            <param name="securityEntityProvider">The provider that is extended</param>
            <param name="partOfName">part of the role name to match. Null or String.Empty will return all roles.</param>
            <returns>A list of matching roles.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchRoles(EPiServer.Security.SecurityEntityProvider,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search all roles matching <paramref name="partOfName"/>.
            </summary>
            <param name="securityEntityProvider">The provider that is extended</param>
            <param name="partOfName">part of the role name to match. Null or String.Empty will return all roles.</param>
            <param name="startIndex">The start index, used for paging</param>
            <param name="maxRows">The maximum number of rows returned</param>
            <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
            <returns>A list of all matching entities or an empty list if no matches.</returns>
            <returns>A list of matching roles.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByName(EPiServer.Security.SecurityEntityProvider,System.String)">
            <summary>
            Search all users with a matching <paramref name="partOfName"/>.
            </summary>
            <param name="securityEntityProvider">The provider that is extended</param>
            <param name="partOfName">part of the user name to match. Null or String.Empty will return all users.</param>
            <returns>A list of matching users.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByName(EPiServer.Security.SecurityEntityProvider,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search all users matching <paramref name="partOfName"/>.
            </summary>
            <param name="securityEntityProvider">The provider that is extended</param>
            <param name="partOfName">part of the user name to match. Null or String.Empty will return all users.</param>
            <param name="startIndex">The start index, used for paging</param>
            <param name="maxRows">The maximum number of rows returned</param>
            <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
            <returns>A list of all matching entities or an empty list if no matches.</returns>
            <returns>A list of matching users.</returns>
        </member>
        <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByEmail(EPiServer.Security.SecurityEntityProvider,System.String)">
            <summary>
            Search all users with an email matching <paramref name="partOfEmail"/>.
            </summary>
            <param name="securityEntityProvider">The provider that is extended</param>
            <param name="partOfEmail">part of the email to match.</param>
            <returns>A list of matching users.</returns>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleAuthorizationSession">
            <summary>
            Runtime class to check if a principal is part of a virtual role
            </summary>
            <remarks>
            <para>Implements a cache for lookups that can be disabled per virtual role using the <see cref="P:EPiServer.Security.VirtualRoleProviderBase.EnableIsInRoleCache"/>.</para>
            <para>Since the class is scoped per request or per thread to get session caching it should never be stored in singleton instances</para>
            </remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleAuthorizationSession.IsInVirtualRole(System.Security.Principal.IPrincipal,System.String,EPiServer.Security.SecurityEntityType,System.Object)">
            <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
            <param name="principal">The principal that will be forwarded to the provider</param>
            <param name="role">The name of the role for which to check membership.</param>
            <param name="type">The security type of the role you want to check</param>
            <param name="context">The context under which the query is being performed</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleEventHandler">
            <summary>
            Implementations for hooking into different HTTP events for virtual roles
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleEventHandler.WrappingVirtualRolePrincipal_PostAuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the PostAuthenticateRequest event to replace the current principal with a VirtualRolePrincipal.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleEventHandler.WrappingVirtualRolePrincipal_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the EndRequest event to add the current user (if authenticated) rolelist to cookie if System.Web.Security.Roles.CacheRolesInCookie
            is enabled.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            Assumes that Roles are enabled and that CacheRolesInCookie is enabled.
            </remarks>
        </member>
        <member name="T:EPiServer.Security.VirtualRolePrincipal">
            <summary>
            A wrapper class that adds Virtual Role functionality to a principal object.
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.#ctor(System.Security.Principal.IPrincipal,System.Object,EPiServer.Security.VirtualRoleRepository{EPiServer.Security.VirtualRoleProviderBase},System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>
            This constructor supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="principal">The principal to be wrapped</param>
            <param name="context">The context</param>
            <param name="repository">The virtual role repository</param>
            <param name="cache">Used to cache role lookups</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.#ctor(System.Security.Principal.IPrincipal,EPiServer.Security.VirtualRoleAuthorizationSession)">
            <summary>
            This constructor supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="principal">The principal to be wrapped</param>
            <param name="authorization">The virtual role authorization</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.CreateWrapper(System.Security.Principal.IPrincipal)">
            <summary>
            Creates the wrapper.
            </summary>
            <param name="principal">The principal.</param>
            <returns>An IPrincipal that supports virtual roles.</returns>
            <remarks>
            This method will check that the principal object passed as input parameter does not already
            support virtual roles. I e calling CreateWrapper multiple times will not add additional wrappers
            to the principal object.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.CreateWrapper(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Creates the wrapper.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">External context for virtual role determination.</param>
            <returns>An IPrincipal that supports virtual roles.</returns>
            <remarks>
            This method will check that the principal object passed as input parameter does not already
            support virtual roles. I e calling CreateWrapper multiple times will not add additional wrappers
            to the principal object.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.Unwrap(System.Security.Principal.IPrincipal)">
            <summary>
            Unwraps a wrapped principal
            </summary>
            <param name="principal">The principal.</param>
        </member>
        <member name="P:EPiServer.Security.VirtualRolePrincipal.FailSafeIsInRole">
            <summary>
            Gets or sets a value indicating whether IsInRole on VirtualRolePrincipal may throw an exception.
            </summary>
            <value><c>true</c> if IsInRole is fail safe (cannot throw exception); otherwise, <c>false</c>.</value>
            <remarks>
            This setting can be useful to emulate the behavior of IsInRole as it worked in .NET Framework 1.0 / 1.1
            In these versions any exceptions thrown by code executing beneath IsInRole were caught and ignored. The IsInRole
            for a WindowsPrincipal in .NET 2.0 may throw an exception if a domain controller is unavailable - this may be
            undesired behavior since it could prevent the logon process, thus preventing any user from logging on. By setting
            this property to True you will cause any exceptions thrown by IsInRole to be caught and ignored. The IsInRole
            call will be interpreted as returning False on throw.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.VirtualRolePrincipal.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Security.Principal.IIdentity"></see> object associated with the current principal.</returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String,EPiServer.Security.SecurityEntityType)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <param name="type">Only check virtual roles of this security type</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String,EPiServer.Security.SecurityEntityType,System.Object)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <param name="type">Only check virtual roles of this security type</param>
            <param name="context">The context where the virtual role is queried (ie access control lists)</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInVirtualRole(System.String,EPiServer.Security.SecurityEntityType)">
            <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <param name="type">The security type of the role you want to check</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInVirtualRole(System.String,EPiServer.Security.SecurityEntityType,System.Object)">
            <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <param name="type">The security type of the role you want to check</param>
            <param name="context">The context where the virtual role is queried (ie access control lists)</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleProviderBase">
            <summary>
            Base class required to implement virtual roles
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.VirtualRoleProviderBase"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleProviderBase.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">External context.</param>
            <returns>
            	<c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The context parameter may be null but can be used to transfer external context to a Virtual role provider
            </remarks>
            <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleProviderBase.EnableIsInRoleCache">
            <summary>
            Determines if the response from IsInRole is allowed to cached per request (enabled by default)
            </summary>
            <remarks>The response from the first call to IsInRole will be cached per request or thread if no request is available</remarks>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleProviderBase.SupportsClaims">
            <summary>
            Determines if the response from IsInRole can be added as a Role claim
            </summary>
            <remarks>
            <para>Claims are only added when the 'addClaims' configuration setting has been enabled on the 'virtualRoles' element.</para>
            </remarks>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleProviderBase.SecurityEntityType">
            <summary>
            The security entity type is primarily used when checking role membership for page access rights
            </summary>
            <remarks>You should use SecurityEntityType.Role to be part of the normal role checking in ASP.NET</remarks>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleReplicationEventArgs">
            <summary>
            Event arguments used when replicating changes in virtual roles
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleReplicationEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.RepositoryName">
            <summary>
            The source of the replication event (multiple respositories share the same events)
            </summary>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.Name">
            <summary>
            Name of the virtual role
            </summary>
        </member>
        <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.TypeName">
            <summary>
            Full type name of the virtual role
            </summary>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleRepository`1">
            <summary>
            A repository for keeping a set of role names and their implementation
            </summary>
            <remarks>All operations on this class is thread-safe.</remarks>
        </member>
        <member name="E:EPiServer.Security.VirtualRoleRepository`1.ClearedCache">
            <summary>
            Occurs when the instance has cleared it cached data
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.#ctor(EPiServer.Security.IVirtualRoleReplication)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.VirtualRoleRepository`1"/> class.
            </summary>
            <param name="replication">Class that will handle replication of changes</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.Register(System.String,System.Type,System.Boolean)">
            <summary>
            Register a new virtual role and return the instance T.
            </summary>
            <param name="name">Name of the role</param>
            <param name="virtualRoleProviderType">The type of the implementation</param>
            <param name="replicateChanges">True if changes should be replicated to other instances or machines</param>
            <remarks>This method will overwrite any existing registered virtual roles with the same name</remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.RegisterInstance(System.String,`0,System.Boolean)">
            <summary>
            Registers an instance of VirtualRoleProviderBase.
            </summary>
            <param name="name">The name.</param>
            <param name="instance">The instance.</param>
            <param name="replicateChanges">if set to <c>true</c> cahgnes are replicated.</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.Register(System.String,`0)">
            <summary>
            Register a new virtual role
            </summary>
            <param name="name">Name of the role</param>
            <param name="virtualRoleProvider">The implementation</param>
            <remarks>This method will overwrite any existing registered virtual roles with the same name.
            No events will be raised with this overload.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.BeforeRegister(`0)">
            <summary>
            Called before an instance is registered. 
            </summary>
            <remarks>
            The base implementation does nothing, subclasses can override this method if any 
            processing is needed before registration.
            </remarks>
            <param name="virtualRoleProvider">The virtual role provider.</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.AfterUnregister(`0)">
            <summary>
            Called after an instance has been unregistered.
            </summary>
            <remarks>
            The base implementation does nothing, subclasses can override this method if any 
            processing is needed after unregistration.
            </remarks>
            <param name="virtualRoleProvider">The virtual role provider.</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.Unregister(System.String,System.Boolean)">
            <summary>
            Unregister a virtual role
            </summary>
            <param name="name">The name of the role</param>
            <param name="replicateChanges">Replicate changes to all instences of this class</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.ClearCache(System.Boolean)">
            <summary>
            Clears the internal repository cache.
            </summary>
            <param name="broadcast">if set to <c>true</c> the clear request is broadcasted.</param>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.GetRoleNamesByType(System.Type)">
            <summary>
            Gets the virtual role names for a specified type.
            </summary>
            <param name="type">Type of the class.</param>
            <returns>The role names.</returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.GetAllRoles">
            <summary>
            Get a list of all registered virtual roles in this repository.
            </summary>
            <returns>A list of virtual role names.</returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.SearchRoles(System.String)">
            <summary>
            Find virtual roles registered in this repository
            </summary>
            <param name="query">Query to find roles from.</param>
            <returns>A list of roles that match the roleName</returns>
            <remarks>
            Matching of role names is simply a substring check - if the role contains the string passed in roleName
            anywhere in the string, it is considered a match.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.TryGetRole(System.String,`0@)">
            <summary>
            Get a role based on name
            </summary>
            <param name="name">Name of the role</param>
            <param name="virtualRoleProvider">The virtual role provider registered for this name</param>
            <returns>True if the role was found</returns>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.Dispose">
            <summary>
            Implements IDisposable
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable
            </summary>
        </member>
        <member name="M:EPiServer.Security.VirtualRoleRepository`1.GetDefault">
            <summary>
            Returns the globally used repository for storing virtual roles
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Security.VirtualRoleToClaimConverter">
            <summary>
            Responsible for converting virtual roles into claims
            </summary>
        </member>
        <member name="T:EPiServer.Security.WindowsAdministratorsRole">
            <summary>
            Implementation of the Administrators virtual role.
            </summary>
            <remarks>
            This virtual role is a bit special, it is intended for Windows operating systems that have localized the
            name of the Administrators group. This virtual role will do a name-independent check for the Windows Administrators
            group. If the principal is not authenticated this role will always return <c>false</c>.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.WindowsAdministratorsRole.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the localized name of the administrator role
            </summary>
            <param name="name">The name of the provider/role</param>
            <param name="config">The configuration</param>
        </member>
        <member name="M:EPiServer.Security.WindowsAdministratorsRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
            <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
            <param name="principal">The principal.</param>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
            <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
        </member>
        <member name="P:EPiServer.Security.WindowsAdministratorsRole.RoleName">
            <summary>
            Gets or sets the default name of this virtual role.
            </summary>
            <remarks>
            <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
            <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Security.MultiplexingMembershipProvider">
            <summary>
            A membership provider implementation that acts as a multiplexer between a number of preconfigured membership providers.
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Security.MultiplexingMembershipProvider"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MembershipProviders">
            <summary>
            The collection of configured membership providers
            </summary>
            <remarks>
            Basically a wrapper around <see cref="P:System.Web.Security.Membership.Providers"/> but with the
            option of doing dependency injection to set your own set of membership providers.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.Providers">
            <summary>
            The list of membership providers that are participating in the multiplexing procedure
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.ActiveMembershipProviders">
            <summary>
            The list of membership providers that are participating in the multiplexing procedure
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentProvider">
            <summary>
            Provider to use based on CurrentUsername / CurrentMembershipUser
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentMembershipUser">
            <summary>
            The membership user based on CurrentUsername
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentUsername">
            <summary>
            Gets or sets current user
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindMembershipUser(System.String)">
            <summary>
            Gets membership user for provided username
            </summary>
            <param name="username">Username</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.DefaultProvider">
            <summary>
            Returns default provider that corresponding to provider1 setting in web.config. 
            </summary>
            <value>The default provider.</value>
            <remarks>
            The default role provider is used for operations such as adding a new role, where you cannot apply the operation to all providers, neither
            determine the role provider based on information from the multiplexing membership provider.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes MultiplexingMembershipProvider
            </summary>
            <param name="name">Name of provider</param>
            <param name="config">Collection of name-value pairs</param>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <value></value>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
            <remarks>
            Will use the DefaultProvider for creating a new user.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
            <remarks>
            Will return data from each provider in order.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
            <remarks>
            Will return data from each provider in order.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
            <remarks>
            Will return data from each provider in order.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
            <remarks>
            Will return the sum of online users from all active providers.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
            <remarks>
            Will use the first active provider where email is found.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value></value>
            <returns>The minimum number of special characters that must be present in a valid password.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <value></value>
            <returns>The minimum length required for a password. </returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"></see> values indicating the format for storing passwords in the data store.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <value></value>
            <returns>A regular expression used to evaluate a password.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <value></value>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingMembershipProvider.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <value></value>
            <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
            <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>The new password for the specified user.</returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.UnlockUser(System.String)">
            <summary>
            Unlocks the user.
            </summary>
            <param name="userName">The username.</param>
            <returns></returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates information about a user in the data source.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
            <remarks>
            Will use the first active provider where username is found.
            </remarks>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.RecordNumberToProviderAndIndex(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Calculates from which provider at which index to start reading to retrieve items from a specific record number.
            </summary>
        </member>
        <member name="T:EPiServer.Security.MultiplexingMembershipProvider.PageRetrieverDelegate">
            <summary>
            Delegate type used by AggregateProviderResults.
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingMembershipProvider.AggregateProviderResults(System.Int32,System.Int32,System.Int32@,EPiServer.Security.MultiplexingMembershipProvider.PageRetrieverDelegate)">
            <summary>
            Collects data from multiple providers.
            </summary>
        </member>
        <member name="T:EPiServer.Security.MultiplexingRoleProvider">
            <summary>
            A role provider implementation that acts as a multiplexer between a number of preconfigured role providers.
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.MultiplexingRoleProvider"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingRoleProvider.DefaultProvider">
            <summary>
            Returns default provider that corresponds to provider1 setting in web.config. 
            </summary>
            <value>The default provider.</value>
            <remarks>
            The default role provider is used for operations such as adding a new role, where you cannot apply the operation to all providers, neither
            determine the role provider based on information from the multiplexing membership provider.
            </remarks>
        </member>
        <member name="P:EPiServer.Security.MultiplexingRoleProvider.CurrentProvider">
            <summary>
            Currently used role provider based on the mapped membership provider
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.SetCurrentMembershipUser(System.String)">
            <summary>
            Assign the current user to the context
            </summary>
            <param name="userName">The logged in user name</param>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.ProviderForUser(System.String)">
            <summary>
            Determine the currently used role provider for the user name
            </summary>
            <param name="userName">The logged in user</param>
            <returns>A role provider</returns>
        </member>
        <member name="P:EPiServer.Security.MultiplexingRoleProvider.ActiveRoleProviders">
            <summary>
            A list of currently active role providers
            </summary>
        </member>
        <member name="P:EPiServer.Security.MultiplexingRoleProvider.Providers">
            <summary>
            A list of currently active role providers (read-only)
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.MembershipToRoleProvider(System.String)">
            <summary>
            Get the role provider that maps to a membership provider
            </summary>
            <param name="membershipProviderName">The name of the membership provider</param>
            <returns>A role provider</returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="P:EPiServer.Security.MultiplexingRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <value></value>
            <returns>The name of the application to store and retrieve role information for.</returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitProviderMap">
            <summary>
            Delayed initialization of the provider map membership->role
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitMembershipProvider">
            <summary>
            Delayed initialization of the corresponding multiplexing membership provider
            </summary>
        </member>
        <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitProviders">
            <summary>
            Delayed initialization of all the role providers defined to be multiplexed
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.ActivationException">
            <summary>
            The standard exception thrown when a ServiceLocator has an error in resolving an object.
            </summary>
            <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
        </member>
        <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
             </param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null. 
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). 
            </exception>
        </member>
        <member name="T:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1">
            <summary>
            Helper class to store variables that should be cached either on HTTP context or on thread local storage
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1.#ctor(System.Func{`0},EPiServer.Framework.Cache.IRequestCache)">
            <summary>
            Creates new instance of <see cref="T:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1"/>
            </summary>
            <param name="valueFactory">The factory to get not cached value</param>
            <param name="requestCache">The request cache to use</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1.Value">
            <summary>
            Accessor to get value from cache or factory (if not cached)
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.ServiceLocation.HybridHttpOrThreadLocal`1.Dispose(System.Boolean)">
            <summary>
            Dispose implementation
            </summary>
            <param name="disposing">indicate if disposing</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.IConfigurableModule">
            <summary>
            Interface you can implement as part of the EPiServer Framework initialization chain.
            ConfigureContainer is called on all <see cref="T:EPiServer.Framework.IInitializableModule"/> before
            initialization begins. This allows modification of the container before service
            instances are created during initialization.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.IConfigurableModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
            <summary>
            Configure the IoC container before initialization.
            </summary>
            <param name="context">The context on which the container can be accessed.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.Injected`1">
            <summary>
            Marks a property for property injection by the IoC container. When a 
            class uses properties of this type is constructed via the IoC container 
            or BuildUp is called properties of this type are injected by the system.
            For objects constructed maually via new the service is located using
            the global service locator object.
            </summary>
            <typeparam name="T">The type of service to inject.</typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.Injected`1.#ctor(EPiServer.ServiceLocation.ServiceAccessor{`0})">
            <summary>
            Initializes an instance with a specific service accessor.
            </summary>
            <param name="accessor">The accessor delegate to use for retrieving the service.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Injected`1.#ctor(`0)">
            <summary>
            Initializes an instance with a specific service accessor.
            </summary>
            <param name="service">The service instance to use.</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.Injected`1.Accessor">
            <summary>
            Gets or sets an accessor delegate that can be used to retrieve the service that should be injected.
            </summary>
            <remarks>
            <para>
                Setting this property will also affect the Service property.
            </para>
            </remarks>
        </member>
        <member name="P:EPiServer.ServiceLocation.Injected`1.Service">
            <summary>
            Gets or sets the service instance that should be injected. 
            </summary>
            <remarks>
            <para>
                Setting this property will also affect the Accessor property.
            </para>
            <para>
                If not set this property is lazily resolved when first used.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.ServiceLocation.Injected`1.op_Implicit(`0)~EPiServer.ServiceLocation.Injected{`0}">
            <summary>
            Simplifies assignment to an injected service.
            </summary>
            <param name="service">The service to assign.</param>
            <returns>An injected object with the service assigned.</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.InjectedCollection`1">
            <summary>
            Marks a property for property injection by the IoC container. When a 
            class uses properties of this type is constructed via the IoC container 
            or BuildUp is called properties of this type are injected by the system.
            For objects constructed maually via new the services are located using
            the global service locator object.
            </summary>
            <typeparam name="T">The type of service to inject all instances of.</typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.#ctor(EPiServer.ServiceLocation.ServiceCollectionAccessor{`0})">
            <summary>
            Initializes an instance with a specific service accessor.
            </summary>
            <param name="accessor">The accessor delegate to use for retrieving the services.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes an instance with a specific service accessor.
            </summary>
            <param name="services">The services to use.</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.InjectedCollection`1.Services">
            <summary>
            The injected services. This property is lazily resolved when first used.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.op_Implicit(System.Collections.Generic.List{`0})~EPiServer.ServiceLocation.InjectedCollection{`0}">
            <summary>
            Simplifies assignment to injected services.
            </summary>
            <param name="services">The services to assign.</param>
            <returns>An injected collection with the service assigned.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.op_Implicit(`0[])~EPiServer.ServiceLocation.InjectedCollection{`0}">
            <summary>
            Simplifies assignment to injected services.
            </summary>
            <param name="services">The services to assign.</param>
            <returns>An injected collection with the services assigned.</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.IRegisteredService">
            <summary>
            Extends <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider"/> with possibility to extend latest registration.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.IRegisteredService.AddServiceAccessor">
            <summary>
            Registers a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1"/> for the service type.
            </summary>
            <returns>The service configuration provider</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.IServiceConfiguration">
            <summary>
            When implemented by an attribute, this interface controls how the decorated class 
            is registered in the inversion of control container.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.ServiceType">
            <summary>
            Gets the type of service the decorated class represents. If null the class is registered with it's own type as service type.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.Lifecycle">
            <summary>
            Gets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.FactoryMember">
            <summary>
            Gets the name of a static property on the attributed class from which the service instance is retrieved.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.FactoryType">
            <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.IServiceConfigurationProvider">
            <summary>
            Use to configure implementations for the services that are used by the application.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.RemoveAll(System.Type)">
            <summary>
            Removes all previously registered entries for the service.
            </summary>
            <param name="serviceType">The service type to register an implemenation for</param>
            <returns>The used service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Contains(System.Type)">
            <summary>
            Checks if a service type has any implementations registered.
            </summary>
            <param name="serviceType">The service type to check for implemenation existance</param>
            <returns>The used service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Type,EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Registers an implementation type for a service type.
            </summary>
            <param name="serviceType">The service type to register an implemenation for</param>
            <param name="implementationType">The implementation type for the service</param>
            <param name="lifetime">Specifies which lifecycle the implementation should have</param>
            <returns>The used service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object},EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Registers an implementation factory for a service type.
            </summary>
            <param name="serviceType">The service type to register an implemenation for</param>
            <param name="implementationFactory">The factory method used to create service instances</param>
            <param name="lifetime">Specifies which lifecycle the implementation should have</param>
            <returns>The used service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Object)">
            <summary>
            Registers an implementation instance for a service type.
            </summary>
            <param name="serviceType">The service type to register an implemenation for</param>
            <param name="instance">The singleton instance of the service tyep</param>
            <returns>The used service configuration provider</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.IServiceLocator">
            <summary>
            The generic Service Locator interface. This interface is used
            to retrieve services (instances identified by type and optional
            name) from a container.
            </summary>
            <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.TryGetExistingInstance(System.Type,System.Object@)">
            <summary>
            Tries to get an existing instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            <param name="instance">The requested service instance or null if it do not exist</param>
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.TryGetExistingInstance``1(``0@)">
            <summary>
            Tries to get an existing instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.TryGetExistingInstance(System.Type,System.String,System.Object@)">
            <summary>
            Tries to get an existing instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.TryGetExistingInstance``1(System.String,``0@)">
            <summary>
            Tries to get an existing instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.IServiceLocator.Buildup(System.Object)">
            <summary>
            Satisfies the dependencies of the given service using setter injection.
            </summary>
            <param name="service">The object whose property depdenencies should be set.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.ReflectiveServiceConfigurationHelper.ServiceAccessorFactory`1">
            <summary>
            Wraps the usage of the IoC container to resolve a type.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:EPiServer.ServiceLocation.RequestOrFactory`1">
            <summary>
            Helper class to store variables that should be cached on HTTP context.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.RequestOrFactory`1.#ctor(System.Func{`0},EPiServer.Framework.Cache.IRequestCache)">
            <summary>
            Constructs an instance of <see cref="T:EPiServer.ServiceLocation.RequestOrFactory`1"/>
            </summary>
            <param name="valueFactory">The factory to get not cached value</param>
            <param name="requestCache">The request cache to use</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.RequestOrFactory`1.Value">
            <summary>
            Accessor to get value from cache or factory (if not cached)
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceAccessor`1">
            <summary>
            Represents a method used to resolve a service at runtime. During initializing a typed accessor is registered for each service configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute"/>.
            </summary>
            <typeparam name="TService">The type of service to access.</typeparam>
            <returns>An instance of the service resolved at runtime.</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceCollectionAccessor`1">
            <summary>
            Represents a method used to resolve all services at runtime. During initializing a typed accessor is registered for each service configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute"/>.
            </summary>
            <typeparam name="TService">The type of service to access.</typeparam>
            <returns>An instance of the service resolved at runtime.</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute">
            <summary>
            Marks a type that is automatically registered as a service by the EPiServer initialization system.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationAttribute.#ctor">
            <summary>
            Service instance using the attributed type as service type.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationAttribute.#ctor(System.Type)">
            <summary>
            Service instance using the given parameter as service type.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.ServiceType">
            <summary>
            Gets or sets the type of service the attributed class represents.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.Lifecycle">
            <summary>
            Gets or sets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.FactoryMember">
            <summary>
            Gets or sets the name of a static property or method on the attributed class from which the service instance is retrieved.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.FactoryType">
            <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.IncludeServiceAccessor">
            <summary>
            Indicates if a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1"/> should be registered for the type as well.
            </summary>
            <remarks>Default value is true</remarks>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceConfigurationContext">
            <summary>
            This class is used by the <see cref="T:EPiServer.ServiceLocation.IConfigurableModule"/> to expose the
            IoC container for configuration.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationContext.#ctor(EPiServer.Framework.Initialization.HostType,EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationContext"/> class.
            </summary>
            <param name="hostType">Type of the host.</param>
            <param name="services">The IoC container to expose.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationContext.#ctor(EPiServer.Framework.Initialization.HostType,StructureMap.IContainer)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationContext"/> class.
            </summary>
            <param name="hostType">Type of the host.</param>
            <param name="container">The IoC container to expose.</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.Container">
            <summary>
            The default inversion of control container used by episerver modules.
            Use this property to configure services into the container.
            </summary>
        </member>
        <member name="E:EPiServer.ServiceLocation.ServiceConfigurationContext.ConfigurationComplete">
            <summary>
            ConfigurationComplete is raised when all <see cref="M:EPiServer.ServiceLocation.IConfigurableModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)"/> has been called.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.Services">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            The default inversion of control container used by episerver modules.
            Use this property to configure services into the container.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.HostType">
            <summary>
            Gets the type of the host.
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceConfigurationEventArgs">
            <summary>
            Event argument used in event <see cref="E:EPiServer.ServiceLocation.ServiceConfigurationContext.ConfigurationComplete"/>.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.#ctor(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationEventArgs"/>.
            </summary>
            <param name="services">The services that is being configured.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.#ctor(StructureMap.IContainer)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationEventArgs"/>.
            </summary>
            <param name="container">The container that is being configured.</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.Container">
            <summary>
            The default inversion of control container used by episerver modules.
            Use this property to configure services into the container.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.Services">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            The default inversion of control container used by episerver modules.
            Use this property to configure services into the container.
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions">
            <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider"/> implemenations.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)">
            <summary>
            Registers a transient lifecycled implementation for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <param name="implementationType">The implementation type</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
            <summary>
            Registers a transient lifecycled implementation factory for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <param name="implementationFactory">The implementation factory</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Registers a transient lifecycled implementation for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)">
            <summary>
            Registers a transient lifecycled type as a concrete service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Registers a transient lifecycled type as a concrete service
            </summary>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Registers a transient lifecycled factory for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="implementationFactory">The factory method to create instances</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
            <summary>
            Registers a transient lifecycled factory for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="implementationFactory">The factory method to create instances</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)">
            <summary>
            Registers a singleton lifecycled type for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <param name="implementationType">The implementation type</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
            <summary>
            Registers a singleton lifecycled factory for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <param name="implementationFactory">The implementation factory</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Registers a singleton lifecycled type for a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)">
            <summary>
            Registers a singleton lifecycled concrete type as a service
            </summary>
            <param name="services">The service provider that is extended</param>
            <param name="serviceType">The service type</param>
            <returns>The service configuration provider</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,``0)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add(EPiServer.ServiceLocation.IServiceConfigurationProvider,EPiServer.ServiceLocation.ServiceDescriptor)" -->
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.TryAdd``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Registers the service if not already registered.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="services">The service provider that is extended</param>
            <param name="implementationFactory">The implementation factory</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Forward``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Register <typeparamref name="T2"/> as a service where actual instance is delegated to <typeparamref name="T1"/>
            </summary>
            <typeparam name="T1">An existing service</typeparam>
            <typeparam name="T2">An additional service</typeparam>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.RemoveAll``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Removes all previous registrations for the service.
            </summary>
            <typeparam name="TService">The service to remove configurations for</typeparam>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextOrThreadScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled factory for a service.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="services">The service provider that is extended</param>
            <param name="implementationFactory">The factory</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextOrThreadScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled implementation type for a service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TImpl">The implementation type</typeparam>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
            <summary>
            Registers a http context lifecycled implementation type for a service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TImpl">The implementation type</typeparam>
            <param name="services">The service provider that is extended</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Registers a http context lifecycled factory for a service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="services">The service provider that is extended</param>
            <param name="implementationFactory">The implementation factory</param>
            <returns>The service configuration provider</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceContainerInitialization">
            <summary>
            Initializes the IoC container. To use <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> in an initializable module 
            add <see cref="T:EPiServer.Framework.ModuleDependencyAttribute"/> from your initializable module to <see cref="T:EPiServer.ServiceLocation.ServiceContainerInitialization"/>.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Additional constuctor that can be used from tests.
            </summary>
            <remarks>
            When using this constructor the static instance <see cref="P:EPiServer.ServiceLocation.ServiceLocator.Current"/> will not be assigned.
            </remarks>
            <param name="repo"></param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
            <summary>
            Configures the container with default services.
            </summary>
            <param name="context">The context to configure.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Sets global service locator.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the global service locator.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceContainerInitialization.ServiceConfigurationScanner">
            <summary>
            Scans for the presence of attributes implementing <see cref="T:EPiServer.ServiceLocation.IServiceConfiguration"/>.
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceDescriptor">
            <summary>
            Describes a registration of a concrete implementation for an service/abstraction.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Type,EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor"/> with the specified <paramref name="implementationType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor"/> with the specified <paramref name="instance"/>
            as a <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="instance">The instance implementing the service.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object},EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor"/> with the specified <paramref name="factory"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="factory">A factory used for creating service instances.</param>
            <param name="lifetime">The <see cref="T:EPiServer.ServiceLocation.ServiceInstanceScope"/> of the service.</param>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.Lifetime">
            <summary>
            The lifecycle that the created instances should have
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ServiceType">
            <summary>
            The service type
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ImplementationType">
            <summary>
            The implementation type
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ImplementationInstance">
            <summary>
            The implementation instance
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.InlcudeServiceAccessor">
            <summary>
            Specifies if a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1"/> should be added for the service.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.AddServiceAccessor">
            <summary>
            Adds a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1"/> instance for the service.
            </summary>
            <returns>The service descriptor instance</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``2">
            <summary>
            Creates a transient lifecycled service descriptor.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TImplementation">The implementation type</typeparam>
            <returns>A service descriptor</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Transient(System.Type,System.Type)" -->
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
            <summary>
            Creates a transient lifecycled service descriptor.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TImplementation">The implementation type</typeparam>
            <param name="implementationFactory">The factory to use</param>
            <returns>A service descriptor</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Creates a transient lifecycled service descriptor for a service type.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="implementationFactory">The factory</param>
            <returns>A service descriptor</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Transient(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``2" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped(System.Type,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``2" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton(System.Type,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Instance``1(``0)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.ServiceLocation.ServiceDescriptor.Instance(System.Type,System.Object)" -->
        <member name="T:EPiServer.ServiceLocation.ServiceLocationHelper">
            <summary>
            A class that helps resolving services part of the public API. Module namespaces registers
            extensions to this class to indicate that a service is part of the public API. Using
            one of these namespaces reveals the API. Instances of this class are available from
            key base classes and APIs.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceLocationHelper.Advanced">
            <summary>
            The service locator used for resolving services.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocationHelper.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.ServiceLocation.ServiceLocationHelper"/>.
            </summary>
            <param name="locator">The service locator to use for resolving services.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceLocator">
            <summary>
            This class provides the ambient container for this application. If your
            framework defines such an ambient container, use ServiceLocator.Current
            to get it.
            </summary>
            <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServiceLocator.Current">
            <summary>
            The current ambient container.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocator.SetLocator(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Sets the service locator provider to a service locator provider using the given service locator.
            </summary>
            <param name="serviceLocator">The container to use for the global service locator instance.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocator.SetLocatorProvider(EPiServer.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Set the delegate that is used to retrieve the current container.
            </summary>
            <param name="newProvider">Delegate that, when called, will return
            the current ambient container.</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocator.AssignNullService``1(EPiServer.ServiceLocation.IServiceLocator,``0@)">
            <summary>
            Assigns a service reference using the service locator if not already assigned. 
            This method is used internally by EPiServer to simplify optional service parameters.
            </summary>
            <typeparam name="TService">The type of service to retrieve.</typeparam>
            <param name="locator">The service locator instance to use.</param>
            <param name="potentiallyEmptyServiceReference">The object referenced that is checked for null before beeing assigned.</param>
            <returns>True if a service was assigned, otherwise null.</returns>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceLocatorImplBase">
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:EPiServer.ServiceLocation.IServiceLocator"/>.
            </summary>
            <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetService(System.Type)">
            <summary>
            Implementation of <see cref="!:IServiceLocator.GetService"/>.
            </summary>
            <param name="serviceType">The requested service.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error in resolving the service instance.</exception>
            <returns>The requested object.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance(System.Type,System.Object@)">
            <summary>
            Tries to get an existing instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            <param name="instance">The requested service instance or null if it do not exist</param>
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance(System.Type,System.String,System.Object@)">
            <summary>
            Tries to get an existing instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance``1(``0@)">
            <summary>
            Tries to get an existing instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance``1(System.String,``0@)">
            <summary>
            Tries to get an existing instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoTryGetExistingInstance(System.Type,System.String,System.Object@)">
            <summary>
            When implemented by inheriting classes, this method will look if the instance has been
            created and that it exists.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <param name="instance">The requested service instance. Null if not existing</param>
            <returns>True if the instance was found</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.FormatActivationExceptionMessage(System.Exception,System.Type,System.String)">
            <summary>
            Format the exception message for use in an <see cref="T:EPiServer.ServiceLocation.ActivationException"/>
            that occurs while resolving a single service.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <param name="key">Name requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.FormatActivateAllExceptionMessage(System.Exception,System.Type)">
            <summary>
            Format the exception message for use in an <see cref="T:EPiServer.ServiceLocation.ActivationException"/>
            that occurs while resolving multiple service instances.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.Buildup(System.Object)">
            <summary>
            Satisfies the dependencies of the given service using setter injection.
            </summary>
            <param name="service">The object whose property depdenencies should be set.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceLocatorProvider">
            <summary>
            This delegate type is used to provide a method that will
            return the current container. Used with the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/>
            static accessor class.
            </summary>
            <returns>An <see cref="T:EPiServer.ServiceLocation.IServiceLocator"/>.</returns>
            <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServicePlugInAttributeBase">
            <summary>
            Convenience base class for attributes configuring plugin services.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.ServiceType">
            <summary>
            Gets the type of service the decorated class represents. If null the class is registered with it's own type as service type.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.Lifecycle">
            <summary>
            Gets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.FactoryMember">
            <summary>
            Gets the name of a static property or method on the attributed class from which the service instance is retrieved.
            </summary>
        </member>
        <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.FactoryType">
            <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
        </member>
        <member name="T:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder">
            <summary>
            Used to define the service type that is configured
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.For``1">
            <summary>
            Specifies which service type to configure
            </summary>
            <typeparam name="T">The service type</typeparam>
            <returns>A configurable instance for the service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.For(System.Type)">
            <summary>
            Specifies which service type to configure
            </summary>
            <param name="serviceType">The service type</param>
            <returns>A configurable instance for the service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.Forward``2">
            <summary>
            Forwards an existing registration for service <typeparamref name="T1"/> to <typeparamref name="T2"/>
            </summary>
            <typeparam name="T1">The existing service</typeparam>
            <typeparam name="T2">The added service</typeparam>
        </member>
        <member name="T:EPiServer.ServiceLocation.Compatibility.ConfiguredType">
            <summary>
            Represents a configured service
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.LifecycleIs(EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Specifies which lifecyscle the service should have
            </summary>
            <param name="lifecycle">The lifecycle to set</param>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Singleton">
            <summary>
            Specifies that the service should be singleton
            </summary>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Add(System.Type)">
            <summary>
            Adds an implementation type for the service.
            </summary>
            <param name="type">The implementation type</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Use(System.Type)">
            <summary>
            Specifies an implementation type for the service.
            </summary>
            <param name="type">The implementation type</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Use(System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
            <summary>
            Specifies an implementation factory for the service.
            </summary>
            <param name="type">The implementation type</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1">
            <summary>
            Represents a typed configured service
            </summary>
            <typeparam name="T">The service type</typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.LifecycleIs(EPiServer.ServiceLocation.ServiceInstanceScope)">
            <summary>
            Specifies which lifecyscle the service should have
            </summary>
            <param name="lifecycle">The lifecycle to set</param>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1(``0)">
            <summary>
            Registers a instance for the service type..
            </summary>
            <typeparam name="TInstance">The instance type</typeparam>
            <param name="instance">The instance</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
            <summary>
            Registers a factory for the instance.
            </summary>
            <typeparam name="TInstance">The instance type</typeparam>
            <param name="instanceAccessor">The instance factory</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Registers a factory for the instance.
            </summary>
            <typeparam name="TInstance">The instance type</typeparam>
            <param name="instanceAccessor">The instance factory</param>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1">
            <summary>
            Registers a concrete type for the service.
            </summary>
            <typeparam name="K">The implementation type</typeparam>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.AlwaysUnique">
            <summary>
            Specifies that the service should be transient
            </summary>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Singleton">
            <summary>
            Specifies that the service should be singleton
            </summary>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Transient">
            <summary>
            Specifies that the service should be transient
            </summary>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.HybridHttpOrThreadLocalScoped">
            <summary>
            Specifies that the service should have hybrid (http context or thread local) lifecycle
            </summary>
            <returns>The configured service</returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Add``1">
            <summary>
            Adds a implementation type for the service type
            </summary>
            <typeparam name="T1">The implementation type</typeparam>
        </member>
        <member name="T:EPiServer.ServiceLocation.Compatibility.ServiceConfigurationProviderExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider"/> that can be used to get
            similar configuration methods as in previous versions. 
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.Compatibility.ServiceConfigurationProviderExtensions.Configure(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Action{EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder})">
            <summary>
            Use to configure services for the application.
            </summary>
            <param name="services">The extended service configuration provider</param>
            <param name="expression">The configuration expression</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.ServiceInstanceScope">
            <summary>
            Scope of service instances.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.PerRequest">
            <summary>
            New instance per request.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton">
            <summary>
            One instance per container.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.ThreadLocal">
            <summary>
            One instance per thread.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HttpContext">
            <summary>
            New instance per request.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Hybrid">
            <summary>
            New instance per thread or request.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HttpSession">
            <summary>
            New instance per http session.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HybridHttpSession">
            <summary>
            Hybrid instance per session.
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Unique">
            <summary>
            New instance per usage
            </summary>
        </member>
        <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Transient">
            <summary>
            New instance per usage
            </summary>
        </member>
        <member name="M:EPiServer.ServiceLocation.StructureMapServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.StructureMapServiceLocator.DoTryGetExistingInstance(System.Type,System.String,System.Object@)">
            <summary>
            When implemented by inheriting classes, this method will look if the instance has been
            created and that it exists.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <param name="instance">The requested service instance or null if it do not exist</param>
            <returns>
            True if the instance was found
            </returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.StructureMapServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:EPiServer.ServiceLocation.StructureMapServiceLocator.Buildup(System.Object)">
            <summary>
            Satisfies the dependencies of the given service using setter injection.
            </summary>
            <param name="service">The object whose property depdenencies should be set.</param>
        </member>
        <member name="T:EPiServer.ServiceLocation.Internal.StructureMapConfiguration">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.ServiceModel.GenericWcfServiceHost`1">
            <summary>
            Generic EPiServer WCf hosting class which take the configuration in the enterprise senario
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.ApplyConfiguration">
            <summary>
            Loads the service description information from the configuration file and applies it to the runtime being constructed.
            </summary>
            <exception cref="T:System.InvalidOperationException">The description of the service hosted is null.</exception>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.ConfigWCFService(System.Boolean)">
            <summary>
            Configs the WCF service.
            </summary>
            <param name="privateConfigFile">if set to <c>true</c> [private config file].</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.GetWCFConfigFile(System.Boolean)">
            <summary>
            Gets the WCF config file.
            </summary>
            <param name="privateConfigFile">if set to <c>true</c> [private config file].</param>
            <returns>
            path to config file
            </returns>
        </member>
        <member name="T:EPiServer.Validation.DataAnnotationsValidator`1">
            <summary>
            Base class for validator classes that does validation against attributes specified in System.ComponentModel.DataAnnotations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.DataAnnotationsValidator`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Validation.DataAnnotationsValidator`1.IgnoredAttributes">
            <summary>
            Gets or sets attribute type that should not be part of validation.
            </summary>
            <remarks>
            Default implementation returns empty enumeration.
            </remarks>
            <value>The ignored attributes.</value>
        </member>
        <member name="T:EPiServer.Validation.IValidate">
            <summary>
            base interface for <see cref="T:EPiServer.Validation.IValidate`1"/> the signature for a component that validates object instances 
            </summary>
            <remarks>
            This is interface is just a marker interface to be able to locate instances during scanning.
            </remarks>
        </member>
        <member name="T:EPiServer.Validation.IValidate`1">
            <summary>
            Defines the signature for a component that validates instances of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Validation.IValidate`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Validation.IValidationService">
            <summary>
            Defines the signature for the service that performs vaidation of model instances.
            </summary>
        </member>
        <member name="M:EPiServer.Validation.IValidationService.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Validation.ValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="M:EPiServer.Validation.ValidationError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.ValidationError"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.Source">
            <summary>
            Gets or sets the <see cref="T:EPiServer.Validation.IValidate`1"/> implementation that caused the validation error.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.ValidationType">
            <summary>
            Gets or sets the type of the validation that caused the validation error.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.Severity">
            <summary>
            Gets or sets the severity of the validation error.
            </summary>
            <value>The severity.</value>
            <remarks>Default value is <see cref="F:EPiServer.Validation.ValidationErrorSeverity.Error"/>.</remarks>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.PropertyName">
            <summary>
            Gets or sets the name of the property that validation failed for.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:EPiServer.Validation.ValidationError.RelatedProperties">
            <summary>
            Gets or sets the related properties whose values are affected of <see cref="P:EPiServer.Validation.ValidationError.PropertyName"/> value.
            </summary>
            <value>The related properties.</value>
        </member>
        <member name="T:EPiServer.Validation.ValidationErrorSeverity">
            <summary>
            Indicates the severity for a validation error.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorSeverity.None">
            <summary>
            Not a validation error.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorSeverity.Info">
            <summary>
            Info means that the data is ok but might contain settings that the user might want to be aware of.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorSeverity.Warning">
            <summary>
            This should be fixed but is not blocking.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorSeverity.Error">
            <summary>
            This is a blocking error that needs to be fixed.
            </summary>
        </member>
        <member name="T:EPiServer.Validation.ValidationErrorType">
            <summary>
            Defines which type of validation that caused the error.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorType.Unspecified">
            <summary>
            Cause was not specified.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorType.AttributeMatched">
            <summary>
            Failed to validate against an attribute on the model type.
            </summary>
        </member>
        <member name="F:EPiServer.Validation.ValidationErrorType.StorageValidation">
            <summary>
            Failed to validate against requirements for the storage.
            </summary>
        </member>
        <member name="T:EPiServer.Validation.ValidationService">
            <summary>
            Default implemetation of IValidationService.
            </summary>
            <remarks>
            The implementation will scan for all implementaions of <see cref="T:EPiServer.Validation.IValidate`1"/> and during
            validation call all instances where type parameter T can be assigned to from the instance that is to be validated.
            </remarks>
        </member>
        <member name="M:EPiServer.Validation.ValidationService.Initialize(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.ValidationService"/> class.
            </summary>
            <param name="typeScannerLookup">The type scanner lookup.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:EPiServer.Validation.ValidationService.RegisteredValidators">
            <summary>
            Gets the registered validators.
            </summary>
            <remarks>
            The purpose of exposing registered validators is to make it possible to remove any unwanted validator. 
            Note however that the underlying list is not thread safe so any changes to this list should be done
            from an initialization module.
            </remarks>
            <value>The registered validators.</value>
        </member>
        <member name="M:EPiServer.Validation.ValidationService.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Validation.ValidationService.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="context">The initialization context.</param>
            <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeatedly for each request reaching the site until the method succeeds.
            </remarks>
        </member>
        <member name="M:EPiServer.Validation.ValidationService.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the module into an uninitialized state.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            	<para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
            	<para>
            Any work done by <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)"/> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete"/> should be reversed.
            </para>
            </remarks>
        </member>
        <member name="T:EPiServer.Validation.ValidatorWrapper">
            <summary>
            Class that encapsulates an instance of <see cref="T:EPiServer.Validation.IValidate`1"/>
            </summary>
        </member>
        <member name="P:EPiServer.Validation.ValidatorWrapper.TypeToValidate">
            <summary>
            Gets the type to validate.
            </summary>
            <value>The type to validate.</value>
        </member>
        <member name="M:EPiServer.Validation.ValidatorWrapper.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Validation.ValidatorWrapper.EncapsulatedValidator">
            <summary>
            Gets the encapsulated validator.
            </summary>
            <value>The encapsulated validator.</value>
        </member>
        <member name="T:EPiServer.Validation.ValidatorWrapper`1">
            <summary>
            Class that encapsulates an instance of <see cref="T:EPiServer.Validation.IValidate`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Validation.ValidatorWrapper`1.#ctor(EPiServer.Validation.IValidate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.ValidatorWrapper`1"/> class.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="P:EPiServer.Validation.ValidatorWrapper`1.ValidatorImplementation">
            <summary>
            Gets the validator implementation.
            </summary>
            <value>The validator implementation.</value>
        </member>
        <member name="P:EPiServer.Validation.ValidatorWrapper`1.TypeToValidate">
            <summary>
            Gets the type to validate.
            </summary>
            <value>The type to validate.</value>
        </member>
        <member name="M:EPiServer.Validation.ValidatorWrapper`1.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Validation.ValidatorWrapper`1.EncapsulatedValidator">
            <summary>
            Gets the encapsulated validator.
            </summary>
            <value>The encapsulated validator.</value>
        </member>
        <member name="T:EPiServer.Web.IWebHostingEnvironment">
            <summary>
            Path information for files served via the wwwroot
            </summary>
        </member>
        <member name="P:EPiServer.Web.IWebHostingEnvironment.WebRootPath">
            <summary>
            The physical path to the folder serving web content (ie "c:\inetpub\wwwroot")
            </summary>
        </member>
        <member name="P:EPiServer.Web.IWebHostingEnvironment.WebRootVirtualPath">
            <summary>
            The virtual path to the folder serving web content (ie "/")
            </summary>
        </member>
        <member name="T:EPiServer.Web.MediaHandlerBase">
            <summary>
            Abstract media handler that can be used for any type of binary streams or files
            </summary>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.MediaHandlerBase"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the request
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.ProcessRequestInternal(System.Web.HttpContextBase)">
            <summary>
            The reason for keeping the actual "work code" in a separate 'ProcessRequestInternal'
            function was that it could possibly be called from both IHttpHandler.ProcessRequest 
            as well as from IHttpAsyncHandler.BeginProcessRequest()
            </summary>
            <param name="context"></param>
            <returns>True if request was handled, otherwise false</returns>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.NotModifiedHandling(System.Web.HttpContextBase,System.DateTime)">
            <summary>
            Handles "Not Modified" 304 status notification.
            </summary>
            <param name="context">The context.</param>
            <param name="modifiedDate">The modified date.</param>
            <returns>True if the request will return a Not Modified response.</returns>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.CheckIsModifiedAndAddETag(System.Web.HttpContextBase,System.DateTime)">
            <summary>
            Compares context.Request header "If-Modified-Since" with the given datetime
            </summary>
            <param name="context"></param>
            <param name="modifiedDate"></param>
            <returns>True if either If-Modified-Since header missing from request, or if the
            resource of course *is* modified later than If-Modified-Since date
            Otherwise false</returns>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.SetCachePolicy(System.Web.HttpContextBase,System.DateTime)">
            <summary>
            Configures cache policy of a static file based on configuration rules
            </summary>
            <remarks>Configuration setting expirationTime in web.config states the Expires date that is 
            added to the Resonse (which browsers typically uses to control how long to cache the file before a new request).
            If TimeSpan.Zero is specified in expirationTime no Expires date is added which most browsers will
            interpret so they make a request for the file each time but since Last-Modified is added a 304 (Not modified)
            will be returned by server if file has not changed.</remarks>
            <param name="context">The HttpContext for the current request.</param>
            <param name="fileChangedDate">The changed date for the file that is being requested.</param>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.BeginTransmitStream(System.Web.HttpContextBase,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Async variant of transmitstream that uses from IHttpAsyncHandler.
            </summary>
            <param name="context"></param>
            <param name="source"></param>
            <param name="cb"></param>
            <param name="extraData"></param>
            <returns></returns>
            <remarks>
            This method only supports streams that has Seek capabilities. Use <see cref="M:TransmitStream"/> if the stream 
            doesn't support this.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.MediaHandlerBase.EndTransmitStream(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="res"></param>
        </member>
        <member name="T:EPiServer.Web.MimeMapping">
            <summary>
            Handles mapping from an extension to a mime type.
            </summary>
        </member>
        <member name="M:EPiServer.Web.MimeMapping.AddMimeMapping(System.String,System.String)">
            <summary>
            Adds a MIME type to the mimemapping table
            </summary>
            <param name="extension">The extension.</param>
            <param name="mimeType">Type of the MIME.</param>
        </member>
        <member name="M:EPiServer.Web.MimeMapping.RemoveMimeMapping(System.String)">
            <summary>
            Removes a MIME mapping from the mapping table.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:EPiServer.Web.MimeMapping.ClearMimeMappings">
            <summary>
            Removes all MIME mappings from the mapping table.
            </summary>
        </member>
        <member name="M:EPiServer.Web.MimeMapping.GetMimeMapping(System.String)">
            <summary>
            Gets the mime type based on the extension of a file name.
            </summary>
            <param name="fileName">The file name.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.ToAbsoluteUrl(System.String)">
            <summary>
            Makes a relative path into an absolute path, e.g. ~/hello.aspx -> /apppath/hello.aspx.
            </summary>
            <param name="virtualPath">The path to make absolute.</param>
            <returns>The absolute version of the path.</returns>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.ToAbsolute(System.String)">
            <summary>
            Converts a virtual path to an application absolute path.
            </summary>
            <param name="virtualPath">The virtual path to convert to an application-relative path</param>
            <returns>The absolute path representation of the specified virtual path.</returns>
            <remarks>
            Extends <seealso cref="M:System.Web.VirtualPathUtility.ToAbsolute(System.String,System.String)"/> to make it work in a non ASP.NET-hosted
            environment.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.ToAppRelative(System.String)">
            <summary>
            Converts a virtual path to an application-relative path.
            </summary>
            <param name="virtualPath">The virtual path to convert to an application-relative path.</param>
            <returns>The application-relative path representation of virtualPath.</returns>
            <remarks>
            Extends <seealso cref="M:System.Web.VirtualPathUtility.ToAppRelative(System.String,System.String)"/> to make it work in a non ASP.NET-hosted
            environment.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.Combine(System.String,System.String)">
            <summary>
            Combines a base path and a relative path, but works in a non ASP.NET-hosted environment, and assumes that the
            relative path is relative - even if it begins with a slash.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="relativePath">The relative path.</param>
            <returns>The combined basePath and relativePath.</returns>
            <remarks>
            Extends <seealso cref="M:System.Web.VirtualPathUtility.Combine(System.String,System.String)"/> to make it work in a non ASP.NET-hosted
            environment. Also allows all combos of trailing slash on basePath and leading on relativePath (i.e. will treat
            a 'faulty' relative path starting with a slash as a relative anyway. This is formally incorrect, but pragmatically
            useful due to other EPiServer API:s that for historical reasons work with such 'rooted' paths.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.GetExtension(System.String)">
            <summary>
            Gets the extension for a file referenced in the virtual path.
            </summary>
            <remarks>
            Extends <seealso cref="M:System.Web.VirtualPathUtility.GetExtension(System.String)"/> to make it work in a non ASP.NET-hosted
            environment.
            </remarks>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.IsValidVirtualPath(System.String)">
            <summary>
            Determines whether the given candidate has a valid virtual path syntax.
            </summary>
            <param name="candidate">The candidate virtual path string.</param>
            <returns>
              <c>true</c> if the string is not null or empty and has a valid virtual path syntax; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.ValidatePhysicalPath(System.String)">
            <summary>
            Validates the physical path for the specified path string.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <remarks>
            Throw ArgumentException If the physicalPath is different from the full path.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.VirtualPathUtilityEx.RebasePhysicalPath(System.String)">
            <summary>
            Rebases the physical path according to the AppDataPathKey value, environment variables and relative paths.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            if the path contains AppDataPathKey and the it's value is not configured in the config file.
            </exception>
        </member>
        <member name="T:EPiServer.Web.WebHostingEnvironment">
            <summary>
            Helper class to access to <see cref="T:EPiServer.Web.IWebHostingEnvironment"/>
            </summary>
        </member>
        <member name="T:EPiServer.Web.Routing.IRoutable">
            <summary>
            Represents content specific data for routing.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Routing.IRoutable.RouteSegment">
            <summary>
            Gets or sets the Route segment.
            </summary>
            <value>
            The Route segment.
            </value>
        </member>
        <member name="T:EPiServer.Web.Routing.StaticFileRemapRoute">
            <summary>
            Routes paths registered in the StaticFileRemapHandler to use the EPiServer StaticFileHandler
            </summary>
        </member>
        <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.#ctor(EPiServer.Web.StaticFileRemapHandler)">
            <summary>
            Constructor for StaticFileRemapRoute
            </summary>
            <param name="remapHandler"></param>
        </member>
        <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            Checks if the requested path should be remapped according to the StaticFileRemapHandler and remaps accordingly
            </summary>
            <param name="httpContext">The http context</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            This implementation never returns a virtual path
            </summary>
            <param name="requestContext">The request context</param>
            <param name="values">The route values</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Web.Routing.StaticFileRouteHandler">
            <summary>
            Route handler which always returns the EPiServer StaticFileHandler.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Routing.StaticFileRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Gets the http handler. This implementation always returns the EPiServer StaticFileHandler.
            </summary>
            <param name="requestContext">The request context</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Web.Routing.StopRoutingForExistingFileRoute">
            <summary>
            Route which stops routing if the requested path is a file
            </summary>
        </member>
        <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.#ctor(System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Constructor for StopRoutingForExistingFileRoute
            </summary>
            <param name="vpp"></param>
        </member>
        <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            Checks if file exists and stops routing if that is the case.
            </summary>
            <param name="httpContext">The http context</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            This implementation never returns a virtual path
            </summary>
            <param name="requestContext">The request context</param>
            <param name="values">The route values</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Web.StaticFileHandler">
            <summary>
            Static file handler for Virtual Path Providers
            </summary>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.StaticFileHandler"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.#ctor(EPiServer.Web.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.StaticFileHandler"/> class.
            </summary>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="E:EPiServer.Web.StaticFileHandler.FileTransmitting">
            <summary>
            Occurs when file is being transmitted by handler, allows to cancel transmitting.
            </summary>
            <remarks>
            Only cancellation of the transmission using <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.Cancel"/> is possible when this event is raised. 
            Changes to the <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem"/> is ignored.
            </remarks>
        </member>
        <member name="E:EPiServer.Web.StaticFileHandler.FileProcessing">
            <summary>
            Occurs when file processing begins and allows for changing the transmitted file.
            </summary>
            <remarks>
            The transmitted file can be changed by setting <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem"/> to an existing file.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.ProcessRequestInternal(System.Web.HttpContextBase)">
            <summary>
            The reason for keeping the actual "work code" in a separate 'ProcessRequestInternal'
            function was that it could possibly be called from both IHttpHandler.ProcessRequest 
            as well as from IHttpAsyncHandler.BeginProcessRequest()
            </summary>
            <param name="context"></param>
            <returns>True if request was handled, otherwise false</returns>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.OnFileProcessing(EPiServer.Web.Hosting.VirtualPathEventArgs)">
            <summary>
            Raises the <see cref="E:FileProcessing"/> event.
            </summary>
            <param name="args">The <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.OnFileTransmitting(EPiServer.Web.Hosting.VirtualPathEventArgs)">
            <summary>
            Raises the <see cref="E:FileTransmitting"/> event.
            </summary>
            <param name="args">The <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.TransmitFile(EPiServer.Web.Hosting.VirtualFileEx,System.Web.HttpContextBase)">
            <summary>
            Transmits the file using the unbuffered <see cref="M:System.Web.HttpResponse.TransmitFile(System.String)"/> 
            and sets the Http Status code.
            </summary>
            <param name="virtualFileEx">The virtual file to transmit.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="M:EPiServer.Web.StaticFileHandler.SendVirtualFile(System.Web.Hosting.VirtualFile,System.Web.HttpContextBase)">
            <summary>
            Sends the file using by copying the file stream to the output stream
            and sets the Http Status code.
            </summary>
            <param name="virtualFile">The virtual file to send.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:EPiServer.Web.StaticFileRemapHandler">
            <summary>
            Remaps incoming requests targeted at VPP paths to the static file handler.
            </summary>
        </member>
        <member name="M:EPiServer.Web.StaticFileRemapHandler.ShouldRemapPath(System.String)">
            <summary>
            Checks if the specified path is registered to be remapped.
            </summary>
            <param name="path">The path to check against the list of registered paths.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.StaticFileRemapHandler.OnPostResolveRequestCache(System.Object,System.EventArgs)">
            <summary>
            The HttpApplication.PostMapRequestHandler event handler that validates that the configuration is valid.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Web.StaticFileRemapHandler.RegisterRemapPaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds virtual paths to the list of paths that are remapped to the static file handler.
            </summary>
            <param name="appRelativeVirtualPaths">The virtual paths to remap.</param>
        </member>
        <member name="M:EPiServer.Web.StaticFileRemapHandler.UnregisterRemapPath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes virtual paths from the list of paths that are remapped to the static file handler.
            </summary>
            <param name="appRelativeVirtualPaths">The virtual paths to remap.</param>
        </member>
        <member name="T:EPiServer.Web.Hosting.AspNetHostingEnvironment">
            <summary>
            Default implementation of the IHostingEnvironment interface. It delegates to the ASP.NET
            HostingEnvironment class to do the "real" work.
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.CaseInsensitiveZipArchive">
            <summary>
            Wrapper for <see cref="T:System.IO.Compression.ZipArchive"/> providing case insensitive (read-only) entry lookup.
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.DelegatingVirtualFile">
            <summary>
            Virtual file that delegates all member access to the creator.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.DelegatingVirtualFile.Open">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Web.Hosting.DelegatingVirtualFile.Changed">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Web.Hosting.GenericHostingEnvironment">
            <summary>
            Helper class to get access to hosting environment variables, see <see cref="T:EPiServer.Web.Hosting.IHostingEnvironment"/>
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.GenericWebHostingEnvironment">
            <summary>
            Implementation of <see cref="T:EPiServer.Web.IWebHostingEnvironment"/> for <see cref="T:EPiServer.Web.Hosting.GenericHostingEnvironment"/>
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.IHostingEnvironment">
            <summary>
            Helper class to get access to web hosting environment variables
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.IHostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Registers a new virtual path provider with the ASP.NET compilation system.
            </summary>
            <param name="virtualPathProvider">The virtual path provider.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.VirtualPathProvider">
            <summary>
            Gets the virtual path provider for this application.
            </summary>
            <value>The virtual path provider.</value>
        </member>
        <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationID">
            <summary>
            Gets the unique identifier of the application.
            </summary>
            <value>The application ID.</value>
        </member>
        <member name="M:EPiServer.Web.Hosting.IHostingEnvironment.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical path on the server.
            </summary>
            <param name="virtualPath">The virtual path (absolute or relative).</param>
            <returns>The physical path on the server specified by the virtualPath parameter.</returns>
        </member>
        <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationPhysicalPath">
            <summary>
            Gets the physical path on disk to the application's directory.
            </summary>
            <value>The application physical path.</value>
        </member>
        <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationVirtualPath">
            <summary>
            Gets the root virtual path of the application.
            </summary>
            <value>The application virtual path.</value>
        </member>
        <member name="T:EPiServer.Web.Hosting.IVirtualPathProviderModule">
            <summary>
            Can be implemented by a class to create a list of virtual path providers available early when EPiServer Framework initializes
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.IVirtualPathProviderModule.CreateProviders(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Method is called the EPiServer Framework initializes to give a chance to register providers as early as possible
            </summary>
            <param name="context">The context</param>
            <returns>A list of providers</returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.MappedVirtualFile">
            <summary>
            Virtual file implementation for mapping a virtual path to another virtual path, 
            making a <see cref="T:System.Web.Hosting.VirtualFile"/> available in additional locations.
            Used by the <see cref="T:EPiServer.Web.Hosting.VirtualPathMappedProvider"/>
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.MappedVirtualFile.#ctor(System.String,System.Web.Hosting.VirtualFile)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.MappedVirtualFile"/> class.
            </summary>
            <param name="originalName">Original name of the file.</param>
            <param name="actualFile">The actual file.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.MappedVirtualFile.IsDirectory">
            <summary>
            Gets a value that indicates that this is a virtual resource that should be treated as a file.
            </summary>
            <value></value>
            <returns>Always false. </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.MappedVirtualFile.Open">
            <summary>
            When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
            <returns>A read-only stream to the virtual file.</returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualFileEx">
            <summary>
            Extends the <see cref="T:System.Web.Hosting.VirtualFile"/> implemetation with properties enabling efficient transmission by the <see cref="T:EPiServer.Web.StaticFileHandler"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualFileEx.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualFileEx"/> class.
            </summary>
            <param name="virtualPath">The virtual path to the resource represented by this instance.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualFileEx.Changed">
            <summary>
            Base class implementation of interface. Throws NotImplementedException.
            </summary>
            <value>The changed.</value>        
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualFileEx.LocalPath">
            <summary>
            Gets the local path. Base class returns null
            </summary>
            <value>The local path.</value>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualFileEx.Extension">
            <summary>
            Gets the UnifiedFiles extension, for example '.doc'.
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathEventArgs">
            <summary>
            Virtual path actions event data
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs"/> class.
            </summary>
            <param name="virtualPath">The previous virtual path.</param>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathEventArgs.#ctor(System.Web.Hosting.VirtualFileBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs"/> class.
            </summary>
            <param name="virtualItem">The virtual item - directory or file.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualPath">
            <summary>
            Gets or sets the previous virtual path.
            </summary>
            <value>The virtual path.</value>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem">
            <summary>
            Gets or sets the virtual item (file or directory).
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be cancelled.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathMappedProvider">
            <summary>
            A virtual path provider for mapping specific virtual paths to other locations. 
            The mappings are configured in web.config.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">The name of the provider</param>
            <param name="configParameters">The config parameters for the provider</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.Provider">
            <summary>
            Returns the VirtualPathProvider to use.
            </summary>
            <remarks>
            By default it returns GenericHostingEnvironment.Instance.VirtualPathProvider. For testing purpose it can be assigned.
            </remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
             <summary>
             Adds web.config hash to virtualPath
             </summary>
             <param name="virtualPath">Path to file</param>
             <param name="virtualPathDependencies">Path to dependencies to virtualPath file</param>
             <returns>string</returns>
             <remarks>
             Because we have configuration in web.config for VirtualPathMappings we need to know when web.config has changed and reload mappings.
             By default virtualprovider sets only dependencies to file and controls on pages we have mapping to, it doesnt recognize web.config as a dependecy
             Thats why we adding HashCode for webconfig with return
            </remarks>
            <example>
             Web.config.
             <virtualPathMappings>
             <add url="~/myPage.aspx" mappedUrl="~/MapsToThis.aspx" />
             <add url="~/ctrl.ascx" mappedUrl="~/MapsToThisControl.ascx" />
             </virtualPathMappings>
            </example>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            If the path is mapped it will add a cachedependency to the mapped file.
            </summary>
            <param name="virtualPath"></param>
            <param name="virtualPathDependencies"></param>
            <param name="utcStart"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetFile(System.String)">
            <summary>
            Gets the virtualPath file. If it doesn't exists under this providers
            responibillity it transfers the request to the next provider in chain.
            </summary>
            <param name="virtualPath"></param>
            <returns>VirtualFile or null.</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetDirectory(System.String)">
            <summary>
            Gets the virtualPath directory. If it doesn't exists under this providers
            responibillity it transfers the request to the next provider in chain.
            </summary>
            <param name="virtualDir">The path to the virtual directory.</param>
            <returns>
            VirtualDirectory or null
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.FileExists(System.String)">
            <summary>
            Checks if this VPP has knowlegde in existance of file under virtualPath. If not
            passes the query to the next provider in chain (if any).
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.DirectoryExists(System.String)">
            <summary>
            Checks if this VPP has knowlegde in existance of directory under virtualPath. If not
            passes the query to the next provider in chain (if any).
            </summary>
            <param name="virtualDir">The virtual path to check existence for</param>
            <returns>
            true if the directory exists in the virtual file system; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Returns a combination of two hash codes.
            </summary>
            <param name="first">The first number in the </param>
            <param name="second"></param>
            <returns>The combination </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.ReadPathMappingsFromWebConfig">
            <summary>
             Reads section VirtualPathMappings from web.config into a Generic Dictionary
            </summary>
            <example>
             <virtualPathMappings>
                <add url="~/Example.aspx" mappedUrl="~/MapsToThis.aspx" />
            </virtualPathMappings>
            </example>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when file extensions aren't same</exception>
            <returns>Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.PathMappings">
            <summary>
            Adds Virtualmappings to dictionary
            </summary>
            <remarks>
            <para>
            For testing purposes can it be set, otherwise during runtime it is read from config file.
            </para>
            <para>
            Dictionary implements StringComparer.OrdinalIgnoreCase
            </para>
            </remarks>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.WebConfigHash">
            <summary>
            Gets hashcode for web.config
            Creates hashcode from FileInfo object. (webConfig path, CreationTime, LastWriteTime, Length)
            </summary>
            <remarks>Can be set for test puropses.</remarks>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider">
            <summary>
            This class is used for relocating folders outside physical application root. Typical usage is to separate
            portions of the the EPiServer UI files from the site files.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.ProviderName">
            <summary>
            Gets the name of the virtual path provider.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.ConfigurationParameters">
            <summary>
            Gets the collection of configuration parameters for the virtual path provider.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.LocalPath">
            <summary>
            Gets the physical path mapping to the virtual path root.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.VirtualPathRoot">
            <summary>
            Gets the virtual path root. Only paths starting with this are handled by this provider.
            </summary>
            <value>The virtual path root, always ending with a /.</value>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider"/>.
            </summary>
            <param name="providerName">The provider name as specified in the VirtualPathProviders section in the configuration.</param>
            <param name="configParameters">A dictionary containing all configuration parameters as specified in the configuration file.</param>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.DirectoryExists(System.String)">
            <summary>
            Gets a value that indicates whether a directory exists in the virtual file system.
            </summary>
            <param name="virtualDir">The virtual path.</param>
            <returns>
            true if the directory exists in the virtual file system, otherwise false.
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.FileExists(System.String)">
            <summary>
            Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>true if the file exists in the virtual file system, otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFile(System.String)">
            <summary>
            Gets a file from the virtual filesystem.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>A <see cref="T:System.Web.Hosting.VirtualFile"/> object representing the virtual path.</returns>
            <remarks>If the specified virtual path is not handled by the current virtual path provider the next provider in the provider chain is queried.</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetDirectory(System.String)">
            <summary>
            Gets a directory from the virtual filesystem.
            </summary>
            <param name="virtualDir">The virtual path.</param>
            <returns>A <see cref="T:System.Web.Hosting.VirtualDirectory"/> object representing the virtual path.</returns>
            <remarks>If the specified virtual path is not handled by the current virtual path provider the next provider in the provider chain is queried.</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
            <param name="virtualPath">The path to the primary virtual resource.</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param>
            <param name="utcStart">The UTC time at which the virtual resources were read.</param>
            <returns>A <see cref="T:System.Web.Caching.CacheDependency"/> object for the specified virtual resources.</returns>
            <remarks>virtualPathDependencies has to be an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.String"/>.
            All the elements that are not strings will be ignored. No exception will be thrown.</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a hash for the file found at the specified virtual path and its dependencies.
            </summary>
            <param name="virtualPath">The path to the primary virtual resource.</param>
            <param name="virtualPathDependencies">An array of paths to other virtual resources required by the primary virtual resource.</param>
            <returns>
            A hash of the files specified in the virtual path dependencies.
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFileHash(System.String)">
            <summary>
            Gets the hash value for an existing file.
            The hash is a combination of local path, the creation time, last write time and the file length.
            </summary>
            <param name="localFilePath">The local file path.</param>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Returns a combination of two hash codes.
            </summary>
            <param name="first">The first number in the </param>
            <param name="second"></param>
            <returns>The combination </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetAndValidatePhysicalPathBase(System.String)">
            <summary>
            Gets <see cref="T:System.IO.DirectoryInfo"/> object representing the physical path.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> object for the physical path.</returns>
            <remarks>This method considers environment variables when resolving physical paths.</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.MapVirtualPathToLocalPath(System.String,System.String@)">
            <summary>
            Maps a virtual (relative) path to an local absolute path
            </summary>
            <param name="virtualPath">the virtual path</param>
            <param name="outLocalPath">returned local absolute path</param>
            <returns>True if virtual path was mapped successfully to an absolute path within the namespace of this provider, false otherwise</returns>
            <remarks>Note that this function does not check if the file actually exists, it only cares about path mapping</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.TryGetHandledAbsolutePath(System.String,System.String@)">
            <summary>
            Tries to get the absolute path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <param name="handledPath">The resulting absolute path.</param>
            <returns>True if the virtual path is handled by the current provider.</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.MapPathInternal(System.IO.DirectoryInfo,System.String)">
            <summary>
            Maps a virtual path to it's corresponding physical path, given a physical path base.
            </summary>
            <remarks>The implementation expects that virtualPath is a absoulte virtualPath
            starting with the path this provider instance is registered with. Validation can be performed 
            by <see cref="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.TryGetHandledAbsolutePath(System.String,System.String@)"/></remarks>
            <param name="physicalPathBase">The base physical path.</param>
            <param name="virtualPath">The virtual path.</param>
            <returns>A physical path</returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedFile">
            <summary>
            Represents physical files for a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedFile.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedFile"/> instance.
            </summary>
            <param name="physicalPath">The physical path to represent.</param>
            <param name="virtualPath">The virtual path to represent.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedFile.PhysicalPath">
            <summary>
            Gets the physical path for the virtual file.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedFile.Open">
            <summary>
            Opens a readable <see cref="T:System.IO.Stream"/> on the file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> instance.</returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory">
            <summary>
            Represents physical directories for a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.#ctor(System.String,System.String,EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider)">
            <summary>
            Creates a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory"/> instance.
            </summary>
            <param name="physicalPath">The physical path to represent.</param>
            <param name="virtualPath">The virtual path to represent.</param>
            <param name="provider">The <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider"/> that handles the file.</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.PhysicalPath">
            <summary>
            Gets the physical path for the virtual directory.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.PhysicalDirectory">
            <summary>
            Gets a <see cref="T:System.IO.DirectoryInfo"/> representing the physical directory.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.Provider">
            <summary>
            Gets the <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider"/> handling this virtual directory.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.Children">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerable"/> for all sub directories and files of the virtual directory.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.Directories">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerable"/> for all sub directories of the virtual directory.
            </summary>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.Files">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerable"/> for all files of the virtual directory.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.GetDirectories">
            <summary>
            Retrieves an <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;NonUnifiedDirectory&gt;</see> for all sub directories of the virtual directory.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;NonUnifiedDirectory&gt;</see>.</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.NonUnifiedDirectory.GetFiles">
            <summary>
            Retrieves an <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;NonUnifiedFile&gt;</see> for all files of the virtual directory.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;NonUnifiedFile&gt;</see>.</returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.VirtualPathRegistrationHandler">
            <summary>
            Handles the registration of virtual path providers with the hosting environment.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisterVirtualPathProviders(System.Configuration.ProviderSettingsCollection)">
            <summary>
            Registers the providers from the specified collection with the hosting environment
            </summary>
            <param name="settings">The provider collection.</param>
            <remarks>This method does not support registering virtual path providers from code</remarks>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisterVirtualPathProviders(EPiServer.Framework.Initialization.InitializationEngine,System.Configuration.ProviderSettingsCollection)">
             <summary>
             Registers providers both from code implementing <see cref="T:EPiServer.Web.Hosting.IVirtualPathProviderModule"/> and providers from configuration
             </summary>
            <param name="context">The installation context, if <c>null</c> any providers in code will not be initialized</param>
            <param name="settings">The provider settings, if <c>null</c> they will be ignored</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisteredVirtualPathProviders">
            <summary>
            Gets the registered virtual path providers instances.
            </summary>
            <value>The registered virtual path providers.</value>
        </member>
        <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.CreateVirtualPathProviderInstance(System.Configuration.ProviderSettings)">
            <summary>
            Creates an Instance of the registered/configured VirtualPathProvider subclass. Before
            instance can be created Reflection API is used to determine if configured class meets the
            minimun requirements in semantics.
            </summary>
            <param name="providerSettings"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Web.Hosting.ZipArchiveReader">
            <summary>
            Represents a class responsible for reading ZipArchives and provide notification if the underlying archive 
            source has been modified.
            </summary>
            <remarks>
            This class should not be made public without removing the exposure of CaseInsensitiveZipArchive. This can be done
            if ZipArchive starts supporting case insensitive entries, or by replacing OpenArchive with GetEntry and GetDirectoryEntries.
            </remarks>
        </member>
        <member name="E:EPiServer.Web.Hosting.ZipArchiveReader.ArchiveModified">
            <summary>
            Occurs when the underlying archive source has been modified.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.OpenArchive">
            <summary>
            Opens the archive that this reader was created for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.GetArchiveHash">
            <summary>
            Gets a hash code representing the archive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.GetCacheDependency(System.Web.Caching.CacheDependency,System.DateTime)">
            <summary>
            Gets a cache dependency to the ZipArchive source.
            </summary>
            <param name="baseDependency">The base dependency.</param>
            <param name="utcStart">The UTC start.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.OnArchiveModified">
            <summary>
            Called when the underlying archive source has been modified.
            </summary>
        </member>
        <member name="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider">
            <summary>
            A <see cref="T:System.Web.Hosting.VirtualPathProvider"/> that will serve the contents of a zip archive as a virtual file system.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider"/> class.
            </summary>
            <param name="virtualPath">The virtual path that should be mapped by the provider</param>
            <param name="archivePath">Relative or absolute path to the zip archive file</param>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider"/> class.
            </summary>
            <param name="virtualPath">The virtual path that should be mapped by the provider</param>
            <param name="archivePath">Relative or absolute path to the zip archive file</param>
            <param name="archiveBasePath">The base path inside the zip archive that should be use. e.g. if you want to make any subfolder as the base path</param>
        </member>
        <member name="P:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.Archive">
            <summary>
             Gets the zip file as lazily loaded
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.DirectoryExists(System.String)">
            <summary>
            Returns true if the given virtual path exists as a Folder inside the zip
            </summary>
            <param name="virtualDir">The virtual path</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetDirectory(System.String)">
            <summary>
            Returns the virtual folder by given virtual directory path
            </summary>
            <param name="virtualDir">The virtual path to the directory</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.FileExists(System.String)">
            <summary>
            Checks if a file exists in the mapped path, otherwise fall back to the base implementation.
            </summary>
            <param name="virtualPath">The virtual path</param>
            <returns>True if the file exists; otherwise false</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFile(System.String)">
            <summary>
            Returns the mapped file if there is one; otherwise fall back to the base implementation
            </summary>
            <param name="virtualPath">Path to the file</param>
            <returns>A virtual file if one exists; otherwise null</returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
            <param name="virtualPath">The path to the primary virtual resource.</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param>
            <param name="utcStart">The UTC time at which the virtual resources were read.</param>
            <returns>
            A <see cref="T:System.Web.Caching.CacheDependency" /> object for the specified virtual resources.
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetCacheKey(System.String)">
            <summary>
            Returns a cache key to use for the specified virtual path.
            </summary>
            <param name="virtualPath">The path to the virtual resource.</param>
            <returns>
            A cache key for the specified virtual resource.
            </returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
            Returns the computed hash based on zipped file's name, creation time, modified time and uncompressed size
            </summary>
            <param name="virtualPath">The virtual path of the file</param>
            <param name="virtualPathDependencies">List of dependant file paths</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetDirectoryEntry(System.String)">
            <summary>
            Returns the zip entry by given virtual directory path. 
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFileEntry(System.String)">
            <summary>
            Returns the zip entry by given virtual file path. 
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.ContainsFileEntry(System.String)">
            <summary>
            Only returns true if the ZipEntry exists inside the zip file for given path
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetEntry(System.String)">
            <summary>
            Returns the zip file entry for the given path.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.TryToMapped(System.String,System.String@)">
            <summary>
            Try to check whether a given virtualPath is mapped to current provider.
            </summary>
        </member>
        <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.ClearResources">
            <summary>
            Empties the in-memory data and loaded archive
            </summary>
        </member>
    </members>
</doc>
